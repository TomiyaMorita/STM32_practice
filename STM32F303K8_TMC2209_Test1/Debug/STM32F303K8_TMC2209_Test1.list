
STM32F303K8_TMC2209_Test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004628  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000378  080047b8  080047b8  000147b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b30  08004b30  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004b30  08004b30  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b30  08004b30  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b30  08004b30  00014b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b34  08004b34  00014b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004b38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000007dc  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000084c  2000084c  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a60c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b13  00000000  00000000  0002a6ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000800  00000000  00000000  0002c1c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000748  00000000  00000000  0002c9c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bd8a  00000000  00000000  0002d108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000acbc  00000000  00000000  00048e92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ee54  00000000  00000000  00053b4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000f29a2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000276c  00000000  00000000  000f29f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080047a0 	.word	0x080047a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080047a0 	.word	0x080047a0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <tmc2209_readWriteArray>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void tmc2209_readWriteArray(uint8_t channel, uint8_t *data, size_t writeLength, size_t readLength)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
 8000276:	60b9      	str	r1, [r7, #8]
 8000278:	607a      	str	r2, [r7, #4]
 800027a:	603b      	str	r3, [r7, #0]
 800027c:	4603      	mov	r3, r0
 800027e:	73fb      	strb	r3, [r7, #15]
	//set your uart read write
	//UART_readWrite(channelToUART(channel), data, writeLength, readLength);
	HAL_HalfDuplex_EnableTransmitter(&huart1);
 8000280:	480e      	ldr	r0, [pc, #56]	; (80002bc <tmc2209_readWriteArray+0x4c>)
 8000282:	f002 fb9c 	bl	80029be <HAL_HalfDuplex_EnableTransmitter>
	HAL_UART_Transmit(&huart1, data, writeLength,3000);
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	b29a      	uxth	r2, r3
 800028a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800028e:	68b9      	ldr	r1, [r7, #8]
 8000290:	480a      	ldr	r0, [pc, #40]	; (80002bc <tmc2209_readWriteArray+0x4c>)
 8000292:	f002 fa2f 	bl	80026f4 <HAL_UART_Transmit>

	if(readLength > 0){
 8000296:	683b      	ldr	r3, [r7, #0]
 8000298:	2b00      	cmp	r3, #0
 800029a:	d00a      	beq.n	80002b2 <tmc2209_readWriteArray+0x42>
		HAL_HalfDuplex_EnableReceiver(&huart1);
 800029c:	4807      	ldr	r0, [pc, #28]	; (80002bc <tmc2209_readWriteArray+0x4c>)
 800029e:	f002 fbe0 	bl	8002a62 <HAL_HalfDuplex_EnableReceiver>
		HAL_UART_Receive(&huart1, data, readLength, 3000);
 80002a2:	683b      	ldr	r3, [r7, #0]
 80002a4:	b29a      	uxth	r2, r3
 80002a6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80002aa:	68b9      	ldr	r1, [r7, #8]
 80002ac:	4803      	ldr	r0, [pc, #12]	; (80002bc <tmc2209_readWriteArray+0x4c>)
 80002ae:	f002 fab5 	bl	800281c <HAL_UART_Receive>
	}
}
 80002b2:	bf00      	nop
 80002b4:	3710      	adds	r7, #16
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	2000008c 	.word	0x2000008c

080002c0 <tmc2209_CRC8>:

uint8_t tmc2209_CRC8(uint8_t *data, size_t length)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
 80002c8:	6039      	str	r1, [r7, #0]
	return TMC2209_CRC(data, length);
 80002ca:	2201      	movs	r2, #1
 80002cc:	6839      	ldr	r1, [r7, #0]
 80002ce:	6878      	ldr	r0, [r7, #4]
 80002d0:	f002 ffb8 	bl	8003244 <tmc_CRC8>
 80002d4:	4603      	mov	r3, r0
}
 80002d6:	4618      	mov	r0, r3
 80002d8:	3708      	adds	r7, #8
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
	...

080002e0 <reset>:

	//StepDir_periodicJob(0);
}

static uint8_t reset()
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
	//StepDir_init(STEPDIR_PRECISION);
	//StepDir_setPins(0, Pins.STEP, Pins.DIR, Pins.DIAG);

	return tmc2209_reset(&TMC2209);
 80002e4:	4802      	ldr	r0, [pc, #8]	; (80002f0 <reset+0x10>)
 80002e6:	f003 f8fb 	bl	80034e0 <tmc2209_reset>
 80002ea:	4603      	mov	r3, r0
}
 80002ec:	4618      	mov	r0, r3
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	20000194 	.word	0x20000194

080002f4 <restore>:

static uint8_t restore()
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
	return tmc2209_restore(&TMC2209);
 80002f8:	4802      	ldr	r0, [pc, #8]	; (8000304 <restore+0x10>)
 80002fa:	f003 f92b 	bl	8003554 <tmc2209_restore>
 80002fe:	4603      	mov	r3, r0
}
 8000300:	4618      	mov	r0, r3
 8000302:	bd80      	pop	{r7, pc}
 8000304:	20000194 	.word	0x20000194

08000308 <TMC2209_INIT>:


void TMC2209_INIT()
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af02      	add	r7, sp, #8
	tmc_fillCRC8Table(0x07, true, 1);
 800030e:	2201      	movs	r2, #1
 8000310:	2101      	movs	r1, #1
 8000312:	2007      	movs	r0, #7
 8000314:	f002 fede 	bl	80030d4 <tmc_fillCRC8Table>

	TMC2209_config.reset = reset;
 8000318:	4b09      	ldr	r3, [pc, #36]	; (8000340 <TMC2209_INIT+0x38>)
 800031a:	4a0a      	ldr	r2, [pc, #40]	; (8000344 <TMC2209_INIT+0x3c>)
 800031c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	TMC2209_config.restore = restore;
 8000320:	4b07      	ldr	r3, [pc, #28]	; (8000340 <TMC2209_INIT+0x38>)
 8000322:	4a09      	ldr	r2, [pc, #36]	; (8000348 <TMC2209_INIT+0x40>)
 8000324:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208

	tmc2209_init(&TMC2209, 0, 0, &TMC2209_config, &tmc2209_defaultRegisterResetState[0]);
 8000328:	4b08      	ldr	r3, [pc, #32]	; (800034c <TMC2209_INIT+0x44>)
 800032a:	9300      	str	r3, [sp, #0]
 800032c:	4b04      	ldr	r3, [pc, #16]	; (8000340 <TMC2209_INIT+0x38>)
 800032e:	2200      	movs	r2, #0
 8000330:	2100      	movs	r1, #0
 8000332:	4807      	ldr	r0, [pc, #28]	; (8000350 <TMC2209_INIT+0x48>)
 8000334:	f003 f88a 	bl	800344c <tmc2209_init>

	//restore();
}
 8000338:	bf00      	nop
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	2000041c 	.word	0x2000041c
 8000344:	080002e1 	.word	0x080002e1
 8000348:	080002f5 	.word	0x080002f5
 800034c:	080047e0 	.word	0x080047e0
 8000350:	20000194 	.word	0x20000194

08000354 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
   setbuf(stdout, NULL);
 800035a:	4b15      	ldr	r3, [pc, #84]	; (80003b0 <main+0x5c>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	689b      	ldr	r3, [r3, #8]
 8000360:	2100      	movs	r1, #0
 8000362:	4618      	mov	r0, r3
 8000364:	f003 f9d0 	bl	8003708 <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000368:	f000 faa4 	bl	80008b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800036c:	f000 f82a 	bl	80003c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000370:	f000 f8da 	bl	8000528 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000374:	f000 f8a8 	bl	80004c8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000378:	f000 f876 	bl	8000468 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  TMC2209_INIT();
 800037c:	f7ff ffc4 	bl	8000308 <TMC2209_INIT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uint32_t value = 0;
 8000380:	2300      	movs	r3, #0
 8000382:	607b      	str	r3, [r7, #4]
	  value = tmc2209_readInt(&TMC2209, TMC2209_FACTORY_CONF);
 8000384:	2107      	movs	r1, #7
 8000386:	480b      	ldr	r0, [pc, #44]	; (80003b4 <main+0x60>)
 8000388:	f002 fffd 	bl	8003386 <tmc2209_readInt>
 800038c:	4603      	mov	r3, r0
 800038e:	607b      	str	r3, [r7, #4]
	  printf("FACTORY_CONF: %ld\r\n", value);
 8000390:	6879      	ldr	r1, [r7, #4]
 8000392:	4809      	ldr	r0, [pc, #36]	; (80003b8 <main+0x64>)
 8000394:	f003 f92a 	bl	80035ec <iprintf>
	  printf("Hello\r\n");
 8000398:	4808      	ldr	r0, [pc, #32]	; (80003bc <main+0x68>)
 800039a:	f003 f9ad 	bl	80036f8 <puts>
	  printf("Goodbye\r\n");
 800039e:	4808      	ldr	r0, [pc, #32]	; (80003c0 <main+0x6c>)
 80003a0:	f003 f9aa 	bl	80036f8 <puts>
	  HAL_Delay(1000);
 80003a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003a8:	f000 faea 	bl	8000980 <HAL_Delay>
  {
 80003ac:	e7e8      	b.n	8000380 <main+0x2c>
 80003ae:	bf00      	nop
 80003b0:	2000000c 	.word	0x2000000c
 80003b4:	20000194 	.word	0x20000194
 80003b8:	080047b8 	.word	0x080047b8
 80003bc:	080047cc 	.word	0x080047cc
 80003c0:	080047d4 	.word	0x080047d4

080003c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b096      	sub	sp, #88	; 0x58
 80003c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80003ce:	2228      	movs	r2, #40	; 0x28
 80003d0:	2100      	movs	r1, #0
 80003d2:	4618      	mov	r0, r3
 80003d4:	f003 f902 	bl	80035dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003d8:	f107 031c 	add.w	r3, r7, #28
 80003dc:	2200      	movs	r2, #0
 80003de:	601a      	str	r2, [r3, #0]
 80003e0:	605a      	str	r2, [r3, #4]
 80003e2:	609a      	str	r2, [r3, #8]
 80003e4:	60da      	str	r2, [r3, #12]
 80003e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003e8:	1d3b      	adds	r3, r7, #4
 80003ea:	2200      	movs	r2, #0
 80003ec:	601a      	str	r2, [r3, #0]
 80003ee:	605a      	str	r2, [r3, #4]
 80003f0:	609a      	str	r2, [r3, #8]
 80003f2:	60da      	str	r2, [r3, #12]
 80003f4:	611a      	str	r2, [r3, #16]
 80003f6:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003f8:	2302      	movs	r3, #2
 80003fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003fc:	2301      	movs	r3, #1
 80003fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000400:	2310      	movs	r3, #16
 8000402:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000404:	2300      	movs	r3, #0
 8000406:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000408:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800040c:	4618      	mov	r0, r3
 800040e:	f000 fd33 	bl	8000e78 <HAL_RCC_OscConfig>
 8000412:	4603      	mov	r3, r0
 8000414:	2b00      	cmp	r3, #0
 8000416:	d001      	beq.n	800041c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000418:	f000 f8be 	bl	8000598 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800041c:	230f      	movs	r3, #15
 800041e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000420:	2300      	movs	r3, #0
 8000422:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000424:	2300      	movs	r3, #0
 8000426:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000428:	2300      	movs	r3, #0
 800042a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800042c:	2300      	movs	r3, #0
 800042e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000430:	f107 031c 	add.w	r3, r7, #28
 8000434:	2100      	movs	r1, #0
 8000436:	4618      	mov	r0, r3
 8000438:	f001 fd5c 	bl	8001ef4 <HAL_RCC_ClockConfig>
 800043c:	4603      	mov	r3, r0
 800043e:	2b00      	cmp	r3, #0
 8000440:	d001      	beq.n	8000446 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000442:	f000 f8a9 	bl	8000598 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000446:	2301      	movs	r3, #1
 8000448:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800044a:	2300      	movs	r3, #0
 800044c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800044e:	1d3b      	adds	r3, r7, #4
 8000450:	4618      	mov	r0, r3
 8000452:	f001 ff85 	bl	8002360 <HAL_RCCEx_PeriphCLKConfig>
 8000456:	4603      	mov	r3, r0
 8000458:	2b00      	cmp	r3, #0
 800045a:	d001      	beq.n	8000460 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800045c:	f000 f89c 	bl	8000598 <Error_Handler>
  }
}
 8000460:	bf00      	nop
 8000462:	3758      	adds	r7, #88	; 0x58
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}

08000468 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800046c:	4b14      	ldr	r3, [pc, #80]	; (80004c0 <MX_USART1_UART_Init+0x58>)
 800046e:	4a15      	ldr	r2, [pc, #84]	; (80004c4 <MX_USART1_UART_Init+0x5c>)
 8000470:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000472:	4b13      	ldr	r3, [pc, #76]	; (80004c0 <MX_USART1_UART_Init+0x58>)
 8000474:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000478:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800047a:	4b11      	ldr	r3, [pc, #68]	; (80004c0 <MX_USART1_UART_Init+0x58>)
 800047c:	2200      	movs	r2, #0
 800047e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000480:	4b0f      	ldr	r3, [pc, #60]	; (80004c0 <MX_USART1_UART_Init+0x58>)
 8000482:	2200      	movs	r2, #0
 8000484:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000486:	4b0e      	ldr	r3, [pc, #56]	; (80004c0 <MX_USART1_UART_Init+0x58>)
 8000488:	2200      	movs	r2, #0
 800048a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800048c:	4b0c      	ldr	r3, [pc, #48]	; (80004c0 <MX_USART1_UART_Init+0x58>)
 800048e:	220c      	movs	r2, #12
 8000490:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000492:	4b0b      	ldr	r3, [pc, #44]	; (80004c0 <MX_USART1_UART_Init+0x58>)
 8000494:	2200      	movs	r2, #0
 8000496:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000498:	4b09      	ldr	r3, [pc, #36]	; (80004c0 <MX_USART1_UART_Init+0x58>)
 800049a:	2200      	movs	r2, #0
 800049c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800049e:	4b08      	ldr	r3, [pc, #32]	; (80004c0 <MX_USART1_UART_Init+0x58>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004a4:	4b06      	ldr	r3, [pc, #24]	; (80004c0 <MX_USART1_UART_Init+0x58>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 80004aa:	4805      	ldr	r0, [pc, #20]	; (80004c0 <MX_USART1_UART_Init+0x58>)
 80004ac:	f002 f8cc 	bl	8002648 <HAL_HalfDuplex_Init>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80004b6:	f000 f86f 	bl	8000598 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80004ba:	bf00      	nop
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	2000008c 	.word	0x2000008c
 80004c4:	40013800 	.word	0x40013800

080004c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004cc:	4b14      	ldr	r3, [pc, #80]	; (8000520 <MX_USART2_UART_Init+0x58>)
 80004ce:	4a15      	ldr	r2, [pc, #84]	; (8000524 <MX_USART2_UART_Init+0x5c>)
 80004d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80004d2:	4b13      	ldr	r3, [pc, #76]	; (8000520 <MX_USART2_UART_Init+0x58>)
 80004d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004da:	4b11      	ldr	r3, [pc, #68]	; (8000520 <MX_USART2_UART_Init+0x58>)
 80004dc:	2200      	movs	r2, #0
 80004de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004e0:	4b0f      	ldr	r3, [pc, #60]	; (8000520 <MX_USART2_UART_Init+0x58>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004e6:	4b0e      	ldr	r3, [pc, #56]	; (8000520 <MX_USART2_UART_Init+0x58>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004ec:	4b0c      	ldr	r3, [pc, #48]	; (8000520 <MX_USART2_UART_Init+0x58>)
 80004ee:	220c      	movs	r2, #12
 80004f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004f2:	4b0b      	ldr	r3, [pc, #44]	; (8000520 <MX_USART2_UART_Init+0x58>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004f8:	4b09      	ldr	r3, [pc, #36]	; (8000520 <MX_USART2_UART_Init+0x58>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004fe:	4b08      	ldr	r3, [pc, #32]	; (8000520 <MX_USART2_UART_Init+0x58>)
 8000500:	2200      	movs	r2, #0
 8000502:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000504:	4b06      	ldr	r3, [pc, #24]	; (8000520 <MX_USART2_UART_Init+0x58>)
 8000506:	2200      	movs	r2, #0
 8000508:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800050a:	4805      	ldr	r0, [pc, #20]	; (8000520 <MX_USART2_UART_Init+0x58>)
 800050c:	f002 f84e 	bl	80025ac <HAL_UART_Init>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000516:	f000 f83f 	bl	8000598 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800051a:	bf00      	nop
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	20000110 	.word	0x20000110
 8000524:	40004400 	.word	0x40004400

08000528 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800052e:	4b0f      	ldr	r3, [pc, #60]	; (800056c <MX_GPIO_Init+0x44>)
 8000530:	695b      	ldr	r3, [r3, #20]
 8000532:	4a0e      	ldr	r2, [pc, #56]	; (800056c <MX_GPIO_Init+0x44>)
 8000534:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000538:	6153      	str	r3, [r2, #20]
 800053a:	4b0c      	ldr	r3, [pc, #48]	; (800056c <MX_GPIO_Init+0x44>)
 800053c:	695b      	ldr	r3, [r3, #20]
 800053e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000546:	4b09      	ldr	r3, [pc, #36]	; (800056c <MX_GPIO_Init+0x44>)
 8000548:	695b      	ldr	r3, [r3, #20]
 800054a:	4a08      	ldr	r2, [pc, #32]	; (800056c <MX_GPIO_Init+0x44>)
 800054c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000550:	6153      	str	r3, [r2, #20]
 8000552:	4b06      	ldr	r3, [pc, #24]	; (800056c <MX_GPIO_Init+0x44>)
 8000554:	695b      	ldr	r3, [r3, #20]
 8000556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800055a:	603b      	str	r3, [r7, #0]
 800055c:	683b      	ldr	r3, [r7, #0]

}
 800055e:	bf00      	nop
 8000560:	370c      	adds	r7, #12
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	40021000 	.word	0x40021000

08000570 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	b29a      	uxth	r2, r3
 8000580:	230a      	movs	r3, #10
 8000582:	68b9      	ldr	r1, [r7, #8]
 8000584:	4803      	ldr	r0, [pc, #12]	; (8000594 <_write+0x24>)
 8000586:	f002 f8b5 	bl	80026f4 <HAL_UART_Transmit>
  return len;
 800058a:	687b      	ldr	r3, [r7, #4]
}
 800058c:	4618      	mov	r0, r3
 800058e:	3710      	adds	r7, #16
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	20000110 	.word	0x20000110

08000598 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800059c:	b672      	cpsid	i
}
 800059e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005a0:	e7fe      	b.n	80005a0 <Error_Handler+0x8>
	...

080005a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005aa:	4b0f      	ldr	r3, [pc, #60]	; (80005e8 <HAL_MspInit+0x44>)
 80005ac:	699b      	ldr	r3, [r3, #24]
 80005ae:	4a0e      	ldr	r2, [pc, #56]	; (80005e8 <HAL_MspInit+0x44>)
 80005b0:	f043 0301 	orr.w	r3, r3, #1
 80005b4:	6193      	str	r3, [r2, #24]
 80005b6:	4b0c      	ldr	r3, [pc, #48]	; (80005e8 <HAL_MspInit+0x44>)
 80005b8:	699b      	ldr	r3, [r3, #24]
 80005ba:	f003 0301 	and.w	r3, r3, #1
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c2:	4b09      	ldr	r3, [pc, #36]	; (80005e8 <HAL_MspInit+0x44>)
 80005c4:	69db      	ldr	r3, [r3, #28]
 80005c6:	4a08      	ldr	r2, [pc, #32]	; (80005e8 <HAL_MspInit+0x44>)
 80005c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005cc:	61d3      	str	r3, [r2, #28]
 80005ce:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <HAL_MspInit+0x44>)
 80005d0:	69db      	ldr	r3, [r3, #28]
 80005d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d6:	603b      	str	r3, [r7, #0]
 80005d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005da:	bf00      	nop
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	40021000 	.word	0x40021000

080005ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08c      	sub	sp, #48	; 0x30
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f4:	f107 031c 	add.w	r3, r7, #28
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a30      	ldr	r2, [pc, #192]	; (80006cc <HAL_UART_MspInit+0xe0>)
 800060a:	4293      	cmp	r3, r2
 800060c:	d12a      	bne.n	8000664 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800060e:	4b30      	ldr	r3, [pc, #192]	; (80006d0 <HAL_UART_MspInit+0xe4>)
 8000610:	699b      	ldr	r3, [r3, #24]
 8000612:	4a2f      	ldr	r2, [pc, #188]	; (80006d0 <HAL_UART_MspInit+0xe4>)
 8000614:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000618:	6193      	str	r3, [r2, #24]
 800061a:	4b2d      	ldr	r3, [pc, #180]	; (80006d0 <HAL_UART_MspInit+0xe4>)
 800061c:	699b      	ldr	r3, [r3, #24]
 800061e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000622:	61bb      	str	r3, [r7, #24]
 8000624:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000626:	4b2a      	ldr	r3, [pc, #168]	; (80006d0 <HAL_UART_MspInit+0xe4>)
 8000628:	695b      	ldr	r3, [r3, #20]
 800062a:	4a29      	ldr	r2, [pc, #164]	; (80006d0 <HAL_UART_MspInit+0xe4>)
 800062c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000630:	6153      	str	r3, [r2, #20]
 8000632:	4b27      	ldr	r3, [pc, #156]	; (80006d0 <HAL_UART_MspInit+0xe4>)
 8000634:	695b      	ldr	r3, [r3, #20]
 8000636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800063a:	617b      	str	r3, [r7, #20]
 800063c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800063e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000642:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000644:	2312      	movs	r3, #18
 8000646:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000648:	2300      	movs	r3, #0
 800064a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800064c:	2303      	movs	r3, #3
 800064e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000650:	2307      	movs	r3, #7
 8000652:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000654:	f107 031c 	add.w	r3, r7, #28
 8000658:	4619      	mov	r1, r3
 800065a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800065e:	f000 fa99 	bl	8000b94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000662:	e02e      	b.n	80006c2 <HAL_UART_MspInit+0xd6>
  else if(huart->Instance==USART2)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a1a      	ldr	r2, [pc, #104]	; (80006d4 <HAL_UART_MspInit+0xe8>)
 800066a:	4293      	cmp	r3, r2
 800066c:	d129      	bne.n	80006c2 <HAL_UART_MspInit+0xd6>
    __HAL_RCC_USART2_CLK_ENABLE();
 800066e:	4b18      	ldr	r3, [pc, #96]	; (80006d0 <HAL_UART_MspInit+0xe4>)
 8000670:	69db      	ldr	r3, [r3, #28]
 8000672:	4a17      	ldr	r2, [pc, #92]	; (80006d0 <HAL_UART_MspInit+0xe4>)
 8000674:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000678:	61d3      	str	r3, [r2, #28]
 800067a:	4b15      	ldr	r3, [pc, #84]	; (80006d0 <HAL_UART_MspInit+0xe4>)
 800067c:	69db      	ldr	r3, [r3, #28]
 800067e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000682:	613b      	str	r3, [r7, #16]
 8000684:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000686:	4b12      	ldr	r3, [pc, #72]	; (80006d0 <HAL_UART_MspInit+0xe4>)
 8000688:	695b      	ldr	r3, [r3, #20]
 800068a:	4a11      	ldr	r2, [pc, #68]	; (80006d0 <HAL_UART_MspInit+0xe4>)
 800068c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000690:	6153      	str	r3, [r2, #20]
 8000692:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <HAL_UART_MspInit+0xe4>)
 8000694:	695b      	ldr	r3, [r3, #20]
 8000696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800069e:	f248 0304 	movw	r3, #32772	; 0x8004
 80006a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a4:	2302      	movs	r3, #2
 80006a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a8:	2300      	movs	r3, #0
 80006aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006ac:	2303      	movs	r3, #3
 80006ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80006b0:	2307      	movs	r3, #7
 80006b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b4:	f107 031c 	add.w	r3, r7, #28
 80006b8:	4619      	mov	r1, r3
 80006ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006be:	f000 fa69 	bl	8000b94 <HAL_GPIO_Init>
}
 80006c2:	bf00      	nop
 80006c4:	3730      	adds	r7, #48	; 0x30
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40013800 	.word	0x40013800
 80006d0:	40021000 	.word	0x40021000
 80006d4:	40004400 	.word	0x40004400

080006d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006dc:	e7fe      	b.n	80006dc <NMI_Handler+0x4>

080006de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006de:	b480      	push	{r7}
 80006e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006e2:	e7fe      	b.n	80006e2 <HardFault_Handler+0x4>

080006e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006e8:	e7fe      	b.n	80006e8 <MemManage_Handler+0x4>

080006ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006ea:	b480      	push	{r7}
 80006ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006ee:	e7fe      	b.n	80006ee <BusFault_Handler+0x4>

080006f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006f4:	e7fe      	b.n	80006f4 <UsageFault_Handler+0x4>

080006f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006f6:	b480      	push	{r7}
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006fa:	bf00      	nop
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr

08000704 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000708:	bf00      	nop
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr

08000712 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000712:	b480      	push	{r7}
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000716:	bf00      	nop
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr

08000720 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000724:	f000 f90c 	bl	8000940 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}

0800072c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b086      	sub	sp, #24
 8000730:	af00      	add	r7, sp, #0
 8000732:	60f8      	str	r0, [r7, #12]
 8000734:	60b9      	str	r1, [r7, #8]
 8000736:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000738:	2300      	movs	r3, #0
 800073a:	617b      	str	r3, [r7, #20]
 800073c:	e00a      	b.n	8000754 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800073e:	f3af 8000 	nop.w
 8000742:	4601      	mov	r1, r0
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	1c5a      	adds	r2, r3, #1
 8000748:	60ba      	str	r2, [r7, #8]
 800074a:	b2ca      	uxtb	r2, r1
 800074c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800074e:	697b      	ldr	r3, [r7, #20]
 8000750:	3301      	adds	r3, #1
 8000752:	617b      	str	r3, [r7, #20]
 8000754:	697a      	ldr	r2, [r7, #20]
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	429a      	cmp	r2, r3
 800075a:	dbf0      	blt.n	800073e <_read+0x12>
	}

return len;
 800075c:	687b      	ldr	r3, [r7, #4]
}
 800075e:	4618      	mov	r0, r3
 8000760:	3718      	adds	r7, #24
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}

08000766 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000766:	b480      	push	{r7}
 8000768:	b083      	sub	sp, #12
 800076a:	af00      	add	r7, sp, #0
 800076c:	6078      	str	r0, [r7, #4]
	return -1;
 800076e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000772:	4618      	mov	r0, r3
 8000774:	370c      	adds	r7, #12
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr

0800077e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800077e:	b480      	push	{r7}
 8000780:	b083      	sub	sp, #12
 8000782:	af00      	add	r7, sp, #0
 8000784:	6078      	str	r0, [r7, #4]
 8000786:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800078e:	605a      	str	r2, [r3, #4]
	return 0;
 8000790:	2300      	movs	r3, #0
}
 8000792:	4618      	mov	r0, r3
 8000794:	370c      	adds	r7, #12
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr

0800079e <_isatty>:

int _isatty(int file)
{
 800079e:	b480      	push	{r7}
 80007a0:	b083      	sub	sp, #12
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	6078      	str	r0, [r7, #4]
	return 1;
 80007a6:	2301      	movs	r3, #1
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	370c      	adds	r7, #12
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr

080007b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b085      	sub	sp, #20
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	60f8      	str	r0, [r7, #12]
 80007bc:	60b9      	str	r1, [r7, #8]
 80007be:	607a      	str	r2, [r7, #4]
	return 0;
 80007c0:	2300      	movs	r3, #0
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	3714      	adds	r7, #20
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
	...

080007d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b086      	sub	sp, #24
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007d8:	4a14      	ldr	r2, [pc, #80]	; (800082c <_sbrk+0x5c>)
 80007da:	4b15      	ldr	r3, [pc, #84]	; (8000830 <_sbrk+0x60>)
 80007dc:	1ad3      	subs	r3, r2, r3
 80007de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007e4:	4b13      	ldr	r3, [pc, #76]	; (8000834 <_sbrk+0x64>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d102      	bne.n	80007f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007ec:	4b11      	ldr	r3, [pc, #68]	; (8000834 <_sbrk+0x64>)
 80007ee:	4a12      	ldr	r2, [pc, #72]	; (8000838 <_sbrk+0x68>)
 80007f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007f2:	4b10      	ldr	r3, [pc, #64]	; (8000834 <_sbrk+0x64>)
 80007f4:	681a      	ldr	r2, [r3, #0]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	4413      	add	r3, r2
 80007fa:	693a      	ldr	r2, [r7, #16]
 80007fc:	429a      	cmp	r2, r3
 80007fe:	d207      	bcs.n	8000810 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000800:	f002 fec2 	bl	8003588 <__errno>
 8000804:	4603      	mov	r3, r0
 8000806:	220c      	movs	r2, #12
 8000808:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800080a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800080e:	e009      	b.n	8000824 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000810:	4b08      	ldr	r3, [pc, #32]	; (8000834 <_sbrk+0x64>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000816:	4b07      	ldr	r3, [pc, #28]	; (8000834 <_sbrk+0x64>)
 8000818:	681a      	ldr	r2, [r3, #0]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	4413      	add	r3, r2
 800081e:	4a05      	ldr	r2, [pc, #20]	; (8000834 <_sbrk+0x64>)
 8000820:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000822:	68fb      	ldr	r3, [r7, #12]
}
 8000824:	4618      	mov	r0, r3
 8000826:	3718      	adds	r7, #24
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	20003000 	.word	0x20003000
 8000830:	00000400 	.word	0x00000400
 8000834:	20000630 	.word	0x20000630
 8000838:	20000850 	.word	0x20000850

0800083c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <SystemInit+0x20>)
 8000842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000846:	4a05      	ldr	r2, [pc, #20]	; (800085c <SystemInit+0x20>)
 8000848:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800084c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	e000ed00 	.word	0xe000ed00

08000860 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000860:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000898 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000864:	480d      	ldr	r0, [pc, #52]	; (800089c <LoopForever+0x6>)
  ldr r1, =_edata
 8000866:	490e      	ldr	r1, [pc, #56]	; (80008a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000868:	4a0e      	ldr	r2, [pc, #56]	; (80008a4 <LoopForever+0xe>)
  movs r3, #0
 800086a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800086c:	e002      	b.n	8000874 <LoopCopyDataInit>

0800086e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800086e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000870:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000872:	3304      	adds	r3, #4

08000874 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000874:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000876:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000878:	d3f9      	bcc.n	800086e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800087a:	4a0b      	ldr	r2, [pc, #44]	; (80008a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800087c:	4c0b      	ldr	r4, [pc, #44]	; (80008ac <LoopForever+0x16>)
  movs r3, #0
 800087e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000880:	e001      	b.n	8000886 <LoopFillZerobss>

08000882 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000882:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000884:	3204      	adds	r2, #4

08000886 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000886:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000888:	d3fb      	bcc.n	8000882 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800088a:	f7ff ffd7 	bl	800083c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800088e:	f002 fe81 	bl	8003594 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000892:	f7ff fd5f 	bl	8000354 <main>

08000896 <LoopForever>:

LoopForever:
    b LoopForever
 8000896:	e7fe      	b.n	8000896 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000898:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800089c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008a0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80008a4:	08004b38 	.word	0x08004b38
  ldr r2, =_sbss
 80008a8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80008ac:	2000084c 	.word	0x2000084c

080008b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008b0:	e7fe      	b.n	80008b0 <ADC1_2_IRQHandler>
	...

080008b4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008b8:	4b08      	ldr	r3, [pc, #32]	; (80008dc <HAL_Init+0x28>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a07      	ldr	r2, [pc, #28]	; (80008dc <HAL_Init+0x28>)
 80008be:	f043 0310 	orr.w	r3, r3, #16
 80008c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008c4:	2003      	movs	r0, #3
 80008c6:	f000 f931 	bl	8000b2c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008ca:	2000      	movs	r0, #0
 80008cc:	f000 f808 	bl	80008e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008d0:	f7ff fe68 	bl	80005a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008d4:	2300      	movs	r3, #0
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40022000 	.word	0x40022000

080008e0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008e8:	4b12      	ldr	r3, [pc, #72]	; (8000934 <HAL_InitTick+0x54>)
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	4b12      	ldr	r3, [pc, #72]	; (8000938 <HAL_InitTick+0x58>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	4619      	mov	r1, r3
 80008f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80008fe:	4618      	mov	r0, r3
 8000900:	f000 f93b 	bl	8000b7a <HAL_SYSTICK_Config>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800090a:	2301      	movs	r3, #1
 800090c:	e00e      	b.n	800092c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2b0f      	cmp	r3, #15
 8000912:	d80a      	bhi.n	800092a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000914:	2200      	movs	r2, #0
 8000916:	6879      	ldr	r1, [r7, #4]
 8000918:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800091c:	f000 f911 	bl	8000b42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000920:	4a06      	ldr	r2, [pc, #24]	; (800093c <HAL_InitTick+0x5c>)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000926:	2300      	movs	r3, #0
 8000928:	e000      	b.n	800092c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800092a:	2301      	movs	r3, #1
}
 800092c:	4618      	mov	r0, r3
 800092e:	3708      	adds	r7, #8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	20000000 	.word	0x20000000
 8000938:	20000008 	.word	0x20000008
 800093c:	20000004 	.word	0x20000004

08000940 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <HAL_IncTick+0x20>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	461a      	mov	r2, r3
 800094a:	4b06      	ldr	r3, [pc, #24]	; (8000964 <HAL_IncTick+0x24>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4413      	add	r3, r2
 8000950:	4a04      	ldr	r2, [pc, #16]	; (8000964 <HAL_IncTick+0x24>)
 8000952:	6013      	str	r3, [r2, #0]
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	20000008 	.word	0x20000008
 8000964:	20000634 	.word	0x20000634

08000968 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  return uwTick;  
 800096c:	4b03      	ldr	r3, [pc, #12]	; (800097c <HAL_GetTick+0x14>)
 800096e:	681b      	ldr	r3, [r3, #0]
}
 8000970:	4618      	mov	r0, r3
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	20000634 	.word	0x20000634

08000980 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000988:	f7ff ffee 	bl	8000968 <HAL_GetTick>
 800098c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000998:	d005      	beq.n	80009a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800099a:	4b0a      	ldr	r3, [pc, #40]	; (80009c4 <HAL_Delay+0x44>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	461a      	mov	r2, r3
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	4413      	add	r3, r2
 80009a4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80009a6:	bf00      	nop
 80009a8:	f7ff ffde 	bl	8000968 <HAL_GetTick>
 80009ac:	4602      	mov	r2, r0
 80009ae:	68bb      	ldr	r3, [r7, #8]
 80009b0:	1ad3      	subs	r3, r2, r3
 80009b2:	68fa      	ldr	r2, [r7, #12]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	d8f7      	bhi.n	80009a8 <HAL_Delay+0x28>
  {
  }
}
 80009b8:	bf00      	nop
 80009ba:	bf00      	nop
 80009bc:	3710      	adds	r7, #16
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000008 	.word	0x20000008

080009c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b085      	sub	sp, #20
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	f003 0307 	and.w	r3, r3, #7
 80009d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009d8:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <__NVIC_SetPriorityGrouping+0x44>)
 80009da:	68db      	ldr	r3, [r3, #12]
 80009dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009de:	68ba      	ldr	r2, [r7, #8]
 80009e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009e4:	4013      	ands	r3, r2
 80009e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009fa:	4a04      	ldr	r2, [pc, #16]	; (8000a0c <__NVIC_SetPriorityGrouping+0x44>)
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	60d3      	str	r3, [r2, #12]
}
 8000a00:	bf00      	nop
 8000a02:	3714      	adds	r7, #20
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a14:	4b04      	ldr	r3, [pc, #16]	; (8000a28 <__NVIC_GetPriorityGrouping+0x18>)
 8000a16:	68db      	ldr	r3, [r3, #12]
 8000a18:	0a1b      	lsrs	r3, r3, #8
 8000a1a:	f003 0307 	and.w	r3, r3, #7
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr
 8000a28:	e000ed00 	.word	0xe000ed00

08000a2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	6039      	str	r1, [r7, #0]
 8000a36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	db0a      	blt.n	8000a56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	b2da      	uxtb	r2, r3
 8000a44:	490c      	ldr	r1, [pc, #48]	; (8000a78 <__NVIC_SetPriority+0x4c>)
 8000a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4a:	0112      	lsls	r2, r2, #4
 8000a4c:	b2d2      	uxtb	r2, r2
 8000a4e:	440b      	add	r3, r1
 8000a50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a54:	e00a      	b.n	8000a6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	b2da      	uxtb	r2, r3
 8000a5a:	4908      	ldr	r1, [pc, #32]	; (8000a7c <__NVIC_SetPriority+0x50>)
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
 8000a5e:	f003 030f 	and.w	r3, r3, #15
 8000a62:	3b04      	subs	r3, #4
 8000a64:	0112      	lsls	r2, r2, #4
 8000a66:	b2d2      	uxtb	r2, r2
 8000a68:	440b      	add	r3, r1
 8000a6a:	761a      	strb	r2, [r3, #24]
}
 8000a6c:	bf00      	nop
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr
 8000a78:	e000e100 	.word	0xe000e100
 8000a7c:	e000ed00 	.word	0xe000ed00

08000a80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b089      	sub	sp, #36	; 0x24
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	60f8      	str	r0, [r7, #12]
 8000a88:	60b9      	str	r1, [r7, #8]
 8000a8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	f003 0307 	and.w	r3, r3, #7
 8000a92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a94:	69fb      	ldr	r3, [r7, #28]
 8000a96:	f1c3 0307 	rsb	r3, r3, #7
 8000a9a:	2b04      	cmp	r3, #4
 8000a9c:	bf28      	it	cs
 8000a9e:	2304      	movcs	r3, #4
 8000aa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aa2:	69fb      	ldr	r3, [r7, #28]
 8000aa4:	3304      	adds	r3, #4
 8000aa6:	2b06      	cmp	r3, #6
 8000aa8:	d902      	bls.n	8000ab0 <NVIC_EncodePriority+0x30>
 8000aaa:	69fb      	ldr	r3, [r7, #28]
 8000aac:	3b03      	subs	r3, #3
 8000aae:	e000      	b.n	8000ab2 <NVIC_EncodePriority+0x32>
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ab8:	69bb      	ldr	r3, [r7, #24]
 8000aba:	fa02 f303 	lsl.w	r3, r2, r3
 8000abe:	43da      	mvns	r2, r3
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	401a      	ands	r2, r3
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ac8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad2:	43d9      	mvns	r1, r3
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad8:	4313      	orrs	r3, r2
         );
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3724      	adds	r7, #36	; 0x24
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
	...

08000ae8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	3b01      	subs	r3, #1
 8000af4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000af8:	d301      	bcc.n	8000afe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000afa:	2301      	movs	r3, #1
 8000afc:	e00f      	b.n	8000b1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000afe:	4a0a      	ldr	r2, [pc, #40]	; (8000b28 <SysTick_Config+0x40>)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	3b01      	subs	r3, #1
 8000b04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b06:	210f      	movs	r1, #15
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b0c:	f7ff ff8e 	bl	8000a2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b10:	4b05      	ldr	r3, [pc, #20]	; (8000b28 <SysTick_Config+0x40>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b16:	4b04      	ldr	r3, [pc, #16]	; (8000b28 <SysTick_Config+0x40>)
 8000b18:	2207      	movs	r2, #7
 8000b1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b1c:	2300      	movs	r3, #0
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	e000e010 	.word	0xe000e010

08000b2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b34:	6878      	ldr	r0, [r7, #4]
 8000b36:	f7ff ff47 	bl	80009c8 <__NVIC_SetPriorityGrouping>
}
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	b086      	sub	sp, #24
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	4603      	mov	r3, r0
 8000b4a:	60b9      	str	r1, [r7, #8]
 8000b4c:	607a      	str	r2, [r7, #4]
 8000b4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b50:	2300      	movs	r3, #0
 8000b52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b54:	f7ff ff5c 	bl	8000a10 <__NVIC_GetPriorityGrouping>
 8000b58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b5a:	687a      	ldr	r2, [r7, #4]
 8000b5c:	68b9      	ldr	r1, [r7, #8]
 8000b5e:	6978      	ldr	r0, [r7, #20]
 8000b60:	f7ff ff8e 	bl	8000a80 <NVIC_EncodePriority>
 8000b64:	4602      	mov	r2, r0
 8000b66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b6a:	4611      	mov	r1, r2
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f7ff ff5d 	bl	8000a2c <__NVIC_SetPriority>
}
 8000b72:	bf00      	nop
 8000b74:	3718      	adds	r7, #24
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b082      	sub	sp, #8
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b82:	6878      	ldr	r0, [r7, #4]
 8000b84:	f7ff ffb0 	bl	8000ae8 <SysTick_Config>
 8000b88:	4603      	mov	r3, r0
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
	...

08000b94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b087      	sub	sp, #28
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ba2:	e14e      	b.n	8000e42 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	2101      	movs	r1, #1
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	f000 8140 	beq.w	8000e3c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	f003 0303 	and.w	r3, r3, #3
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d005      	beq.n	8000bd4 <HAL_GPIO_Init+0x40>
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	f003 0303 	and.w	r3, r3, #3
 8000bd0:	2b02      	cmp	r3, #2
 8000bd2:	d130      	bne.n	8000c36 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	689b      	ldr	r3, [r3, #8]
 8000bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	005b      	lsls	r3, r3, #1
 8000bde:	2203      	movs	r2, #3
 8000be0:	fa02 f303 	lsl.w	r3, r2, r3
 8000be4:	43db      	mvns	r3, r3
 8000be6:	693a      	ldr	r2, [r7, #16]
 8000be8:	4013      	ands	r3, r2
 8000bea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	68da      	ldr	r2, [r3, #12]
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	005b      	lsls	r3, r3, #1
 8000bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf8:	693a      	ldr	r2, [r7, #16]
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	693a      	ldr	r2, [r7, #16]
 8000c02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c12:	43db      	mvns	r3, r3
 8000c14:	693a      	ldr	r2, [r7, #16]
 8000c16:	4013      	ands	r3, r2
 8000c18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	091b      	lsrs	r3, r3, #4
 8000c20:	f003 0201 	and.w	r2, r3, #1
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	f003 0303 	and.w	r3, r3, #3
 8000c3e:	2b03      	cmp	r3, #3
 8000c40:	d017      	beq.n	8000c72 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	68db      	ldr	r3, [r3, #12]
 8000c46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	005b      	lsls	r3, r3, #1
 8000c4c:	2203      	movs	r2, #3
 8000c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c52:	43db      	mvns	r3, r3
 8000c54:	693a      	ldr	r2, [r7, #16]
 8000c56:	4013      	ands	r3, r2
 8000c58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	689a      	ldr	r2, [r3, #8]
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	fa02 f303 	lsl.w	r3, r2, r3
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	f003 0303 	and.w	r3, r3, #3
 8000c7a:	2b02      	cmp	r3, #2
 8000c7c:	d123      	bne.n	8000cc6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	08da      	lsrs	r2, r3, #3
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	3208      	adds	r2, #8
 8000c86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	f003 0307 	and.w	r3, r3, #7
 8000c92:	009b      	lsls	r3, r3, #2
 8000c94:	220f      	movs	r2, #15
 8000c96:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9a:	43db      	mvns	r3, r3
 8000c9c:	693a      	ldr	r2, [r7, #16]
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	691a      	ldr	r2, [r3, #16]
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	f003 0307 	and.w	r3, r3, #7
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	08da      	lsrs	r2, r3, #3
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	3208      	adds	r2, #8
 8000cc0:	6939      	ldr	r1, [r7, #16]
 8000cc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	005b      	lsls	r3, r3, #1
 8000cd0:	2203      	movs	r2, #3
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	43db      	mvns	r3, r3
 8000cd8:	693a      	ldr	r2, [r7, #16]
 8000cda:	4013      	ands	r3, r2
 8000cdc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	f003 0203 	and.w	r2, r3, #3
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	fa02 f303 	lsl.w	r3, r2, r3
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f000 809a 	beq.w	8000e3c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d08:	4b55      	ldr	r3, [pc, #340]	; (8000e60 <HAL_GPIO_Init+0x2cc>)
 8000d0a:	699b      	ldr	r3, [r3, #24]
 8000d0c:	4a54      	ldr	r2, [pc, #336]	; (8000e60 <HAL_GPIO_Init+0x2cc>)
 8000d0e:	f043 0301 	orr.w	r3, r3, #1
 8000d12:	6193      	str	r3, [r2, #24]
 8000d14:	4b52      	ldr	r3, [pc, #328]	; (8000e60 <HAL_GPIO_Init+0x2cc>)
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	f003 0301 	and.w	r3, r3, #1
 8000d1c:	60bb      	str	r3, [r7, #8]
 8000d1e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d20:	4a50      	ldr	r2, [pc, #320]	; (8000e64 <HAL_GPIO_Init+0x2d0>)
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	089b      	lsrs	r3, r3, #2
 8000d26:	3302      	adds	r3, #2
 8000d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	f003 0303 	and.w	r3, r3, #3
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	220f      	movs	r2, #15
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	43db      	mvns	r3, r3
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	4013      	ands	r3, r2
 8000d42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d4a:	d013      	beq.n	8000d74 <HAL_GPIO_Init+0x1e0>
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4a46      	ldr	r2, [pc, #280]	; (8000e68 <HAL_GPIO_Init+0x2d4>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d00d      	beq.n	8000d70 <HAL_GPIO_Init+0x1dc>
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4a45      	ldr	r2, [pc, #276]	; (8000e6c <HAL_GPIO_Init+0x2d8>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d007      	beq.n	8000d6c <HAL_GPIO_Init+0x1d8>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	4a44      	ldr	r2, [pc, #272]	; (8000e70 <HAL_GPIO_Init+0x2dc>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d101      	bne.n	8000d68 <HAL_GPIO_Init+0x1d4>
 8000d64:	2303      	movs	r3, #3
 8000d66:	e006      	b.n	8000d76 <HAL_GPIO_Init+0x1e2>
 8000d68:	2305      	movs	r3, #5
 8000d6a:	e004      	b.n	8000d76 <HAL_GPIO_Init+0x1e2>
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	e002      	b.n	8000d76 <HAL_GPIO_Init+0x1e2>
 8000d70:	2301      	movs	r3, #1
 8000d72:	e000      	b.n	8000d76 <HAL_GPIO_Init+0x1e2>
 8000d74:	2300      	movs	r3, #0
 8000d76:	697a      	ldr	r2, [r7, #20]
 8000d78:	f002 0203 	and.w	r2, r2, #3
 8000d7c:	0092      	lsls	r2, r2, #2
 8000d7e:	4093      	lsls	r3, r2
 8000d80:	693a      	ldr	r2, [r7, #16]
 8000d82:	4313      	orrs	r3, r2
 8000d84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d86:	4937      	ldr	r1, [pc, #220]	; (8000e64 <HAL_GPIO_Init+0x2d0>)
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	089b      	lsrs	r3, r3, #2
 8000d8c:	3302      	adds	r3, #2
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d94:	4b37      	ldr	r3, [pc, #220]	; (8000e74 <HAL_GPIO_Init+0x2e0>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	4013      	ands	r3, r2
 8000da2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d003      	beq.n	8000db8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000db8:	4a2e      	ldr	r2, [pc, #184]	; (8000e74 <HAL_GPIO_Init+0x2e0>)
 8000dba:	693b      	ldr	r3, [r7, #16]
 8000dbc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000dbe:	4b2d      	ldr	r3, [pc, #180]	; (8000e74 <HAL_GPIO_Init+0x2e0>)
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	43db      	mvns	r3, r3
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	4013      	ands	r3, r2
 8000dcc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d003      	beq.n	8000de2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000de2:	4a24      	ldr	r2, [pc, #144]	; (8000e74 <HAL_GPIO_Init+0x2e0>)
 8000de4:	693b      	ldr	r3, [r7, #16]
 8000de6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000de8:	4b22      	ldr	r3, [pc, #136]	; (8000e74 <HAL_GPIO_Init+0x2e0>)
 8000dea:	689b      	ldr	r3, [r3, #8]
 8000dec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	43db      	mvns	r3, r3
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	4013      	ands	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d003      	beq.n	8000e0c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e0c:	4a19      	ldr	r2, [pc, #100]	; (8000e74 <HAL_GPIO_Init+0x2e0>)
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e12:	4b18      	ldr	r3, [pc, #96]	; (8000e74 <HAL_GPIO_Init+0x2e0>)
 8000e14:	68db      	ldr	r3, [r3, #12]
 8000e16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	43db      	mvns	r3, r3
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d003      	beq.n	8000e36 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e36:	4a0f      	ldr	r2, [pc, #60]	; (8000e74 <HAL_GPIO_Init+0x2e0>)
 8000e38:	693b      	ldr	r3, [r7, #16]
 8000e3a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	3301      	adds	r3, #1
 8000e40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	fa22 f303 	lsr.w	r3, r2, r3
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	f47f aea9 	bne.w	8000ba4 <HAL_GPIO_Init+0x10>
  }
}
 8000e52:	bf00      	nop
 8000e54:	bf00      	nop
 8000e56:	371c      	adds	r7, #28
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	40021000 	.word	0x40021000
 8000e64:	40010000 	.word	0x40010000
 8000e68:	48000400 	.word	0x48000400
 8000e6c:	48000800 	.word	0x48000800
 8000e70:	48000c00 	.word	0x48000c00
 8000e74:	40010400 	.word	0x40010400

08000e78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e84:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e88:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d102      	bne.n	8000e9e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	f001 b823 	b.w	8001ee4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ea2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	f000 817d 	beq.w	80011ae <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000eb4:	4bbc      	ldr	r3, [pc, #752]	; (80011a8 <HAL_RCC_OscConfig+0x330>)
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f003 030c 	and.w	r3, r3, #12
 8000ebc:	2b04      	cmp	r3, #4
 8000ebe:	d00c      	beq.n	8000eda <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ec0:	4bb9      	ldr	r3, [pc, #740]	; (80011a8 <HAL_RCC_OscConfig+0x330>)
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f003 030c 	and.w	r3, r3, #12
 8000ec8:	2b08      	cmp	r3, #8
 8000eca:	d15c      	bne.n	8000f86 <HAL_RCC_OscConfig+0x10e>
 8000ecc:	4bb6      	ldr	r3, [pc, #728]	; (80011a8 <HAL_RCC_OscConfig+0x330>)
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ed4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ed8:	d155      	bne.n	8000f86 <HAL_RCC_OscConfig+0x10e>
 8000eda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ede:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ee2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000ee6:	fa93 f3a3 	rbit	r3, r3
 8000eea:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000eee:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ef2:	fab3 f383 	clz	r3, r3
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	095b      	lsrs	r3, r3, #5
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	f043 0301 	orr.w	r3, r3, #1
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d102      	bne.n	8000f0c <HAL_RCC_OscConfig+0x94>
 8000f06:	4ba8      	ldr	r3, [pc, #672]	; (80011a8 <HAL_RCC_OscConfig+0x330>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	e015      	b.n	8000f38 <HAL_RCC_OscConfig+0xc0>
 8000f0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f10:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f14:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000f18:	fa93 f3a3 	rbit	r3, r3
 8000f1c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000f20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f24:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000f28:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000f2c:	fa93 f3a3 	rbit	r3, r3
 8000f30:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000f34:	4b9c      	ldr	r3, [pc, #624]	; (80011a8 <HAL_RCC_OscConfig+0x330>)
 8000f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f38:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f3c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000f40:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000f44:	fa92 f2a2 	rbit	r2, r2
 8000f48:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000f4c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000f50:	fab2 f282 	clz	r2, r2
 8000f54:	b2d2      	uxtb	r2, r2
 8000f56:	f042 0220 	orr.w	r2, r2, #32
 8000f5a:	b2d2      	uxtb	r2, r2
 8000f5c:	f002 021f 	and.w	r2, r2, #31
 8000f60:	2101      	movs	r1, #1
 8000f62:	fa01 f202 	lsl.w	r2, r1, r2
 8000f66:	4013      	ands	r3, r2
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	f000 811f 	beq.w	80011ac <HAL_RCC_OscConfig+0x334>
 8000f6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	f040 8116 	bne.w	80011ac <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000f80:	2301      	movs	r3, #1
 8000f82:	f000 bfaf 	b.w	8001ee4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f8a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f96:	d106      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x12e>
 8000f98:	4b83      	ldr	r3, [pc, #524]	; (80011a8 <HAL_RCC_OscConfig+0x330>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a82      	ldr	r2, [pc, #520]	; (80011a8 <HAL_RCC_OscConfig+0x330>)
 8000f9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fa2:	6013      	str	r3, [r2, #0]
 8000fa4:	e036      	b.n	8001014 <HAL_RCC_OscConfig+0x19c>
 8000fa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000faa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d10c      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x158>
 8000fb6:	4b7c      	ldr	r3, [pc, #496]	; (80011a8 <HAL_RCC_OscConfig+0x330>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a7b      	ldr	r2, [pc, #492]	; (80011a8 <HAL_RCC_OscConfig+0x330>)
 8000fbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fc0:	6013      	str	r3, [r2, #0]
 8000fc2:	4b79      	ldr	r3, [pc, #484]	; (80011a8 <HAL_RCC_OscConfig+0x330>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a78      	ldr	r2, [pc, #480]	; (80011a8 <HAL_RCC_OscConfig+0x330>)
 8000fc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fcc:	6013      	str	r3, [r2, #0]
 8000fce:	e021      	b.n	8001014 <HAL_RCC_OscConfig+0x19c>
 8000fd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fd4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fe0:	d10c      	bne.n	8000ffc <HAL_RCC_OscConfig+0x184>
 8000fe2:	4b71      	ldr	r3, [pc, #452]	; (80011a8 <HAL_RCC_OscConfig+0x330>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a70      	ldr	r2, [pc, #448]	; (80011a8 <HAL_RCC_OscConfig+0x330>)
 8000fe8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fec:	6013      	str	r3, [r2, #0]
 8000fee:	4b6e      	ldr	r3, [pc, #440]	; (80011a8 <HAL_RCC_OscConfig+0x330>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a6d      	ldr	r2, [pc, #436]	; (80011a8 <HAL_RCC_OscConfig+0x330>)
 8000ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ff8:	6013      	str	r3, [r2, #0]
 8000ffa:	e00b      	b.n	8001014 <HAL_RCC_OscConfig+0x19c>
 8000ffc:	4b6a      	ldr	r3, [pc, #424]	; (80011a8 <HAL_RCC_OscConfig+0x330>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a69      	ldr	r2, [pc, #420]	; (80011a8 <HAL_RCC_OscConfig+0x330>)
 8001002:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001006:	6013      	str	r3, [r2, #0]
 8001008:	4b67      	ldr	r3, [pc, #412]	; (80011a8 <HAL_RCC_OscConfig+0x330>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a66      	ldr	r2, [pc, #408]	; (80011a8 <HAL_RCC_OscConfig+0x330>)
 800100e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001012:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001014:	4b64      	ldr	r3, [pc, #400]	; (80011a8 <HAL_RCC_OscConfig+0x330>)
 8001016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001018:	f023 020f 	bic.w	r2, r3, #15
 800101c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001020:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	495f      	ldr	r1, [pc, #380]	; (80011a8 <HAL_RCC_OscConfig+0x330>)
 800102a:	4313      	orrs	r3, r2
 800102c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800102e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001032:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d059      	beq.n	80010f2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800103e:	f7ff fc93 	bl	8000968 <HAL_GetTick>
 8001042:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001046:	e00a      	b.n	800105e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001048:	f7ff fc8e 	bl	8000968 <HAL_GetTick>
 800104c:	4602      	mov	r2, r0
 800104e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	2b64      	cmp	r3, #100	; 0x64
 8001056:	d902      	bls.n	800105e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001058:	2303      	movs	r3, #3
 800105a:	f000 bf43 	b.w	8001ee4 <HAL_RCC_OscConfig+0x106c>
 800105e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001062:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001066:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800106a:	fa93 f3a3 	rbit	r3, r3
 800106e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001072:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001076:	fab3 f383 	clz	r3, r3
 800107a:	b2db      	uxtb	r3, r3
 800107c:	095b      	lsrs	r3, r3, #5
 800107e:	b2db      	uxtb	r3, r3
 8001080:	f043 0301 	orr.w	r3, r3, #1
 8001084:	b2db      	uxtb	r3, r3
 8001086:	2b01      	cmp	r3, #1
 8001088:	d102      	bne.n	8001090 <HAL_RCC_OscConfig+0x218>
 800108a:	4b47      	ldr	r3, [pc, #284]	; (80011a8 <HAL_RCC_OscConfig+0x330>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	e015      	b.n	80010bc <HAL_RCC_OscConfig+0x244>
 8001090:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001094:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001098:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800109c:	fa93 f3a3 	rbit	r3, r3
 80010a0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80010a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010a8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80010ac:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80010b0:	fa93 f3a3 	rbit	r3, r3
 80010b4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80010b8:	4b3b      	ldr	r3, [pc, #236]	; (80011a8 <HAL_RCC_OscConfig+0x330>)
 80010ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010bc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010c0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80010c4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80010c8:	fa92 f2a2 	rbit	r2, r2
 80010cc:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80010d0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80010d4:	fab2 f282 	clz	r2, r2
 80010d8:	b2d2      	uxtb	r2, r2
 80010da:	f042 0220 	orr.w	r2, r2, #32
 80010de:	b2d2      	uxtb	r2, r2
 80010e0:	f002 021f 	and.w	r2, r2, #31
 80010e4:	2101      	movs	r1, #1
 80010e6:	fa01 f202 	lsl.w	r2, r1, r2
 80010ea:	4013      	ands	r3, r2
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d0ab      	beq.n	8001048 <HAL_RCC_OscConfig+0x1d0>
 80010f0:	e05d      	b.n	80011ae <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f2:	f7ff fc39 	bl	8000968 <HAL_GetTick>
 80010f6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010fa:	e00a      	b.n	8001112 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010fc:	f7ff fc34 	bl	8000968 <HAL_GetTick>
 8001100:	4602      	mov	r2, r0
 8001102:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	2b64      	cmp	r3, #100	; 0x64
 800110a:	d902      	bls.n	8001112 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800110c:	2303      	movs	r3, #3
 800110e:	f000 bee9 	b.w	8001ee4 <HAL_RCC_OscConfig+0x106c>
 8001112:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001116:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800111a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800111e:	fa93 f3a3 	rbit	r3, r3
 8001122:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001126:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800112a:	fab3 f383 	clz	r3, r3
 800112e:	b2db      	uxtb	r3, r3
 8001130:	095b      	lsrs	r3, r3, #5
 8001132:	b2db      	uxtb	r3, r3
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	b2db      	uxtb	r3, r3
 800113a:	2b01      	cmp	r3, #1
 800113c:	d102      	bne.n	8001144 <HAL_RCC_OscConfig+0x2cc>
 800113e:	4b1a      	ldr	r3, [pc, #104]	; (80011a8 <HAL_RCC_OscConfig+0x330>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	e015      	b.n	8001170 <HAL_RCC_OscConfig+0x2f8>
 8001144:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001148:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800114c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001150:	fa93 f3a3 	rbit	r3, r3
 8001154:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001158:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800115c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001160:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001164:	fa93 f3a3 	rbit	r3, r3
 8001168:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800116c:	4b0e      	ldr	r3, [pc, #56]	; (80011a8 <HAL_RCC_OscConfig+0x330>)
 800116e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001170:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001174:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001178:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800117c:	fa92 f2a2 	rbit	r2, r2
 8001180:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001184:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001188:	fab2 f282 	clz	r2, r2
 800118c:	b2d2      	uxtb	r2, r2
 800118e:	f042 0220 	orr.w	r2, r2, #32
 8001192:	b2d2      	uxtb	r2, r2
 8001194:	f002 021f 	and.w	r2, r2, #31
 8001198:	2101      	movs	r1, #1
 800119a:	fa01 f202 	lsl.w	r2, r1, r2
 800119e:	4013      	ands	r3, r2
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d1ab      	bne.n	80010fc <HAL_RCC_OscConfig+0x284>
 80011a4:	e003      	b.n	80011ae <HAL_RCC_OscConfig+0x336>
 80011a6:	bf00      	nop
 80011a8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	2b00      	cmp	r3, #0
 80011c0:	f000 817d 	beq.w	80014be <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80011c4:	4ba6      	ldr	r3, [pc, #664]	; (8001460 <HAL_RCC_OscConfig+0x5e8>)
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f003 030c 	and.w	r3, r3, #12
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d00b      	beq.n	80011e8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80011d0:	4ba3      	ldr	r3, [pc, #652]	; (8001460 <HAL_RCC_OscConfig+0x5e8>)
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f003 030c 	and.w	r3, r3, #12
 80011d8:	2b08      	cmp	r3, #8
 80011da:	d172      	bne.n	80012c2 <HAL_RCC_OscConfig+0x44a>
 80011dc:	4ba0      	ldr	r3, [pc, #640]	; (8001460 <HAL_RCC_OscConfig+0x5e8>)
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d16c      	bne.n	80012c2 <HAL_RCC_OscConfig+0x44a>
 80011e8:	2302      	movs	r3, #2
 80011ea:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ee:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80011f2:	fa93 f3a3 	rbit	r3, r3
 80011f6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80011fa:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011fe:	fab3 f383 	clz	r3, r3
 8001202:	b2db      	uxtb	r3, r3
 8001204:	095b      	lsrs	r3, r3, #5
 8001206:	b2db      	uxtb	r3, r3
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	b2db      	uxtb	r3, r3
 800120e:	2b01      	cmp	r3, #1
 8001210:	d102      	bne.n	8001218 <HAL_RCC_OscConfig+0x3a0>
 8001212:	4b93      	ldr	r3, [pc, #588]	; (8001460 <HAL_RCC_OscConfig+0x5e8>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	e013      	b.n	8001240 <HAL_RCC_OscConfig+0x3c8>
 8001218:	2302      	movs	r3, #2
 800121a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800121e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001222:	fa93 f3a3 	rbit	r3, r3
 8001226:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800122a:	2302      	movs	r3, #2
 800122c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001230:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001234:	fa93 f3a3 	rbit	r3, r3
 8001238:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800123c:	4b88      	ldr	r3, [pc, #544]	; (8001460 <HAL_RCC_OscConfig+0x5e8>)
 800123e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001240:	2202      	movs	r2, #2
 8001242:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001246:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800124a:	fa92 f2a2 	rbit	r2, r2
 800124e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001252:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001256:	fab2 f282 	clz	r2, r2
 800125a:	b2d2      	uxtb	r2, r2
 800125c:	f042 0220 	orr.w	r2, r2, #32
 8001260:	b2d2      	uxtb	r2, r2
 8001262:	f002 021f 	and.w	r2, r2, #31
 8001266:	2101      	movs	r1, #1
 8001268:	fa01 f202 	lsl.w	r2, r1, r2
 800126c:	4013      	ands	r3, r2
 800126e:	2b00      	cmp	r3, #0
 8001270:	d00a      	beq.n	8001288 <HAL_RCC_OscConfig+0x410>
 8001272:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001276:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	691b      	ldr	r3, [r3, #16]
 800127e:	2b01      	cmp	r3, #1
 8001280:	d002      	beq.n	8001288 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	f000 be2e 	b.w	8001ee4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001288:	4b75      	ldr	r3, [pc, #468]	; (8001460 <HAL_RCC_OscConfig+0x5e8>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001290:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001294:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	695b      	ldr	r3, [r3, #20]
 800129c:	21f8      	movs	r1, #248	; 0xf8
 800129e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012a2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80012a6:	fa91 f1a1 	rbit	r1, r1
 80012aa:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80012ae:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80012b2:	fab1 f181 	clz	r1, r1
 80012b6:	b2c9      	uxtb	r1, r1
 80012b8:	408b      	lsls	r3, r1
 80012ba:	4969      	ldr	r1, [pc, #420]	; (8001460 <HAL_RCC_OscConfig+0x5e8>)
 80012bc:	4313      	orrs	r3, r2
 80012be:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012c0:	e0fd      	b.n	80014be <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	691b      	ldr	r3, [r3, #16]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	f000 8088 	beq.w	80013e4 <HAL_RCC_OscConfig+0x56c>
 80012d4:	2301      	movs	r3, #1
 80012d6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012da:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80012de:	fa93 f3a3 	rbit	r3, r3
 80012e2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80012e6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012ea:	fab3 f383 	clz	r3, r3
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80012f4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	461a      	mov	r2, r3
 80012fc:	2301      	movs	r3, #1
 80012fe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001300:	f7ff fb32 	bl	8000968 <HAL_GetTick>
 8001304:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001308:	e00a      	b.n	8001320 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800130a:	f7ff fb2d 	bl	8000968 <HAL_GetTick>
 800130e:	4602      	mov	r2, r0
 8001310:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	2b02      	cmp	r3, #2
 8001318:	d902      	bls.n	8001320 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	f000 bde2 	b.w	8001ee4 <HAL_RCC_OscConfig+0x106c>
 8001320:	2302      	movs	r3, #2
 8001322:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001326:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800132a:	fa93 f3a3 	rbit	r3, r3
 800132e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001332:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001336:	fab3 f383 	clz	r3, r3
 800133a:	b2db      	uxtb	r3, r3
 800133c:	095b      	lsrs	r3, r3, #5
 800133e:	b2db      	uxtb	r3, r3
 8001340:	f043 0301 	orr.w	r3, r3, #1
 8001344:	b2db      	uxtb	r3, r3
 8001346:	2b01      	cmp	r3, #1
 8001348:	d102      	bne.n	8001350 <HAL_RCC_OscConfig+0x4d8>
 800134a:	4b45      	ldr	r3, [pc, #276]	; (8001460 <HAL_RCC_OscConfig+0x5e8>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	e013      	b.n	8001378 <HAL_RCC_OscConfig+0x500>
 8001350:	2302      	movs	r3, #2
 8001352:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001356:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800135a:	fa93 f3a3 	rbit	r3, r3
 800135e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001362:	2302      	movs	r3, #2
 8001364:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001368:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800136c:	fa93 f3a3 	rbit	r3, r3
 8001370:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001374:	4b3a      	ldr	r3, [pc, #232]	; (8001460 <HAL_RCC_OscConfig+0x5e8>)
 8001376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001378:	2202      	movs	r2, #2
 800137a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800137e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001382:	fa92 f2a2 	rbit	r2, r2
 8001386:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800138a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800138e:	fab2 f282 	clz	r2, r2
 8001392:	b2d2      	uxtb	r2, r2
 8001394:	f042 0220 	orr.w	r2, r2, #32
 8001398:	b2d2      	uxtb	r2, r2
 800139a:	f002 021f 	and.w	r2, r2, #31
 800139e:	2101      	movs	r1, #1
 80013a0:	fa01 f202 	lsl.w	r2, r1, r2
 80013a4:	4013      	ands	r3, r2
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d0af      	beq.n	800130a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013aa:	4b2d      	ldr	r3, [pc, #180]	; (8001460 <HAL_RCC_OscConfig+0x5e8>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	695b      	ldr	r3, [r3, #20]
 80013be:	21f8      	movs	r1, #248	; 0xf8
 80013c0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013c4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80013c8:	fa91 f1a1 	rbit	r1, r1
 80013cc:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80013d0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80013d4:	fab1 f181 	clz	r1, r1
 80013d8:	b2c9      	uxtb	r1, r1
 80013da:	408b      	lsls	r3, r1
 80013dc:	4920      	ldr	r1, [pc, #128]	; (8001460 <HAL_RCC_OscConfig+0x5e8>)
 80013de:	4313      	orrs	r3, r2
 80013e0:	600b      	str	r3, [r1, #0]
 80013e2:	e06c      	b.n	80014be <HAL_RCC_OscConfig+0x646>
 80013e4:	2301      	movs	r3, #1
 80013e6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ea:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80013ee:	fa93 f3a3 	rbit	r3, r3
 80013f2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80013f6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013fa:	fab3 f383 	clz	r3, r3
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001404:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	461a      	mov	r2, r3
 800140c:	2300      	movs	r3, #0
 800140e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001410:	f7ff faaa 	bl	8000968 <HAL_GetTick>
 8001414:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001418:	e00a      	b.n	8001430 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800141a:	f7ff faa5 	bl	8000968 <HAL_GetTick>
 800141e:	4602      	mov	r2, r0
 8001420:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b02      	cmp	r3, #2
 8001428:	d902      	bls.n	8001430 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	f000 bd5a 	b.w	8001ee4 <HAL_RCC_OscConfig+0x106c>
 8001430:	2302      	movs	r3, #2
 8001432:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001436:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800143a:	fa93 f3a3 	rbit	r3, r3
 800143e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001442:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001446:	fab3 f383 	clz	r3, r3
 800144a:	b2db      	uxtb	r3, r3
 800144c:	095b      	lsrs	r3, r3, #5
 800144e:	b2db      	uxtb	r3, r3
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	b2db      	uxtb	r3, r3
 8001456:	2b01      	cmp	r3, #1
 8001458:	d104      	bne.n	8001464 <HAL_RCC_OscConfig+0x5ec>
 800145a:	4b01      	ldr	r3, [pc, #4]	; (8001460 <HAL_RCC_OscConfig+0x5e8>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	e015      	b.n	800148c <HAL_RCC_OscConfig+0x614>
 8001460:	40021000 	.word	0x40021000
 8001464:	2302      	movs	r3, #2
 8001466:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800146a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800146e:	fa93 f3a3 	rbit	r3, r3
 8001472:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001476:	2302      	movs	r3, #2
 8001478:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800147c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001480:	fa93 f3a3 	rbit	r3, r3
 8001484:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001488:	4bc8      	ldr	r3, [pc, #800]	; (80017ac <HAL_RCC_OscConfig+0x934>)
 800148a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148c:	2202      	movs	r2, #2
 800148e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001492:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001496:	fa92 f2a2 	rbit	r2, r2
 800149a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800149e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80014a2:	fab2 f282 	clz	r2, r2
 80014a6:	b2d2      	uxtb	r2, r2
 80014a8:	f042 0220 	orr.w	r2, r2, #32
 80014ac:	b2d2      	uxtb	r2, r2
 80014ae:	f002 021f 	and.w	r2, r2, #31
 80014b2:	2101      	movs	r1, #1
 80014b4:	fa01 f202 	lsl.w	r2, r1, r2
 80014b8:	4013      	ands	r3, r2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d1ad      	bne.n	800141a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0308 	and.w	r3, r3, #8
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	f000 8110 	beq.w	80016f4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d079      	beq.n	80015d8 <HAL_RCC_OscConfig+0x760>
 80014e4:	2301      	movs	r3, #1
 80014e6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ea:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80014ee:	fa93 f3a3 	rbit	r3, r3
 80014f2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80014f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014fa:	fab3 f383 	clz	r3, r3
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	461a      	mov	r2, r3
 8001502:	4bab      	ldr	r3, [pc, #684]	; (80017b0 <HAL_RCC_OscConfig+0x938>)
 8001504:	4413      	add	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	461a      	mov	r2, r3
 800150a:	2301      	movs	r3, #1
 800150c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800150e:	f7ff fa2b 	bl	8000968 <HAL_GetTick>
 8001512:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001516:	e00a      	b.n	800152e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001518:	f7ff fa26 	bl	8000968 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2b02      	cmp	r3, #2
 8001526:	d902      	bls.n	800152e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	f000 bcdb 	b.w	8001ee4 <HAL_RCC_OscConfig+0x106c>
 800152e:	2302      	movs	r3, #2
 8001530:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001534:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001538:	fa93 f3a3 	rbit	r3, r3
 800153c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001540:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001544:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001548:	2202      	movs	r2, #2
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001550:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	fa93 f2a3 	rbit	r2, r3
 800155a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800155e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001568:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800156c:	2202      	movs	r2, #2
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001574:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	fa93 f2a3 	rbit	r2, r3
 800157e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001582:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001586:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001588:	4b88      	ldr	r3, [pc, #544]	; (80017ac <HAL_RCC_OscConfig+0x934>)
 800158a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800158c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001590:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001594:	2102      	movs	r1, #2
 8001596:	6019      	str	r1, [r3, #0]
 8001598:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800159c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	fa93 f1a3 	rbit	r1, r3
 80015a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015aa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80015ae:	6019      	str	r1, [r3, #0]
  return result;
 80015b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015b4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	fab3 f383 	clz	r3, r3
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	f003 031f 	and.w	r3, r3, #31
 80015ca:	2101      	movs	r1, #1
 80015cc:	fa01 f303 	lsl.w	r3, r1, r3
 80015d0:	4013      	ands	r3, r2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d0a0      	beq.n	8001518 <HAL_RCC_OscConfig+0x6a0>
 80015d6:	e08d      	b.n	80016f4 <HAL_RCC_OscConfig+0x87c>
 80015d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015dc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80015e0:	2201      	movs	r2, #1
 80015e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015e8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	fa93 f2a3 	rbit	r2, r3
 80015f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015f6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80015fa:	601a      	str	r2, [r3, #0]
  return result;
 80015fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001600:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001604:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001606:	fab3 f383 	clz	r3, r3
 800160a:	b2db      	uxtb	r3, r3
 800160c:	461a      	mov	r2, r3
 800160e:	4b68      	ldr	r3, [pc, #416]	; (80017b0 <HAL_RCC_OscConfig+0x938>)
 8001610:	4413      	add	r3, r2
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	461a      	mov	r2, r3
 8001616:	2300      	movs	r3, #0
 8001618:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800161a:	f7ff f9a5 	bl	8000968 <HAL_GetTick>
 800161e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001622:	e00a      	b.n	800163a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001624:	f7ff f9a0 	bl	8000968 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	2b02      	cmp	r3, #2
 8001632:	d902      	bls.n	800163a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	f000 bc55 	b.w	8001ee4 <HAL_RCC_OscConfig+0x106c>
 800163a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800163e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001642:	2202      	movs	r2, #2
 8001644:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001646:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800164a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	fa93 f2a3 	rbit	r2, r3
 8001654:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001658:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001662:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001666:	2202      	movs	r2, #2
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800166e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	fa93 f2a3 	rbit	r2, r3
 8001678:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800167c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001686:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800168a:	2202      	movs	r2, #2
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001692:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	fa93 f2a3 	rbit	r2, r3
 800169c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016a0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80016a4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016a6:	4b41      	ldr	r3, [pc, #260]	; (80017ac <HAL_RCC_OscConfig+0x934>)
 80016a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ae:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80016b2:	2102      	movs	r1, #2
 80016b4:	6019      	str	r1, [r3, #0]
 80016b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ba:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	fa93 f1a3 	rbit	r1, r3
 80016c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016c8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80016cc:	6019      	str	r1, [r3, #0]
  return result;
 80016ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016d2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	fab3 f383 	clz	r3, r3
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	f003 031f 	and.w	r3, r3, #31
 80016e8:	2101      	movs	r1, #1
 80016ea:	fa01 f303 	lsl.w	r3, r1, r3
 80016ee:	4013      	ands	r3, r2
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d197      	bne.n	8001624 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0304 	and.w	r3, r3, #4
 8001704:	2b00      	cmp	r3, #0
 8001706:	f000 81a1 	beq.w	8001a4c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800170a:	2300      	movs	r3, #0
 800170c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001710:	4b26      	ldr	r3, [pc, #152]	; (80017ac <HAL_RCC_OscConfig+0x934>)
 8001712:	69db      	ldr	r3, [r3, #28]
 8001714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d116      	bne.n	800174a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800171c:	4b23      	ldr	r3, [pc, #140]	; (80017ac <HAL_RCC_OscConfig+0x934>)
 800171e:	69db      	ldr	r3, [r3, #28]
 8001720:	4a22      	ldr	r2, [pc, #136]	; (80017ac <HAL_RCC_OscConfig+0x934>)
 8001722:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001726:	61d3      	str	r3, [r2, #28]
 8001728:	4b20      	ldr	r3, [pc, #128]	; (80017ac <HAL_RCC_OscConfig+0x934>)
 800172a:	69db      	ldr	r3, [r3, #28]
 800172c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001730:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001734:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800173e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001742:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001744:	2301      	movs	r3, #1
 8001746:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800174a:	4b1a      	ldr	r3, [pc, #104]	; (80017b4 <HAL_RCC_OscConfig+0x93c>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001752:	2b00      	cmp	r3, #0
 8001754:	d11a      	bne.n	800178c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001756:	4b17      	ldr	r3, [pc, #92]	; (80017b4 <HAL_RCC_OscConfig+0x93c>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a16      	ldr	r2, [pc, #88]	; (80017b4 <HAL_RCC_OscConfig+0x93c>)
 800175c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001760:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001762:	f7ff f901 	bl	8000968 <HAL_GetTick>
 8001766:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800176a:	e009      	b.n	8001780 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800176c:	f7ff f8fc 	bl	8000968 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	2b64      	cmp	r3, #100	; 0x64
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e3b1      	b.n	8001ee4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001780:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <HAL_RCC_OscConfig+0x93c>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001788:	2b00      	cmp	r3, #0
 800178a:	d0ef      	beq.n	800176c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800178c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001790:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	2b01      	cmp	r3, #1
 800179a:	d10d      	bne.n	80017b8 <HAL_RCC_OscConfig+0x940>
 800179c:	4b03      	ldr	r3, [pc, #12]	; (80017ac <HAL_RCC_OscConfig+0x934>)
 800179e:	6a1b      	ldr	r3, [r3, #32]
 80017a0:	4a02      	ldr	r2, [pc, #8]	; (80017ac <HAL_RCC_OscConfig+0x934>)
 80017a2:	f043 0301 	orr.w	r3, r3, #1
 80017a6:	6213      	str	r3, [r2, #32]
 80017a8:	e03c      	b.n	8001824 <HAL_RCC_OscConfig+0x9ac>
 80017aa:	bf00      	nop
 80017ac:	40021000 	.word	0x40021000
 80017b0:	10908120 	.word	0x10908120
 80017b4:	40007000 	.word	0x40007000
 80017b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d10c      	bne.n	80017e2 <HAL_RCC_OscConfig+0x96a>
 80017c8:	4bc1      	ldr	r3, [pc, #772]	; (8001ad0 <HAL_RCC_OscConfig+0xc58>)
 80017ca:	6a1b      	ldr	r3, [r3, #32]
 80017cc:	4ac0      	ldr	r2, [pc, #768]	; (8001ad0 <HAL_RCC_OscConfig+0xc58>)
 80017ce:	f023 0301 	bic.w	r3, r3, #1
 80017d2:	6213      	str	r3, [r2, #32]
 80017d4:	4bbe      	ldr	r3, [pc, #760]	; (8001ad0 <HAL_RCC_OscConfig+0xc58>)
 80017d6:	6a1b      	ldr	r3, [r3, #32]
 80017d8:	4abd      	ldr	r2, [pc, #756]	; (8001ad0 <HAL_RCC_OscConfig+0xc58>)
 80017da:	f023 0304 	bic.w	r3, r3, #4
 80017de:	6213      	str	r3, [r2, #32]
 80017e0:	e020      	b.n	8001824 <HAL_RCC_OscConfig+0x9ac>
 80017e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	2b05      	cmp	r3, #5
 80017f0:	d10c      	bne.n	800180c <HAL_RCC_OscConfig+0x994>
 80017f2:	4bb7      	ldr	r3, [pc, #732]	; (8001ad0 <HAL_RCC_OscConfig+0xc58>)
 80017f4:	6a1b      	ldr	r3, [r3, #32]
 80017f6:	4ab6      	ldr	r2, [pc, #728]	; (8001ad0 <HAL_RCC_OscConfig+0xc58>)
 80017f8:	f043 0304 	orr.w	r3, r3, #4
 80017fc:	6213      	str	r3, [r2, #32]
 80017fe:	4bb4      	ldr	r3, [pc, #720]	; (8001ad0 <HAL_RCC_OscConfig+0xc58>)
 8001800:	6a1b      	ldr	r3, [r3, #32]
 8001802:	4ab3      	ldr	r2, [pc, #716]	; (8001ad0 <HAL_RCC_OscConfig+0xc58>)
 8001804:	f043 0301 	orr.w	r3, r3, #1
 8001808:	6213      	str	r3, [r2, #32]
 800180a:	e00b      	b.n	8001824 <HAL_RCC_OscConfig+0x9ac>
 800180c:	4bb0      	ldr	r3, [pc, #704]	; (8001ad0 <HAL_RCC_OscConfig+0xc58>)
 800180e:	6a1b      	ldr	r3, [r3, #32]
 8001810:	4aaf      	ldr	r2, [pc, #700]	; (8001ad0 <HAL_RCC_OscConfig+0xc58>)
 8001812:	f023 0301 	bic.w	r3, r3, #1
 8001816:	6213      	str	r3, [r2, #32]
 8001818:	4bad      	ldr	r3, [pc, #692]	; (8001ad0 <HAL_RCC_OscConfig+0xc58>)
 800181a:	6a1b      	ldr	r3, [r3, #32]
 800181c:	4aac      	ldr	r2, [pc, #688]	; (8001ad0 <HAL_RCC_OscConfig+0xc58>)
 800181e:	f023 0304 	bic.w	r3, r3, #4
 8001822:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001824:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001828:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	2b00      	cmp	r3, #0
 8001832:	f000 8081 	beq.w	8001938 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001836:	f7ff f897 	bl	8000968 <HAL_GetTick>
 800183a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800183e:	e00b      	b.n	8001858 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001840:	f7ff f892 	bl	8000968 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001850:	4293      	cmp	r3, r2
 8001852:	d901      	bls.n	8001858 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e345      	b.n	8001ee4 <HAL_RCC_OscConfig+0x106c>
 8001858:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800185c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001860:	2202      	movs	r2, #2
 8001862:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001864:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001868:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	fa93 f2a3 	rbit	r2, r3
 8001872:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001876:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001880:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001884:	2202      	movs	r2, #2
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800188c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	fa93 f2a3 	rbit	r2, r3
 8001896:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800189a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800189e:	601a      	str	r2, [r3, #0]
  return result;
 80018a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018a4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80018a8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018aa:	fab3 f383 	clz	r3, r3
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	095b      	lsrs	r3, r3, #5
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	f043 0302 	orr.w	r3, r3, #2
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d102      	bne.n	80018c4 <HAL_RCC_OscConfig+0xa4c>
 80018be:	4b84      	ldr	r3, [pc, #528]	; (8001ad0 <HAL_RCC_OscConfig+0xc58>)
 80018c0:	6a1b      	ldr	r3, [r3, #32]
 80018c2:	e013      	b.n	80018ec <HAL_RCC_OscConfig+0xa74>
 80018c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018c8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80018cc:	2202      	movs	r2, #2
 80018ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018d4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	fa93 f2a3 	rbit	r2, r3
 80018de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018e2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	4b79      	ldr	r3, [pc, #484]	; (8001ad0 <HAL_RCC_OscConfig+0xc58>)
 80018ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018f0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80018f4:	2102      	movs	r1, #2
 80018f6:	6011      	str	r1, [r2, #0]
 80018f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018fc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001900:	6812      	ldr	r2, [r2, #0]
 8001902:	fa92 f1a2 	rbit	r1, r2
 8001906:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800190a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800190e:	6011      	str	r1, [r2, #0]
  return result;
 8001910:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001914:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001918:	6812      	ldr	r2, [r2, #0]
 800191a:	fab2 f282 	clz	r2, r2
 800191e:	b2d2      	uxtb	r2, r2
 8001920:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001924:	b2d2      	uxtb	r2, r2
 8001926:	f002 021f 	and.w	r2, r2, #31
 800192a:	2101      	movs	r1, #1
 800192c:	fa01 f202 	lsl.w	r2, r1, r2
 8001930:	4013      	ands	r3, r2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d084      	beq.n	8001840 <HAL_RCC_OscConfig+0x9c8>
 8001936:	e07f      	b.n	8001a38 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001938:	f7ff f816 	bl	8000968 <HAL_GetTick>
 800193c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001940:	e00b      	b.n	800195a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001942:	f7ff f811 	bl	8000968 <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001952:	4293      	cmp	r3, r2
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e2c4      	b.n	8001ee4 <HAL_RCC_OscConfig+0x106c>
 800195a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800195e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001962:	2202      	movs	r2, #2
 8001964:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001966:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800196a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	fa93 f2a3 	rbit	r2, r3
 8001974:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001978:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001982:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001986:	2202      	movs	r2, #2
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800198e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	fa93 f2a3 	rbit	r2, r3
 8001998:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800199c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80019a0:	601a      	str	r2, [r3, #0]
  return result;
 80019a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019a6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80019aa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019ac:	fab3 f383 	clz	r3, r3
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	095b      	lsrs	r3, r3, #5
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	f043 0302 	orr.w	r3, r3, #2
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d102      	bne.n	80019c6 <HAL_RCC_OscConfig+0xb4e>
 80019c0:	4b43      	ldr	r3, [pc, #268]	; (8001ad0 <HAL_RCC_OscConfig+0xc58>)
 80019c2:	6a1b      	ldr	r3, [r3, #32]
 80019c4:	e013      	b.n	80019ee <HAL_RCC_OscConfig+0xb76>
 80019c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ca:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80019ce:	2202      	movs	r2, #2
 80019d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019d6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	fa93 f2a3 	rbit	r2, r3
 80019e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019e4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	4b39      	ldr	r3, [pc, #228]	; (8001ad0 <HAL_RCC_OscConfig+0xc58>)
 80019ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019f2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80019f6:	2102      	movs	r1, #2
 80019f8:	6011      	str	r1, [r2, #0]
 80019fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019fe:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001a02:	6812      	ldr	r2, [r2, #0]
 8001a04:	fa92 f1a2 	rbit	r1, r2
 8001a08:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a0c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001a10:	6011      	str	r1, [r2, #0]
  return result;
 8001a12:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a16:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001a1a:	6812      	ldr	r2, [r2, #0]
 8001a1c:	fab2 f282 	clz	r2, r2
 8001a20:	b2d2      	uxtb	r2, r2
 8001a22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a26:	b2d2      	uxtb	r2, r2
 8001a28:	f002 021f 	and.w	r2, r2, #31
 8001a2c:	2101      	movs	r1, #1
 8001a2e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a32:	4013      	ands	r3, r2
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d184      	bne.n	8001942 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a38:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d105      	bne.n	8001a4c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a40:	4b23      	ldr	r3, [pc, #140]	; (8001ad0 <HAL_RCC_OscConfig+0xc58>)
 8001a42:	69db      	ldr	r3, [r3, #28]
 8001a44:	4a22      	ldr	r2, [pc, #136]	; (8001ad0 <HAL_RCC_OscConfig+0xc58>)
 8001a46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a4a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a50:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	69db      	ldr	r3, [r3, #28]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	f000 8242 	beq.w	8001ee2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a5e:	4b1c      	ldr	r3, [pc, #112]	; (8001ad0 <HAL_RCC_OscConfig+0xc58>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f003 030c 	and.w	r3, r3, #12
 8001a66:	2b08      	cmp	r3, #8
 8001a68:	f000 8213 	beq.w	8001e92 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a70:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	69db      	ldr	r3, [r3, #28]
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	f040 8162 	bne.w	8001d42 <HAL_RCC_OscConfig+0xeca>
 8001a7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a82:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001a86:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a90:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	fa93 f2a3 	rbit	r2, r3
 8001a9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a9e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001aa2:	601a      	str	r2, [r3, #0]
  return result;
 8001aa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001aac:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aae:	fab3 f383 	clz	r3, r3
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ab8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	461a      	mov	r2, r3
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac4:	f7fe ff50 	bl	8000968 <HAL_GetTick>
 8001ac8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001acc:	e00c      	b.n	8001ae8 <HAL_RCC_OscConfig+0xc70>
 8001ace:	bf00      	nop
 8001ad0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ad4:	f7fe ff48 	bl	8000968 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d901      	bls.n	8001ae8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e1fd      	b.n	8001ee4 <HAL_RCC_OscConfig+0x106c>
 8001ae8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aec:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001af0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001af4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001afa:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	fa93 f2a3 	rbit	r2, r3
 8001b04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b08:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001b0c:	601a      	str	r2, [r3, #0]
  return result;
 8001b0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b12:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001b16:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b18:	fab3 f383 	clz	r3, r3
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	095b      	lsrs	r3, r3, #5
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	f043 0301 	orr.w	r3, r3, #1
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d102      	bne.n	8001b32 <HAL_RCC_OscConfig+0xcba>
 8001b2c:	4bb0      	ldr	r3, [pc, #704]	; (8001df0 <HAL_RCC_OscConfig+0xf78>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	e027      	b.n	8001b82 <HAL_RCC_OscConfig+0xd0a>
 8001b32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b36:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001b3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b44:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	fa93 f2a3 	rbit	r2, r3
 8001b4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b52:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b5c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001b60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b64:	601a      	str	r2, [r3, #0]
 8001b66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b6a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	fa93 f2a3 	rbit	r2, r3
 8001b74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b78:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	4b9c      	ldr	r3, [pc, #624]	; (8001df0 <HAL_RCC_OscConfig+0xf78>)
 8001b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b82:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b86:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001b8a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b8e:	6011      	str	r1, [r2, #0]
 8001b90:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b94:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001b98:	6812      	ldr	r2, [r2, #0]
 8001b9a:	fa92 f1a2 	rbit	r1, r2
 8001b9e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ba2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001ba6:	6011      	str	r1, [r2, #0]
  return result;
 8001ba8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bac:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001bb0:	6812      	ldr	r2, [r2, #0]
 8001bb2:	fab2 f282 	clz	r2, r2
 8001bb6:	b2d2      	uxtb	r2, r2
 8001bb8:	f042 0220 	orr.w	r2, r2, #32
 8001bbc:	b2d2      	uxtb	r2, r2
 8001bbe:	f002 021f 	and.w	r2, r2, #31
 8001bc2:	2101      	movs	r1, #1
 8001bc4:	fa01 f202 	lsl.w	r2, r1, r2
 8001bc8:	4013      	ands	r3, r2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d182      	bne.n	8001ad4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bce:	4b88      	ldr	r3, [pc, #544]	; (8001df0 <HAL_RCC_OscConfig+0xf78>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001bd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001be2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001be6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	6a1b      	ldr	r3, [r3, #32]
 8001bee:	430b      	orrs	r3, r1
 8001bf0:	497f      	ldr	r1, [pc, #508]	; (8001df0 <HAL_RCC_OscConfig+0xf78>)
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	604b      	str	r3, [r1, #4]
 8001bf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bfa:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001bfe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c08:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	fa93 f2a3 	rbit	r2, r3
 8001c12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c16:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001c1a:	601a      	str	r2, [r3, #0]
  return result;
 8001c1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c20:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001c24:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c26:	fab3 f383 	clz	r3, r3
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c30:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	461a      	mov	r2, r3
 8001c38:	2301      	movs	r3, #1
 8001c3a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c3c:	f7fe fe94 	bl	8000968 <HAL_GetTick>
 8001c40:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c44:	e009      	b.n	8001c5a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c46:	f7fe fe8f 	bl	8000968 <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e144      	b.n	8001ee4 <HAL_RCC_OscConfig+0x106c>
 8001c5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c5e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001c62:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c6c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	fa93 f2a3 	rbit	r2, r3
 8001c76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c7a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001c7e:	601a      	str	r2, [r3, #0]
  return result;
 8001c80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c84:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001c88:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c8a:	fab3 f383 	clz	r3, r3
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	095b      	lsrs	r3, r3, #5
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	f043 0301 	orr.w	r3, r3, #1
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d102      	bne.n	8001ca4 <HAL_RCC_OscConfig+0xe2c>
 8001c9e:	4b54      	ldr	r3, [pc, #336]	; (8001df0 <HAL_RCC_OscConfig+0xf78>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	e027      	b.n	8001cf4 <HAL_RCC_OscConfig+0xe7c>
 8001ca4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001cac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cb0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	fa93 f2a3 	rbit	r2, r3
 8001cc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cc4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cce:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001cd2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cdc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	fa93 f2a3 	rbit	r2, r3
 8001ce6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cea:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	4b3f      	ldr	r3, [pc, #252]	; (8001df0 <HAL_RCC_OscConfig+0xf78>)
 8001cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cf8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001cfc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d00:	6011      	str	r1, [r2, #0]
 8001d02:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d06:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001d0a:	6812      	ldr	r2, [r2, #0]
 8001d0c:	fa92 f1a2 	rbit	r1, r2
 8001d10:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d14:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001d18:	6011      	str	r1, [r2, #0]
  return result;
 8001d1a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d1e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001d22:	6812      	ldr	r2, [r2, #0]
 8001d24:	fab2 f282 	clz	r2, r2
 8001d28:	b2d2      	uxtb	r2, r2
 8001d2a:	f042 0220 	orr.w	r2, r2, #32
 8001d2e:	b2d2      	uxtb	r2, r2
 8001d30:	f002 021f 	and.w	r2, r2, #31
 8001d34:	2101      	movs	r1, #1
 8001d36:	fa01 f202 	lsl.w	r2, r1, r2
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d082      	beq.n	8001c46 <HAL_RCC_OscConfig+0xdce>
 8001d40:	e0cf      	b.n	8001ee2 <HAL_RCC_OscConfig+0x106a>
 8001d42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d46:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001d4a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d54:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	fa93 f2a3 	rbit	r2, r3
 8001d5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d62:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001d66:	601a      	str	r2, [r3, #0]
  return result;
 8001d68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d6c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001d70:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d72:	fab3 f383 	clz	r3, r3
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d7c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	461a      	mov	r2, r3
 8001d84:	2300      	movs	r3, #0
 8001d86:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d88:	f7fe fdee 	bl	8000968 <HAL_GetTick>
 8001d8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d90:	e009      	b.n	8001da6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d92:	f7fe fde9 	bl	8000968 <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e09e      	b.n	8001ee4 <HAL_RCC_OscConfig+0x106c>
 8001da6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001daa:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001dae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001db2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001db8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	fa93 f2a3 	rbit	r2, r3
 8001dc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dc6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001dca:	601a      	str	r2, [r3, #0]
  return result;
 8001dcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dd0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001dd4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dd6:	fab3 f383 	clz	r3, r3
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	095b      	lsrs	r3, r3, #5
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	f043 0301 	orr.w	r3, r3, #1
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d104      	bne.n	8001df4 <HAL_RCC_OscConfig+0xf7c>
 8001dea:	4b01      	ldr	r3, [pc, #4]	; (8001df0 <HAL_RCC_OscConfig+0xf78>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	e029      	b.n	8001e44 <HAL_RCC_OscConfig+0xfcc>
 8001df0:	40021000 	.word	0x40021000
 8001df4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001df8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001dfc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e06:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	fa93 f2a3 	rbit	r2, r3
 8001e10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e14:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001e18:	601a      	str	r2, [r3, #0]
 8001e1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e1e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001e22:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e2c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	fa93 f2a3 	rbit	r2, r3
 8001e36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e3a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	4b2b      	ldr	r3, [pc, #172]	; (8001ef0 <HAL_RCC_OscConfig+0x1078>)
 8001e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e44:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e48:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001e4c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e50:	6011      	str	r1, [r2, #0]
 8001e52:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e56:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001e5a:	6812      	ldr	r2, [r2, #0]
 8001e5c:	fa92 f1a2 	rbit	r1, r2
 8001e60:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e64:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001e68:	6011      	str	r1, [r2, #0]
  return result;
 8001e6a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e6e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001e72:	6812      	ldr	r2, [r2, #0]
 8001e74:	fab2 f282 	clz	r2, r2
 8001e78:	b2d2      	uxtb	r2, r2
 8001e7a:	f042 0220 	orr.w	r2, r2, #32
 8001e7e:	b2d2      	uxtb	r2, r2
 8001e80:	f002 021f 	and.w	r2, r2, #31
 8001e84:	2101      	movs	r1, #1
 8001e86:	fa01 f202 	lsl.w	r2, r1, r2
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d180      	bne.n	8001d92 <HAL_RCC_OscConfig+0xf1a>
 8001e90:	e027      	b.n	8001ee2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	69db      	ldr	r3, [r3, #28]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d101      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e01e      	b.n	8001ee4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ea6:	4b12      	ldr	r3, [pc, #72]	; (8001ef0 <HAL_RCC_OscConfig+0x1078>)
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001eae:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001eb2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001eb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	6a1b      	ldr	r3, [r3, #32]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d10b      	bne.n	8001ede <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001ec6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001eca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ece:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ed2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d001      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e000      	b.n	8001ee4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001ee2:	2300      	movs	r3, #0
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	40021000 	.word	0x40021000

08001ef4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b09e      	sub	sp, #120	; 0x78
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001efe:	2300      	movs	r3, #0
 8001f00:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d101      	bne.n	8001f0c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e162      	b.n	80021d2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f0c:	4b90      	ldr	r3, [pc, #576]	; (8002150 <HAL_RCC_ClockConfig+0x25c>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0307 	and.w	r3, r3, #7
 8001f14:	683a      	ldr	r2, [r7, #0]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d910      	bls.n	8001f3c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f1a:	4b8d      	ldr	r3, [pc, #564]	; (8002150 <HAL_RCC_ClockConfig+0x25c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f023 0207 	bic.w	r2, r3, #7
 8001f22:	498b      	ldr	r1, [pc, #556]	; (8002150 <HAL_RCC_ClockConfig+0x25c>)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f2a:	4b89      	ldr	r3, [pc, #548]	; (8002150 <HAL_RCC_ClockConfig+0x25c>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	683a      	ldr	r2, [r7, #0]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d001      	beq.n	8001f3c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e14a      	b.n	80021d2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d008      	beq.n	8001f5a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f48:	4b82      	ldr	r3, [pc, #520]	; (8002154 <HAL_RCC_ClockConfig+0x260>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	497f      	ldr	r1, [pc, #508]	; (8002154 <HAL_RCC_ClockConfig+0x260>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	f000 80dc 	beq.w	8002120 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d13c      	bne.n	8001fea <HAL_RCC_ClockConfig+0xf6>
 8001f70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f74:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f78:	fa93 f3a3 	rbit	r3, r3
 8001f7c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001f7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f80:	fab3 f383 	clz	r3, r3
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	095b      	lsrs	r3, r3, #5
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	f043 0301 	orr.w	r3, r3, #1
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d102      	bne.n	8001f9a <HAL_RCC_ClockConfig+0xa6>
 8001f94:	4b6f      	ldr	r3, [pc, #444]	; (8002154 <HAL_RCC_ClockConfig+0x260>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	e00f      	b.n	8001fba <HAL_RCC_ClockConfig+0xc6>
 8001f9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f9e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fa2:	fa93 f3a3 	rbit	r3, r3
 8001fa6:	667b      	str	r3, [r7, #100]	; 0x64
 8001fa8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fac:	663b      	str	r3, [r7, #96]	; 0x60
 8001fae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001fb0:	fa93 f3a3 	rbit	r3, r3
 8001fb4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001fb6:	4b67      	ldr	r3, [pc, #412]	; (8002154 <HAL_RCC_ClockConfig+0x260>)
 8001fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fbe:	65ba      	str	r2, [r7, #88]	; 0x58
 8001fc0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001fc2:	fa92 f2a2 	rbit	r2, r2
 8001fc6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001fc8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001fca:	fab2 f282 	clz	r2, r2
 8001fce:	b2d2      	uxtb	r2, r2
 8001fd0:	f042 0220 	orr.w	r2, r2, #32
 8001fd4:	b2d2      	uxtb	r2, r2
 8001fd6:	f002 021f 	and.w	r2, r2, #31
 8001fda:	2101      	movs	r1, #1
 8001fdc:	fa01 f202 	lsl.w	r2, r1, r2
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d17b      	bne.n	80020de <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e0f3      	b.n	80021d2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d13c      	bne.n	800206c <HAL_RCC_ClockConfig+0x178>
 8001ff2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ff6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ffa:	fa93 f3a3 	rbit	r3, r3
 8001ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002000:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002002:	fab3 f383 	clz	r3, r3
 8002006:	b2db      	uxtb	r3, r3
 8002008:	095b      	lsrs	r3, r3, #5
 800200a:	b2db      	uxtb	r3, r3
 800200c:	f043 0301 	orr.w	r3, r3, #1
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b01      	cmp	r3, #1
 8002014:	d102      	bne.n	800201c <HAL_RCC_ClockConfig+0x128>
 8002016:	4b4f      	ldr	r3, [pc, #316]	; (8002154 <HAL_RCC_ClockConfig+0x260>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	e00f      	b.n	800203c <HAL_RCC_ClockConfig+0x148>
 800201c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002020:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002022:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002024:	fa93 f3a3 	rbit	r3, r3
 8002028:	647b      	str	r3, [r7, #68]	; 0x44
 800202a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800202e:	643b      	str	r3, [r7, #64]	; 0x40
 8002030:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002032:	fa93 f3a3 	rbit	r3, r3
 8002036:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002038:	4b46      	ldr	r3, [pc, #280]	; (8002154 <HAL_RCC_ClockConfig+0x260>)
 800203a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002040:	63ba      	str	r2, [r7, #56]	; 0x38
 8002042:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002044:	fa92 f2a2 	rbit	r2, r2
 8002048:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800204a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800204c:	fab2 f282 	clz	r2, r2
 8002050:	b2d2      	uxtb	r2, r2
 8002052:	f042 0220 	orr.w	r2, r2, #32
 8002056:	b2d2      	uxtb	r2, r2
 8002058:	f002 021f 	and.w	r2, r2, #31
 800205c:	2101      	movs	r1, #1
 800205e:	fa01 f202 	lsl.w	r2, r1, r2
 8002062:	4013      	ands	r3, r2
 8002064:	2b00      	cmp	r3, #0
 8002066:	d13a      	bne.n	80020de <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e0b2      	b.n	80021d2 <HAL_RCC_ClockConfig+0x2de>
 800206c:	2302      	movs	r3, #2
 800206e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002072:	fa93 f3a3 	rbit	r3, r3
 8002076:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800207a:	fab3 f383 	clz	r3, r3
 800207e:	b2db      	uxtb	r3, r3
 8002080:	095b      	lsrs	r3, r3, #5
 8002082:	b2db      	uxtb	r3, r3
 8002084:	f043 0301 	orr.w	r3, r3, #1
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b01      	cmp	r3, #1
 800208c:	d102      	bne.n	8002094 <HAL_RCC_ClockConfig+0x1a0>
 800208e:	4b31      	ldr	r3, [pc, #196]	; (8002154 <HAL_RCC_ClockConfig+0x260>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	e00d      	b.n	80020b0 <HAL_RCC_ClockConfig+0x1bc>
 8002094:	2302      	movs	r3, #2
 8002096:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800209a:	fa93 f3a3 	rbit	r3, r3
 800209e:	627b      	str	r3, [r7, #36]	; 0x24
 80020a0:	2302      	movs	r3, #2
 80020a2:	623b      	str	r3, [r7, #32]
 80020a4:	6a3b      	ldr	r3, [r7, #32]
 80020a6:	fa93 f3a3 	rbit	r3, r3
 80020aa:	61fb      	str	r3, [r7, #28]
 80020ac:	4b29      	ldr	r3, [pc, #164]	; (8002154 <HAL_RCC_ClockConfig+0x260>)
 80020ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b0:	2202      	movs	r2, #2
 80020b2:	61ba      	str	r2, [r7, #24]
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	fa92 f2a2 	rbit	r2, r2
 80020ba:	617a      	str	r2, [r7, #20]
  return result;
 80020bc:	697a      	ldr	r2, [r7, #20]
 80020be:	fab2 f282 	clz	r2, r2
 80020c2:	b2d2      	uxtb	r2, r2
 80020c4:	f042 0220 	orr.w	r2, r2, #32
 80020c8:	b2d2      	uxtb	r2, r2
 80020ca:	f002 021f 	and.w	r2, r2, #31
 80020ce:	2101      	movs	r1, #1
 80020d0:	fa01 f202 	lsl.w	r2, r1, r2
 80020d4:	4013      	ands	r3, r2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e079      	b.n	80021d2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020de:	4b1d      	ldr	r3, [pc, #116]	; (8002154 <HAL_RCC_ClockConfig+0x260>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f023 0203 	bic.w	r2, r3, #3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	491a      	ldr	r1, [pc, #104]	; (8002154 <HAL_RCC_ClockConfig+0x260>)
 80020ec:	4313      	orrs	r3, r2
 80020ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020f0:	f7fe fc3a 	bl	8000968 <HAL_GetTick>
 80020f4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020f6:	e00a      	b.n	800210e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020f8:	f7fe fc36 	bl	8000968 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	f241 3288 	movw	r2, #5000	; 0x1388
 8002106:	4293      	cmp	r3, r2
 8002108:	d901      	bls.n	800210e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e061      	b.n	80021d2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800210e:	4b11      	ldr	r3, [pc, #68]	; (8002154 <HAL_RCC_ClockConfig+0x260>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f003 020c 	and.w	r2, r3, #12
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	429a      	cmp	r2, r3
 800211e:	d1eb      	bne.n	80020f8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002120:	4b0b      	ldr	r3, [pc, #44]	; (8002150 <HAL_RCC_ClockConfig+0x25c>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0307 	and.w	r3, r3, #7
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	429a      	cmp	r2, r3
 800212c:	d214      	bcs.n	8002158 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212e:	4b08      	ldr	r3, [pc, #32]	; (8002150 <HAL_RCC_ClockConfig+0x25c>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f023 0207 	bic.w	r2, r3, #7
 8002136:	4906      	ldr	r1, [pc, #24]	; (8002150 <HAL_RCC_ClockConfig+0x25c>)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	4313      	orrs	r3, r2
 800213c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800213e:	4b04      	ldr	r3, [pc, #16]	; (8002150 <HAL_RCC_ClockConfig+0x25c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0307 	and.w	r3, r3, #7
 8002146:	683a      	ldr	r2, [r7, #0]
 8002148:	429a      	cmp	r2, r3
 800214a:	d005      	beq.n	8002158 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e040      	b.n	80021d2 <HAL_RCC_ClockConfig+0x2de>
 8002150:	40022000 	.word	0x40022000
 8002154:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0304 	and.w	r3, r3, #4
 8002160:	2b00      	cmp	r3, #0
 8002162:	d008      	beq.n	8002176 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002164:	4b1d      	ldr	r3, [pc, #116]	; (80021dc <HAL_RCC_ClockConfig+0x2e8>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	491a      	ldr	r1, [pc, #104]	; (80021dc <HAL_RCC_ClockConfig+0x2e8>)
 8002172:	4313      	orrs	r3, r2
 8002174:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0308 	and.w	r3, r3, #8
 800217e:	2b00      	cmp	r3, #0
 8002180:	d009      	beq.n	8002196 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002182:	4b16      	ldr	r3, [pc, #88]	; (80021dc <HAL_RCC_ClockConfig+0x2e8>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	4912      	ldr	r1, [pc, #72]	; (80021dc <HAL_RCC_ClockConfig+0x2e8>)
 8002192:	4313      	orrs	r3, r2
 8002194:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002196:	f000 f829 	bl	80021ec <HAL_RCC_GetSysClockFreq>
 800219a:	4601      	mov	r1, r0
 800219c:	4b0f      	ldr	r3, [pc, #60]	; (80021dc <HAL_RCC_ClockConfig+0x2e8>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021a4:	22f0      	movs	r2, #240	; 0xf0
 80021a6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a8:	693a      	ldr	r2, [r7, #16]
 80021aa:	fa92 f2a2 	rbit	r2, r2
 80021ae:	60fa      	str	r2, [r7, #12]
  return result;
 80021b0:	68fa      	ldr	r2, [r7, #12]
 80021b2:	fab2 f282 	clz	r2, r2
 80021b6:	b2d2      	uxtb	r2, r2
 80021b8:	40d3      	lsrs	r3, r2
 80021ba:	4a09      	ldr	r2, [pc, #36]	; (80021e0 <HAL_RCC_ClockConfig+0x2ec>)
 80021bc:	5cd3      	ldrb	r3, [r2, r3]
 80021be:	fa21 f303 	lsr.w	r3, r1, r3
 80021c2:	4a08      	ldr	r2, [pc, #32]	; (80021e4 <HAL_RCC_ClockConfig+0x2f0>)
 80021c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80021c6:	4b08      	ldr	r3, [pc, #32]	; (80021e8 <HAL_RCC_ClockConfig+0x2f4>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe fb88 	bl	80008e0 <HAL_InitTick>
  
  return HAL_OK;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3778      	adds	r7, #120	; 0x78
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40021000 	.word	0x40021000
 80021e0:	080049e0 	.word	0x080049e0
 80021e4:	20000000 	.word	0x20000000
 80021e8:	20000004 	.word	0x20000004

080021ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b08b      	sub	sp, #44	; 0x2c
 80021f0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021f2:	2300      	movs	r3, #0
 80021f4:	61fb      	str	r3, [r7, #28]
 80021f6:	2300      	movs	r3, #0
 80021f8:	61bb      	str	r3, [r7, #24]
 80021fa:	2300      	movs	r3, #0
 80021fc:	627b      	str	r3, [r7, #36]	; 0x24
 80021fe:	2300      	movs	r3, #0
 8002200:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002202:	2300      	movs	r3, #0
 8002204:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002206:	4b29      	ldr	r3, [pc, #164]	; (80022ac <HAL_RCC_GetSysClockFreq+0xc0>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	f003 030c 	and.w	r3, r3, #12
 8002212:	2b04      	cmp	r3, #4
 8002214:	d002      	beq.n	800221c <HAL_RCC_GetSysClockFreq+0x30>
 8002216:	2b08      	cmp	r3, #8
 8002218:	d003      	beq.n	8002222 <HAL_RCC_GetSysClockFreq+0x36>
 800221a:	e03c      	b.n	8002296 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800221c:	4b24      	ldr	r3, [pc, #144]	; (80022b0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800221e:	623b      	str	r3, [r7, #32]
      break;
 8002220:	e03c      	b.n	800229c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002228:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800222c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222e:	68ba      	ldr	r2, [r7, #8]
 8002230:	fa92 f2a2 	rbit	r2, r2
 8002234:	607a      	str	r2, [r7, #4]
  return result;
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	fab2 f282 	clz	r2, r2
 800223c:	b2d2      	uxtb	r2, r2
 800223e:	40d3      	lsrs	r3, r2
 8002240:	4a1c      	ldr	r2, [pc, #112]	; (80022b4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002242:	5cd3      	ldrb	r3, [r2, r3]
 8002244:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002246:	4b19      	ldr	r3, [pc, #100]	; (80022ac <HAL_RCC_GetSysClockFreq+0xc0>)
 8002248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800224a:	f003 030f 	and.w	r3, r3, #15
 800224e:	220f      	movs	r2, #15
 8002250:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	fa92 f2a2 	rbit	r2, r2
 8002258:	60fa      	str	r2, [r7, #12]
  return result;
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	fab2 f282 	clz	r2, r2
 8002260:	b2d2      	uxtb	r2, r2
 8002262:	40d3      	lsrs	r3, r2
 8002264:	4a14      	ldr	r2, [pc, #80]	; (80022b8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002266:	5cd3      	ldrb	r3, [r2, r3]
 8002268:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d008      	beq.n	8002286 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002274:	4a0e      	ldr	r2, [pc, #56]	; (80022b0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	fbb2 f2f3 	udiv	r2, r2, r3
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	fb02 f303 	mul.w	r3, r2, r3
 8002282:	627b      	str	r3, [r7, #36]	; 0x24
 8002284:	e004      	b.n	8002290 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	4a0c      	ldr	r2, [pc, #48]	; (80022bc <HAL_RCC_GetSysClockFreq+0xd0>)
 800228a:	fb02 f303 	mul.w	r3, r2, r3
 800228e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002292:	623b      	str	r3, [r7, #32]
      break;
 8002294:	e002      	b.n	800229c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002296:	4b06      	ldr	r3, [pc, #24]	; (80022b0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002298:	623b      	str	r3, [r7, #32]
      break;
 800229a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800229c:	6a3b      	ldr	r3, [r7, #32]
}
 800229e:	4618      	mov	r0, r3
 80022a0:	372c      	adds	r7, #44	; 0x2c
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	40021000 	.word	0x40021000
 80022b0:	007a1200 	.word	0x007a1200
 80022b4:	080049f8 	.word	0x080049f8
 80022b8:	08004a08 	.word	0x08004a08
 80022bc:	003d0900 	.word	0x003d0900

080022c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022c4:	4b03      	ldr	r3, [pc, #12]	; (80022d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80022c6:	681b      	ldr	r3, [r3, #0]
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	20000000 	.word	0x20000000

080022d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80022de:	f7ff ffef 	bl	80022c0 <HAL_RCC_GetHCLKFreq>
 80022e2:	4601      	mov	r1, r0
 80022e4:	4b0b      	ldr	r3, [pc, #44]	; (8002314 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80022ec:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80022f0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	fa92 f2a2 	rbit	r2, r2
 80022f8:	603a      	str	r2, [r7, #0]
  return result;
 80022fa:	683a      	ldr	r2, [r7, #0]
 80022fc:	fab2 f282 	clz	r2, r2
 8002300:	b2d2      	uxtb	r2, r2
 8002302:	40d3      	lsrs	r3, r2
 8002304:	4a04      	ldr	r2, [pc, #16]	; (8002318 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002306:	5cd3      	ldrb	r3, [r2, r3]
 8002308:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800230c:	4618      	mov	r0, r3
 800230e:	3708      	adds	r7, #8
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	40021000 	.word	0x40021000
 8002318:	080049f0 	.word	0x080049f0

0800231c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002322:	f7ff ffcd 	bl	80022c0 <HAL_RCC_GetHCLKFreq>
 8002326:	4601      	mov	r1, r0
 8002328:	4b0b      	ldr	r3, [pc, #44]	; (8002358 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002330:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002334:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	fa92 f2a2 	rbit	r2, r2
 800233c:	603a      	str	r2, [r7, #0]
  return result;
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	fab2 f282 	clz	r2, r2
 8002344:	b2d2      	uxtb	r2, r2
 8002346:	40d3      	lsrs	r3, r2
 8002348:	4a04      	ldr	r2, [pc, #16]	; (800235c <HAL_RCC_GetPCLK2Freq+0x40>)
 800234a:	5cd3      	ldrb	r3, [r2, r3]
 800234c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002350:	4618      	mov	r0, r3
 8002352:	3708      	adds	r7, #8
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	40021000 	.word	0x40021000
 800235c:	080049f0 	.word	0x080049f0

08002360 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b092      	sub	sp, #72	; 0x48
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002368:	2300      	movs	r3, #0
 800236a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800236c:	2300      	movs	r3, #0
 800236e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002370:	2300      	movs	r3, #0
 8002372:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800237e:	2b00      	cmp	r3, #0
 8002380:	f000 80cd 	beq.w	800251e <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002384:	4b86      	ldr	r3, [pc, #536]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002386:	69db      	ldr	r3, [r3, #28]
 8002388:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d10e      	bne.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002390:	4b83      	ldr	r3, [pc, #524]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002392:	69db      	ldr	r3, [r3, #28]
 8002394:	4a82      	ldr	r2, [pc, #520]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002396:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800239a:	61d3      	str	r3, [r2, #28]
 800239c:	4b80      	ldr	r3, [pc, #512]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800239e:	69db      	ldr	r3, [r3, #28]
 80023a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a4:	60bb      	str	r3, [r7, #8]
 80023a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023a8:	2301      	movs	r3, #1
 80023aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ae:	4b7d      	ldr	r3, [pc, #500]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d118      	bne.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023ba:	4b7a      	ldr	r3, [pc, #488]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a79      	ldr	r2, [pc, #484]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80023c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023c4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023c6:	f7fe facf 	bl	8000968 <HAL_GetTick>
 80023ca:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023cc:	e008      	b.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ce:	f7fe facb 	bl	8000968 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b64      	cmp	r3, #100	; 0x64
 80023da:	d901      	bls.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e0db      	b.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e0:	4b70      	ldr	r3, [pc, #448]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d0f0      	beq.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80023ec:	4b6c      	ldr	r3, [pc, #432]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80023ee:	6a1b      	ldr	r3, [r3, #32]
 80023f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80023f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d07d      	beq.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002404:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002406:	429a      	cmp	r2, r3
 8002408:	d076      	beq.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800240a:	4b65      	ldr	r3, [pc, #404]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002412:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002414:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002418:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800241c:	fa93 f3a3 	rbit	r3, r3
 8002420:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002424:	fab3 f383 	clz	r3, r3
 8002428:	b2db      	uxtb	r3, r3
 800242a:	461a      	mov	r2, r3
 800242c:	4b5e      	ldr	r3, [pc, #376]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800242e:	4413      	add	r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	461a      	mov	r2, r3
 8002434:	2301      	movs	r3, #1
 8002436:	6013      	str	r3, [r2, #0]
 8002438:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800243c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002440:	fa93 f3a3 	rbit	r3, r3
 8002444:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002448:	fab3 f383 	clz	r3, r3
 800244c:	b2db      	uxtb	r3, r3
 800244e:	461a      	mov	r2, r3
 8002450:	4b55      	ldr	r3, [pc, #340]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002452:	4413      	add	r3, r2
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	461a      	mov	r2, r3
 8002458:	2300      	movs	r3, #0
 800245a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800245c:	4a50      	ldr	r2, [pc, #320]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800245e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002460:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002464:	f003 0301 	and.w	r3, r3, #1
 8002468:	2b00      	cmp	r3, #0
 800246a:	d045      	beq.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800246c:	f7fe fa7c 	bl	8000968 <HAL_GetTick>
 8002470:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002472:	e00a      	b.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002474:	f7fe fa78 	bl	8000968 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002482:	4293      	cmp	r3, r2
 8002484:	d901      	bls.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e086      	b.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x238>
 800248a:	2302      	movs	r3, #2
 800248c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002490:	fa93 f3a3 	rbit	r3, r3
 8002494:	627b      	str	r3, [r7, #36]	; 0x24
 8002496:	2302      	movs	r3, #2
 8002498:	623b      	str	r3, [r7, #32]
 800249a:	6a3b      	ldr	r3, [r7, #32]
 800249c:	fa93 f3a3 	rbit	r3, r3
 80024a0:	61fb      	str	r3, [r7, #28]
  return result;
 80024a2:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024a4:	fab3 f383 	clz	r3, r3
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	095b      	lsrs	r3, r3, #5
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	f043 0302 	orr.w	r3, r3, #2
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d102      	bne.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80024b8:	4b39      	ldr	r3, [pc, #228]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80024ba:	6a1b      	ldr	r3, [r3, #32]
 80024bc:	e007      	b.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80024be:	2302      	movs	r3, #2
 80024c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	fa93 f3a3 	rbit	r3, r3
 80024c8:	617b      	str	r3, [r7, #20]
 80024ca:	4b35      	ldr	r3, [pc, #212]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80024cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ce:	2202      	movs	r2, #2
 80024d0:	613a      	str	r2, [r7, #16]
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	fa92 f2a2 	rbit	r2, r2
 80024d8:	60fa      	str	r2, [r7, #12]
  return result;
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	fab2 f282 	clz	r2, r2
 80024e0:	b2d2      	uxtb	r2, r2
 80024e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024e6:	b2d2      	uxtb	r2, r2
 80024e8:	f002 021f 	and.w	r2, r2, #31
 80024ec:	2101      	movs	r1, #1
 80024ee:	fa01 f202 	lsl.w	r2, r1, r2
 80024f2:	4013      	ands	r3, r2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d0bd      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80024f8:	4b29      	ldr	r3, [pc, #164]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80024fa:	6a1b      	ldr	r3, [r3, #32]
 80024fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	4926      	ldr	r1, [pc, #152]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002506:	4313      	orrs	r3, r2
 8002508:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800250a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800250e:	2b01      	cmp	r3, #1
 8002510:	d105      	bne.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002512:	4b23      	ldr	r3, [pc, #140]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	4a22      	ldr	r2, [pc, #136]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002518:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800251c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	2b00      	cmp	r3, #0
 8002528:	d008      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800252a:	4b1d      	ldr	r3, [pc, #116]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252e:	f023 0203 	bic.w	r2, r3, #3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	491a      	ldr	r1, [pc, #104]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002538:	4313      	orrs	r3, r2
 800253a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0320 	and.w	r3, r3, #32
 8002544:	2b00      	cmp	r3, #0
 8002546:	d008      	beq.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002548:	4b15      	ldr	r3, [pc, #84]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800254a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254c:	f023 0210 	bic.w	r2, r3, #16
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	4912      	ldr	r1, [pc, #72]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002556:	4313      	orrs	r3, r2
 8002558:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002562:	2b00      	cmp	r3, #0
 8002564:	d008      	beq.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002566:	4b0e      	ldr	r3, [pc, #56]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	490b      	ldr	r1, [pc, #44]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002574:	4313      	orrs	r3, r2
 8002576:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d008      	beq.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002584:	4b06      	ldr	r3, [pc, #24]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002588:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	695b      	ldr	r3, [r3, #20]
 8002590:	4903      	ldr	r1, [pc, #12]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002592:	4313      	orrs	r3, r2
 8002594:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002596:	2300      	movs	r3, #0
}
 8002598:	4618      	mov	r0, r3
 800259a:	3748      	adds	r7, #72	; 0x48
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	40021000 	.word	0x40021000
 80025a4:	40007000 	.word	0x40007000
 80025a8:	10908100 	.word	0x10908100

080025ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e040      	b.n	8002640 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d106      	bne.n	80025d4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f7fe f80c 	bl	80005ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2224      	movs	r2, #36	; 0x24
 80025d8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f022 0201 	bic.w	r2, r2, #1
 80025e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 fa8c 	bl	8002b08 <UART_SetConfig>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d101      	bne.n	80025fa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e022      	b.n	8002640 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d002      	beq.n	8002608 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 fbb6 	bl	8002d74 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	685a      	ldr	r2, [r3, #4]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002616:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	689a      	ldr	r2, [r3, #8]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002626:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f042 0201 	orr.w	r2, r2, #1
 8002636:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f000 fc3d 	bl	8002eb8 <UART_CheckIdleState>
 800263e:	4603      	mov	r3, r0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3708      	adds	r7, #8
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e048      	b.n	80026ec <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800265e:	2b00      	cmp	r3, #0
 8002660:	d106      	bne.n	8002670 <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f7fd ffbe 	bl	80005ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2224      	movs	r2, #36	; 0x24
 8002674:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f022 0201 	bic.w	r2, r2, #1
 8002684:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 fa3e 	bl	8002b08 <UART_SetConfig>
 800268c:	4603      	mov	r3, r0
 800268e:	2b01      	cmp	r3, #1
 8002690:	d101      	bne.n	8002696 <HAL_HalfDuplex_Init+0x4e>
  {
    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e02a      	b.n	80026ec <HAL_HalfDuplex_Init+0xa4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269a:	2b00      	cmp	r3, #0
 800269c:	d002      	beq.n	80026a4 <HAL_HalfDuplex_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 fb68 	bl	8002d74 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	685a      	ldr	r2, [r3, #4]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	689a      	ldr	r2, [r3, #8]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80026c2:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	689a      	ldr	r2, [r3, #8]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f042 0208 	orr.w	r2, r2, #8
 80026d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f042 0201 	orr.w	r2, r2, #1
 80026e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f000 fbe7 	bl	8002eb8 <UART_CheckIdleState>
 80026ea:	4603      	mov	r3, r0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3708      	adds	r7, #8
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b08a      	sub	sp, #40	; 0x28
 80026f8:	af02      	add	r7, sp, #8
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	603b      	str	r3, [r7, #0]
 8002700:	4613      	mov	r3, r2
 8002702:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002708:	2b20      	cmp	r3, #32
 800270a:	f040 8082 	bne.w	8002812 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d002      	beq.n	800271a <HAL_UART_Transmit+0x26>
 8002714:	88fb      	ldrh	r3, [r7, #6]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d101      	bne.n	800271e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e07a      	b.n	8002814 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002724:	2b01      	cmp	r3, #1
 8002726:	d101      	bne.n	800272c <HAL_UART_Transmit+0x38>
 8002728:	2302      	movs	r3, #2
 800272a:	e073      	b.n	8002814 <HAL_UART_Transmit+0x120>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2200      	movs	r2, #0
 8002738:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2221      	movs	r2, #33	; 0x21
 8002740:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002742:	f7fe f911 	bl	8000968 <HAL_GetTick>
 8002746:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	88fa      	ldrh	r2, [r7, #6]
 800274c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	88fa      	ldrh	r2, [r7, #6]
 8002754:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002760:	d108      	bne.n	8002774 <HAL_UART_Transmit+0x80>
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d104      	bne.n	8002774 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800276a:	2300      	movs	r3, #0
 800276c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	61bb      	str	r3, [r7, #24]
 8002772:	e003      	b.n	800277c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002778:	2300      	movs	r3, #0
 800277a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002784:	e02d      	b.n	80027e2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	9300      	str	r3, [sp, #0]
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	2200      	movs	r2, #0
 800278e:	2180      	movs	r1, #128	; 0x80
 8002790:	68f8      	ldr	r0, [r7, #12]
 8002792:	f000 fbda 	bl	8002f4a <UART_WaitOnFlagUntilTimeout>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e039      	b.n	8002814 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d10b      	bne.n	80027be <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	881a      	ldrh	r2, [r3, #0]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027b2:	b292      	uxth	r2, r2
 80027b4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	3302      	adds	r3, #2
 80027ba:	61bb      	str	r3, [r7, #24]
 80027bc:	e008      	b.n	80027d0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	781a      	ldrb	r2, [r3, #0]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	b292      	uxth	r2, r2
 80027c8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	3301      	adds	r3, #1
 80027ce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	3b01      	subs	r3, #1
 80027da:	b29a      	uxth	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d1cb      	bne.n	8002786 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	9300      	str	r3, [sp, #0]
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	2200      	movs	r2, #0
 80027f6:	2140      	movs	r1, #64	; 0x40
 80027f8:	68f8      	ldr	r0, [r7, #12]
 80027fa:	f000 fba6 	bl	8002f4a <UART_WaitOnFlagUntilTimeout>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e005      	b.n	8002814 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2220      	movs	r2, #32
 800280c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800280e:	2300      	movs	r3, #0
 8002810:	e000      	b.n	8002814 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002812:	2302      	movs	r3, #2
  }
}
 8002814:	4618      	mov	r0, r3
 8002816:	3720      	adds	r7, #32
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b08a      	sub	sp, #40	; 0x28
 8002820:	af02      	add	r7, sp, #8
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	603b      	str	r3, [r7, #0]
 8002828:	4613      	mov	r3, r2
 800282a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002830:	2b20      	cmp	r3, #32
 8002832:	f040 80bf 	bne.w	80029b4 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d002      	beq.n	8002842 <HAL_UART_Receive+0x26>
 800283c:	88fb      	ldrh	r3, [r7, #6]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e0b7      	b.n	80029b6 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800284c:	2b01      	cmp	r3, #1
 800284e:	d101      	bne.n	8002854 <HAL_UART_Receive+0x38>
 8002850:	2302      	movs	r3, #2
 8002852:	e0b0      	b.n	80029b6 <HAL_UART_Receive+0x19a>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2200      	movs	r2, #0
 8002860:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2222      	movs	r2, #34	; 0x22
 8002868:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2200      	movs	r2, #0
 800286e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002870:	f7fe f87a 	bl	8000968 <HAL_GetTick>
 8002874:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	88fa      	ldrh	r2, [r7, #6]
 800287a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	88fa      	ldrh	r2, [r7, #6]
 8002882:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800288e:	d10e      	bne.n	80028ae <HAL_UART_Receive+0x92>
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	691b      	ldr	r3, [r3, #16]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d105      	bne.n	80028a4 <HAL_UART_Receive+0x88>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800289e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80028a2:	e02d      	b.n	8002900 <HAL_UART_Receive+0xe4>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	22ff      	movs	r2, #255	; 0xff
 80028a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80028ac:	e028      	b.n	8002900 <HAL_UART_Receive+0xe4>
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d10d      	bne.n	80028d2 <HAL_UART_Receive+0xb6>
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d104      	bne.n	80028c8 <HAL_UART_Receive+0xac>
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	22ff      	movs	r2, #255	; 0xff
 80028c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80028c6:	e01b      	b.n	8002900 <HAL_UART_Receive+0xe4>
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	227f      	movs	r2, #127	; 0x7f
 80028cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80028d0:	e016      	b.n	8002900 <HAL_UART_Receive+0xe4>
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028da:	d10d      	bne.n	80028f8 <HAL_UART_Receive+0xdc>
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	691b      	ldr	r3, [r3, #16]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d104      	bne.n	80028ee <HAL_UART_Receive+0xd2>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	227f      	movs	r2, #127	; 0x7f
 80028e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80028ec:	e008      	b.n	8002900 <HAL_UART_Receive+0xe4>
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	223f      	movs	r2, #63	; 0x3f
 80028f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80028f6:	e003      	b.n	8002900 <HAL_UART_Receive+0xe4>
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002906:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002910:	d108      	bne.n	8002924 <HAL_UART_Receive+0x108>
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d104      	bne.n	8002924 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800291a:	2300      	movs	r3, #0
 800291c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	61bb      	str	r3, [r7, #24]
 8002922:	e003      	b.n	800292c <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002928:	2300      	movs	r3, #0
 800292a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002934:	e033      	b.n	800299e <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	9300      	str	r3, [sp, #0]
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	2200      	movs	r2, #0
 800293e:	2120      	movs	r1, #32
 8002940:	68f8      	ldr	r0, [r7, #12]
 8002942:	f000 fb02 	bl	8002f4a <UART_WaitOnFlagUntilTimeout>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e032      	b.n	80029b6 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d10c      	bne.n	8002970 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800295c:	b29a      	uxth	r2, r3
 800295e:	8a7b      	ldrh	r3, [r7, #18]
 8002960:	4013      	ands	r3, r2
 8002962:	b29a      	uxth	r2, r3
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	3302      	adds	r3, #2
 800296c:	61bb      	str	r3, [r7, #24]
 800296e:	e00d      	b.n	800298c <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002976:	b29b      	uxth	r3, r3
 8002978:	b2da      	uxtb	r2, r3
 800297a:	8a7b      	ldrh	r3, [r7, #18]
 800297c:	b2db      	uxtb	r3, r3
 800297e:	4013      	ands	r3, r2
 8002980:	b2da      	uxtb	r2, r3
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	3301      	adds	r3, #1
 800298a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002992:	b29b      	uxth	r3, r3
 8002994:	3b01      	subs	r3, #1
 8002996:	b29a      	uxth	r2, r3
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d1c5      	bne.n	8002936 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2220      	movs	r2, #32
 80029ae:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80029b0:	2300      	movs	r3, #0
 80029b2:	e000      	b.n	80029b6 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 80029b4:	2302      	movs	r3, #2
  }
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3720      	adds	r7, #32
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 80029be:	b480      	push	{r7}
 80029c0:	b08f      	sub	sp, #60	; 0x3c
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d101      	bne.n	80029d4 <HAL_HalfDuplex_EnableTransmitter+0x16>
 80029d0:	2302      	movs	r3, #2
 80029d2:	e040      	b.n	8002a56 <HAL_HalfDuplex_EnableTransmitter+0x98>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  huart->gState = HAL_UART_STATE_BUSY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2224      	movs	r2, #36	; 0x24
 80029e0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029e8:	6a3b      	ldr	r3, [r7, #32]
 80029ea:	e853 3f00 	ldrex	r3, [r3]
 80029ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	f023 030c 	bic.w	r3, r3, #12
 80029f6:	637b      	str	r3, [r7, #52]	; 0x34
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	461a      	mov	r2, r3
 80029fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a02:	62ba      	str	r2, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a08:	e841 2300 	strex	r3, r2, [r1]
 8002a0c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1e6      	bne.n	80029e2 <HAL_HalfDuplex_EnableTransmitter+0x24>

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	e853 3f00 	ldrex	r3, [r3]
 8002a20:	60bb      	str	r3, [r7, #8]
   return(result);
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	f043 0308 	orr.w	r3, r3, #8
 8002a28:	633b      	str	r3, [r7, #48]	; 0x30
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	461a      	mov	r2, r3
 8002a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a32:	61bb      	str	r3, [r7, #24]
 8002a34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a36:	6979      	ldr	r1, [r7, #20]
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	e841 2300 	strex	r3, r2, [r1]
 8002a3e:	613b      	str	r3, [r7, #16]
   return(result);
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d1e6      	bne.n	8002a14 <HAL_HalfDuplex_EnableTransmitter+0x56>

  huart->gState = HAL_UART_STATE_READY;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2220      	movs	r2, #32
 8002a4a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	373c      	adds	r7, #60	; 0x3c
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr

08002a62 <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 8002a62:	b480      	push	{r7}
 8002a64:	b08f      	sub	sp, #60	; 0x3c
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d101      	bne.n	8002a78 <HAL_HalfDuplex_EnableReceiver+0x16>
 8002a74:	2302      	movs	r3, #2
 8002a76:	e040      	b.n	8002afa <HAL_HalfDuplex_EnableReceiver+0x98>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  huart->gState = HAL_UART_STATE_BUSY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2224      	movs	r2, #36	; 0x24
 8002a84:	679a      	str	r2, [r3, #120]	; 0x78

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a8c:	6a3b      	ldr	r3, [r7, #32]
 8002a8e:	e853 3f00 	ldrex	r3, [r3]
 8002a92:	61fb      	str	r3, [r7, #28]
   return(result);
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	f023 030c 	bic.w	r3, r3, #12
 8002a9a:	637b      	str	r3, [r7, #52]	; 0x34
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002aa6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aa8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002aaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002aac:	e841 2300 	strex	r3, r2, [r1]
 8002ab0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d1e6      	bne.n	8002a86 <HAL_HalfDuplex_EnableReceiver+0x24>

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	e853 3f00 	ldrex	r3, [r3]
 8002ac4:	60bb      	str	r3, [r7, #8]
   return(result);
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	f043 0304 	orr.w	r3, r3, #4
 8002acc:	633b      	str	r3, [r7, #48]	; 0x30
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad6:	61bb      	str	r3, [r7, #24]
 8002ad8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ada:	6979      	ldr	r1, [r7, #20]
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	e841 2300 	strex	r3, r2, [r1]
 8002ae2:	613b      	str	r3, [r7, #16]
   return(result);
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1e6      	bne.n	8002ab8 <HAL_HalfDuplex_EnableReceiver+0x56>

  huart->gState = HAL_UART_STATE_READY;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2220      	movs	r2, #32
 8002aee:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	373c      	adds	r7, #60	; 0x3c
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
	...

08002b08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b088      	sub	sp, #32
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b10:	2300      	movs	r3, #0
 8002b12:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689a      	ldr	r2, [r3, #8]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	431a      	orrs	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	431a      	orrs	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	69db      	ldr	r3, [r3, #28]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	4b8a      	ldr	r3, [pc, #552]	; (8002d5c <UART_SetConfig+0x254>)
 8002b34:	4013      	ands	r3, r2
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	6812      	ldr	r2, [r2, #0]
 8002b3a:	6979      	ldr	r1, [r7, #20]
 8002b3c:	430b      	orrs	r3, r1
 8002b3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	68da      	ldr	r2, [r3, #12]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	430a      	orrs	r2, r1
 8002b54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a1b      	ldr	r3, [r3, #32]
 8002b60:	697a      	ldr	r2, [r7, #20]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	697a      	ldr	r2, [r7, #20]
 8002b76:	430a      	orrs	r2, r1
 8002b78:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a78      	ldr	r2, [pc, #480]	; (8002d60 <UART_SetConfig+0x258>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d120      	bne.n	8002bc6 <UART_SetConfig+0xbe>
 8002b84:	4b77      	ldr	r3, [pc, #476]	; (8002d64 <UART_SetConfig+0x25c>)
 8002b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b88:	f003 0303 	and.w	r3, r3, #3
 8002b8c:	2b03      	cmp	r3, #3
 8002b8e:	d817      	bhi.n	8002bc0 <UART_SetConfig+0xb8>
 8002b90:	a201      	add	r2, pc, #4	; (adr r2, 8002b98 <UART_SetConfig+0x90>)
 8002b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b96:	bf00      	nop
 8002b98:	08002ba9 	.word	0x08002ba9
 8002b9c:	08002bb5 	.word	0x08002bb5
 8002ba0:	08002bbb 	.word	0x08002bbb
 8002ba4:	08002baf 	.word	0x08002baf
 8002ba8:	2300      	movs	r3, #0
 8002baa:	77fb      	strb	r3, [r7, #31]
 8002bac:	e01d      	b.n	8002bea <UART_SetConfig+0xe2>
 8002bae:	2302      	movs	r3, #2
 8002bb0:	77fb      	strb	r3, [r7, #31]
 8002bb2:	e01a      	b.n	8002bea <UART_SetConfig+0xe2>
 8002bb4:	2304      	movs	r3, #4
 8002bb6:	77fb      	strb	r3, [r7, #31]
 8002bb8:	e017      	b.n	8002bea <UART_SetConfig+0xe2>
 8002bba:	2308      	movs	r3, #8
 8002bbc:	77fb      	strb	r3, [r7, #31]
 8002bbe:	e014      	b.n	8002bea <UART_SetConfig+0xe2>
 8002bc0:	2310      	movs	r3, #16
 8002bc2:	77fb      	strb	r3, [r7, #31]
 8002bc4:	e011      	b.n	8002bea <UART_SetConfig+0xe2>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a67      	ldr	r2, [pc, #412]	; (8002d68 <UART_SetConfig+0x260>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d102      	bne.n	8002bd6 <UART_SetConfig+0xce>
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	77fb      	strb	r3, [r7, #31]
 8002bd4:	e009      	b.n	8002bea <UART_SetConfig+0xe2>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a64      	ldr	r2, [pc, #400]	; (8002d6c <UART_SetConfig+0x264>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d102      	bne.n	8002be6 <UART_SetConfig+0xde>
 8002be0:	2300      	movs	r3, #0
 8002be2:	77fb      	strb	r3, [r7, #31]
 8002be4:	e001      	b.n	8002bea <UART_SetConfig+0xe2>
 8002be6:	2310      	movs	r3, #16
 8002be8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	69db      	ldr	r3, [r3, #28]
 8002bee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bf2:	d15b      	bne.n	8002cac <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8002bf4:	7ffb      	ldrb	r3, [r7, #31]
 8002bf6:	2b08      	cmp	r3, #8
 8002bf8:	d827      	bhi.n	8002c4a <UART_SetConfig+0x142>
 8002bfa:	a201      	add	r2, pc, #4	; (adr r2, 8002c00 <UART_SetConfig+0xf8>)
 8002bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c00:	08002c25 	.word	0x08002c25
 8002c04:	08002c2d 	.word	0x08002c2d
 8002c08:	08002c35 	.word	0x08002c35
 8002c0c:	08002c4b 	.word	0x08002c4b
 8002c10:	08002c3b 	.word	0x08002c3b
 8002c14:	08002c4b 	.word	0x08002c4b
 8002c18:	08002c4b 	.word	0x08002c4b
 8002c1c:	08002c4b 	.word	0x08002c4b
 8002c20:	08002c43 	.word	0x08002c43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c24:	f7ff fb58 	bl	80022d8 <HAL_RCC_GetPCLK1Freq>
 8002c28:	61b8      	str	r0, [r7, #24]
        break;
 8002c2a:	e013      	b.n	8002c54 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c2c:	f7ff fb76 	bl	800231c <HAL_RCC_GetPCLK2Freq>
 8002c30:	61b8      	str	r0, [r7, #24]
        break;
 8002c32:	e00f      	b.n	8002c54 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c34:	4b4e      	ldr	r3, [pc, #312]	; (8002d70 <UART_SetConfig+0x268>)
 8002c36:	61bb      	str	r3, [r7, #24]
        break;
 8002c38:	e00c      	b.n	8002c54 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c3a:	f7ff fad7 	bl	80021ec <HAL_RCC_GetSysClockFreq>
 8002c3e:	61b8      	str	r0, [r7, #24]
        break;
 8002c40:	e008      	b.n	8002c54 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c46:	61bb      	str	r3, [r7, #24]
        break;
 8002c48:	e004      	b.n	8002c54 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	77bb      	strb	r3, [r7, #30]
        break;
 8002c52:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d074      	beq.n	8002d44 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	005a      	lsls	r2, r3, #1
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	085b      	lsrs	r3, r3, #1
 8002c64:	441a      	add	r2, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	2b0f      	cmp	r3, #15
 8002c76:	d916      	bls.n	8002ca6 <UART_SetConfig+0x19e>
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c7e:	d212      	bcs.n	8002ca6 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	f023 030f 	bic.w	r3, r3, #15
 8002c88:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	085b      	lsrs	r3, r3, #1
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	f003 0307 	and.w	r3, r3, #7
 8002c94:	b29a      	uxth	r2, r3
 8002c96:	89fb      	ldrh	r3, [r7, #14]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	89fa      	ldrh	r2, [r7, #14]
 8002ca2:	60da      	str	r2, [r3, #12]
 8002ca4:	e04e      	b.n	8002d44 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	77bb      	strb	r3, [r7, #30]
 8002caa:	e04b      	b.n	8002d44 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002cac:	7ffb      	ldrb	r3, [r7, #31]
 8002cae:	2b08      	cmp	r3, #8
 8002cb0:	d827      	bhi.n	8002d02 <UART_SetConfig+0x1fa>
 8002cb2:	a201      	add	r2, pc, #4	; (adr r2, 8002cb8 <UART_SetConfig+0x1b0>)
 8002cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cb8:	08002cdd 	.word	0x08002cdd
 8002cbc:	08002ce5 	.word	0x08002ce5
 8002cc0:	08002ced 	.word	0x08002ced
 8002cc4:	08002d03 	.word	0x08002d03
 8002cc8:	08002cf3 	.word	0x08002cf3
 8002ccc:	08002d03 	.word	0x08002d03
 8002cd0:	08002d03 	.word	0x08002d03
 8002cd4:	08002d03 	.word	0x08002d03
 8002cd8:	08002cfb 	.word	0x08002cfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cdc:	f7ff fafc 	bl	80022d8 <HAL_RCC_GetPCLK1Freq>
 8002ce0:	61b8      	str	r0, [r7, #24]
        break;
 8002ce2:	e013      	b.n	8002d0c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ce4:	f7ff fb1a 	bl	800231c <HAL_RCC_GetPCLK2Freq>
 8002ce8:	61b8      	str	r0, [r7, #24]
        break;
 8002cea:	e00f      	b.n	8002d0c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002cec:	4b20      	ldr	r3, [pc, #128]	; (8002d70 <UART_SetConfig+0x268>)
 8002cee:	61bb      	str	r3, [r7, #24]
        break;
 8002cf0:	e00c      	b.n	8002d0c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cf2:	f7ff fa7b 	bl	80021ec <HAL_RCC_GetSysClockFreq>
 8002cf6:	61b8      	str	r0, [r7, #24]
        break;
 8002cf8:	e008      	b.n	8002d0c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002cfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cfe:	61bb      	str	r3, [r7, #24]
        break;
 8002d00:	e004      	b.n	8002d0c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002d02:	2300      	movs	r3, #0
 8002d04:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	77bb      	strb	r3, [r7, #30]
        break;
 8002d0a:	bf00      	nop
    }

    if (pclk != 0U)
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d018      	beq.n	8002d44 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	085a      	lsrs	r2, r3, #1
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	441a      	add	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	2b0f      	cmp	r3, #15
 8002d2c:	d908      	bls.n	8002d40 <UART_SetConfig+0x238>
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d34:	d204      	bcs.n	8002d40 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	60da      	str	r2, [r3, #12]
 8002d3e:	e001      	b.n	8002d44 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002d50:	7fbb      	ldrb	r3, [r7, #30]
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3720      	adds	r7, #32
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	efff69f3 	.word	0xefff69f3
 8002d60:	40013800 	.word	0x40013800
 8002d64:	40021000 	.word	0x40021000
 8002d68:	40004400 	.word	0x40004400
 8002d6c:	40004800 	.word	0x40004800
 8002d70:	007a1200 	.word	0x007a1200

08002d74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d80:	f003 0301 	and.w	r3, r3, #1
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d00a      	beq.n	8002d9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00a      	beq.n	8002dc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc4:	f003 0304 	and.w	r3, r3, #4
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d00a      	beq.n	8002de2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	430a      	orrs	r2, r1
 8002de0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de6:	f003 0308 	and.w	r3, r3, #8
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00a      	beq.n	8002e04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	430a      	orrs	r2, r1
 8002e02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e08:	f003 0310 	and.w	r3, r3, #16
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d00a      	beq.n	8002e26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	430a      	orrs	r2, r1
 8002e24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2a:	f003 0320 	and.w	r3, r3, #32
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00a      	beq.n	8002e48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	430a      	orrs	r2, r1
 8002e46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d01a      	beq.n	8002e8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	430a      	orrs	r2, r1
 8002e68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e72:	d10a      	bne.n	8002e8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	430a      	orrs	r2, r1
 8002e88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00a      	beq.n	8002eac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	605a      	str	r2, [r3, #4]
  }
}
 8002eac:	bf00      	nop
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af02      	add	r7, sp, #8
 8002ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002ec8:	f7fd fd4e 	bl	8000968 <HAL_GetTick>
 8002ecc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0308 	and.w	r3, r3, #8
 8002ed8:	2b08      	cmp	r3, #8
 8002eda:	d10e      	bne.n	8002efa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002edc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002ee0:	9300      	str	r3, [sp, #0]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 f82d 	bl	8002f4a <UART_WaitOnFlagUntilTimeout>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e023      	b.n	8002f42 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0304 	and.w	r3, r3, #4
 8002f04:	2b04      	cmp	r3, #4
 8002f06:	d10e      	bne.n	8002f26 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002f0c:	9300      	str	r3, [sp, #0]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 f817 	bl	8002f4a <UART_WaitOnFlagUntilTimeout>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e00d      	b.n	8002f42 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2220      	movs	r2, #32
 8002f2a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2220      	movs	r2, #32
 8002f30:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3710      	adds	r7, #16
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	b09c      	sub	sp, #112	; 0x70
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	60f8      	str	r0, [r7, #12]
 8002f52:	60b9      	str	r1, [r7, #8]
 8002f54:	603b      	str	r3, [r7, #0]
 8002f56:	4613      	mov	r3, r2
 8002f58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f5a:	e0a5      	b.n	80030a8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f62:	f000 80a1 	beq.w	80030a8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f66:	f7fd fcff 	bl	8000968 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d302      	bcc.n	8002f7c <UART_WaitOnFlagUntilTimeout+0x32>
 8002f76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d13e      	bne.n	8002ffa <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f84:	e853 3f00 	ldrex	r3, [r3]
 8002f88:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002f8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f8c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002f90:	667b      	str	r3, [r7, #100]	; 0x64
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	461a      	mov	r2, r3
 8002f98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f9c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f9e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002fa0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002fa2:	e841 2300 	strex	r3, r2, [r1]
 8002fa6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002fa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1e6      	bne.n	8002f7c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	3308      	adds	r3, #8
 8002fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fb8:	e853 3f00 	ldrex	r3, [r3]
 8002fbc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc0:	f023 0301 	bic.w	r3, r3, #1
 8002fc4:	663b      	str	r3, [r7, #96]	; 0x60
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	3308      	adds	r3, #8
 8002fcc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002fce:	64ba      	str	r2, [r7, #72]	; 0x48
 8002fd0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fd2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002fd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002fd6:	e841 2300 	strex	r3, r2, [r1]
 8002fda:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002fdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1e5      	bne.n	8002fae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2220      	movs	r2, #32
 8002fe6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2220      	movs	r2, #32
 8002fec:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e067      	b.n	80030ca <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0304 	and.w	r3, r3, #4
 8003004:	2b00      	cmp	r3, #0
 8003006:	d04f      	beq.n	80030a8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	69db      	ldr	r3, [r3, #28]
 800300e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003012:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003016:	d147      	bne.n	80030a8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003020:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800302a:	e853 3f00 	ldrex	r3, [r3]
 800302e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003032:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003036:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	461a      	mov	r2, r3
 800303e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003040:	637b      	str	r3, [r7, #52]	; 0x34
 8003042:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003044:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003046:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003048:	e841 2300 	strex	r3, r2, [r1]
 800304c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800304e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003050:	2b00      	cmp	r3, #0
 8003052:	d1e6      	bne.n	8003022 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	3308      	adds	r3, #8
 800305a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	e853 3f00 	ldrex	r3, [r3]
 8003062:	613b      	str	r3, [r7, #16]
   return(result);
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	f023 0301 	bic.w	r3, r3, #1
 800306a:	66bb      	str	r3, [r7, #104]	; 0x68
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	3308      	adds	r3, #8
 8003072:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003074:	623a      	str	r2, [r7, #32]
 8003076:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003078:	69f9      	ldr	r1, [r7, #28]
 800307a:	6a3a      	ldr	r2, [r7, #32]
 800307c:	e841 2300 	strex	r3, r2, [r1]
 8003080:	61bb      	str	r3, [r7, #24]
   return(result);
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1e5      	bne.n	8003054 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2220      	movs	r2, #32
 800308c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2220      	movs	r2, #32
 8003092:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2220      	movs	r2, #32
 8003098:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e010      	b.n	80030ca <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	69da      	ldr	r2, [r3, #28]
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	4013      	ands	r3, r2
 80030b2:	68ba      	ldr	r2, [r7, #8]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	bf0c      	ite	eq
 80030b8:	2301      	moveq	r3, #1
 80030ba:	2300      	movne	r3, #0
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	461a      	mov	r2, r3
 80030c0:	79fb      	ldrb	r3, [r7, #7]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	f43f af4a 	beq.w	8002f5c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3770      	adds	r7, #112	; 0x70
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
	...

080030d4 <tmc_fillCRC8Table>:
 *     This allows us to simply store the lowest byte of the uint32_t,
 *     right-shift the uint32_t by 8 and increment the table pointer.
 *     After 4 iterations of that all 4 bytes of the uint32_t are stored in the table.
 */
uint8_t tmc_fillCRC8Table(uint8_t polynomial, bool isReflected, uint8_t index)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b088      	sub	sp, #32
 80030d8:	af00      	add	r7, sp, #0
 80030da:	4603      	mov	r3, r0
 80030dc:	71fb      	strb	r3, [r7, #7]
 80030de:	460b      	mov	r3, r1
 80030e0:	71bb      	strb	r3, [r7, #6]
 80030e2:	4613      	mov	r3, r2
 80030e4:	717b      	strb	r3, [r7, #5]
	uint32_t CRCdata;
	// Helper pointer for traversing the result table
	uint8_t *table;

	if(index >= CRC_TABLE_COUNT)
 80030e6:	797b      	ldrb	r3, [r7, #5]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d901      	bls.n	80030f0 <tmc_fillCRC8Table+0x1c>
		return 0;
 80030ec:	2300      	movs	r3, #0
 80030ee:	e09e      	b.n	800322e <tmc_fillCRC8Table+0x15a>

	CRCTables[index].polynomial   = polynomial;
 80030f0:	797a      	ldrb	r2, [r7, #5]
 80030f2:	4951      	ldr	r1, [pc, #324]	; (8003238 <tmc_fillCRC8Table+0x164>)
 80030f4:	4613      	mov	r3, r2
 80030f6:	01db      	lsls	r3, r3, #7
 80030f8:	4413      	add	r3, r2
 80030fa:	005b      	lsls	r3, r3, #1
 80030fc:	440b      	add	r3, r1
 80030fe:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003102:	79fa      	ldrb	r2, [r7, #7]
 8003104:	701a      	strb	r2, [r3, #0]
	CRCTables[index].isReflected  = isReflected;
 8003106:	797a      	ldrb	r2, [r7, #5]
 8003108:	494b      	ldr	r1, [pc, #300]	; (8003238 <tmc_fillCRC8Table+0x164>)
 800310a:	4613      	mov	r3, r2
 800310c:	01db      	lsls	r3, r3, #7
 800310e:	4413      	add	r3, r2
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	440b      	add	r3, r1
 8003114:	f203 1301 	addw	r3, r3, #257	; 0x101
 8003118:	79ba      	ldrb	r2, [r7, #6]
 800311a:	701a      	strb	r2, [r3, #0]
	table = &CRCTables[index].table[0];
 800311c:	797a      	ldrb	r2, [r7, #5]
 800311e:	4613      	mov	r3, r2
 8003120:	01db      	lsls	r3, r3, #7
 8003122:	4413      	add	r3, r2
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	4a44      	ldr	r2, [pc, #272]	; (8003238 <tmc_fillCRC8Table+0x164>)
 8003128:	4413      	add	r3, r2
 800312a:	61bb      	str	r3, [r7, #24]

	// Extend the polynomial to correct byte MSBs shifting into next bytes
	uint32_t poly = (uint32_t) polynomial | 0x0100;
 800312c:	79fb      	ldrb	r3, [r7, #7]
 800312e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003132:	60fb      	str	r3, [r7, #12]

	// Iterate over all 256 possible uint8_t values, compressed into a uint32_t (see detailed explanation above)
	uint32_t i;
	for(i = 0x03020100; i != 0x04030200; i+=0x04040404)
 8003134:	4b41      	ldr	r3, [pc, #260]	; (800323c <tmc_fillCRC8Table+0x168>)
 8003136:	617b      	str	r3, [r7, #20]
 8003138:	e074      	b.n	8003224 <tmc_fillCRC8Table+0x150>
	{
		// For reflected table: Flip the bits of each input byte
		CRCdata = (isReflected)? flipBitsInBytes(i) : i;
 800313a:	79bb      	ldrb	r3, [r7, #6]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d004      	beq.n	800314a <tmc_fillCRC8Table+0x76>
 8003140:	6978      	ldr	r0, [r7, #20]
 8003142:	f000 f8f7 	bl	8003334 <flipBitsInBytes>
 8003146:	4603      	mov	r3, r0
 8003148:	e000      	b.n	800314c <tmc_fillCRC8Table+0x78>
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	61fb      	str	r3, [r7, #28]

		// Iterate over 8 Bits
		int j;
		for(j = 0; j < 8; j++)
 800314e:	2300      	movs	r3, #0
 8003150:	613b      	str	r3, [r7, #16]
 8003152:	e035      	b.n	80031c0 <tmc_fillCRC8Table+0xec>
		{
			// Store value of soon-to-be shifted out byte
			uint8_t isMSBSet = (CRCdata & 0x80000000)? 1:0;
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	0fdb      	lsrs	r3, r3, #31
 8003158:	72fb      	strb	r3, [r7, #11]

			// CRC Shift
			CRCdata <<= 1;
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	61fb      	str	r3, [r7, #28]

			// XOR the bytes when required, lowest to highest
			CRCdata ^= (CRCdata & 0x00000100)? (poly      ) : 0;
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <tmc_fillCRC8Table+0x9a>
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	e000      	b.n	8003170 <tmc_fillCRC8Table+0x9c>
 800316e:	2300      	movs	r3, #0
 8003170:	69fa      	ldr	r2, [r7, #28]
 8003172:	4053      	eors	r3, r2
 8003174:	61fb      	str	r3, [r7, #28]
			CRCdata ^= (CRCdata & 0x00010000)? (poly << 8 ) : 0;
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d002      	beq.n	8003186 <tmc_fillCRC8Table+0xb2>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	021b      	lsls	r3, r3, #8
 8003184:	e000      	b.n	8003188 <tmc_fillCRC8Table+0xb4>
 8003186:	2300      	movs	r3, #0
 8003188:	69fa      	ldr	r2, [r7, #28]
 800318a:	4053      	eors	r3, r2
 800318c:	61fb      	str	r3, [r7, #28]
			CRCdata ^= (CRCdata & 0x01000000)? (poly << 16) : 0;
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d002      	beq.n	800319e <tmc_fillCRC8Table+0xca>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	041b      	lsls	r3, r3, #16
 800319c:	e000      	b.n	80031a0 <tmc_fillCRC8Table+0xcc>
 800319e:	2300      	movs	r3, #0
 80031a0:	69fa      	ldr	r2, [r7, #28]
 80031a2:	4053      	eors	r3, r2
 80031a4:	61fb      	str	r3, [r7, #28]
			CRCdata ^= (isMSBSet)?             (poly << 24) : 0;
 80031a6:	7afb      	ldrb	r3, [r7, #11]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d002      	beq.n	80031b2 <tmc_fillCRC8Table+0xde>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	061b      	lsls	r3, r3, #24
 80031b0:	e000      	b.n	80031b4 <tmc_fillCRC8Table+0xe0>
 80031b2:	2300      	movs	r3, #0
 80031b4:	69fa      	ldr	r2, [r7, #28]
 80031b6:	4053      	eors	r3, r2
 80031b8:	61fb      	str	r3, [r7, #28]
		for(j = 0; j < 8; j++)
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	3301      	adds	r3, #1
 80031be:	613b      	str	r3, [r7, #16]
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	2b07      	cmp	r3, #7
 80031c4:	ddc6      	ble.n	8003154 <tmc_fillCRC8Table+0x80>
		}

		// For reflected table: Flip the bits of each output byte
		CRCdata = (isReflected)? flipBitsInBytes(CRCdata) : CRCdata;
 80031c6:	79bb      	ldrb	r3, [r7, #6]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d004      	beq.n	80031d6 <tmc_fillCRC8Table+0x102>
 80031cc:	69f8      	ldr	r0, [r7, #28]
 80031ce:	f000 f8b1 	bl	8003334 <flipBitsInBytes>
 80031d2:	4603      	mov	r3, r0
 80031d4:	e000      	b.n	80031d8 <tmc_fillCRC8Table+0x104>
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	61fb      	str	r3, [r7, #28]
		// Store the CRC result bytes in the table array
		*table++ = (uint8_t) CRCdata;
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	1c5a      	adds	r2, r3, #1
 80031de:	61ba      	str	r2, [r7, #24]
 80031e0:	69fa      	ldr	r2, [r7, #28]
 80031e2:	b2d2      	uxtb	r2, r2
 80031e4:	701a      	strb	r2, [r3, #0]
		CRCdata >>= 8;
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	0a1b      	lsrs	r3, r3, #8
 80031ea:	61fb      	str	r3, [r7, #28]
		*table++ = (uint8_t) CRCdata;
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	1c5a      	adds	r2, r3, #1
 80031f0:	61ba      	str	r2, [r7, #24]
 80031f2:	69fa      	ldr	r2, [r7, #28]
 80031f4:	b2d2      	uxtb	r2, r2
 80031f6:	701a      	strb	r2, [r3, #0]
		CRCdata >>= 8;
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	0a1b      	lsrs	r3, r3, #8
 80031fc:	61fb      	str	r3, [r7, #28]
		*table++ = (uint8_t) CRCdata;
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	1c5a      	adds	r2, r3, #1
 8003202:	61ba      	str	r2, [r7, #24]
 8003204:	69fa      	ldr	r2, [r7, #28]
 8003206:	b2d2      	uxtb	r2, r2
 8003208:	701a      	strb	r2, [r3, #0]
		CRCdata >>= 8;
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	0a1b      	lsrs	r3, r3, #8
 800320e:	61fb      	str	r3, [r7, #28]
		*table++ = (uint8_t) CRCdata;
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	1c5a      	adds	r2, r3, #1
 8003214:	61ba      	str	r2, [r7, #24]
 8003216:	69fa      	ldr	r2, [r7, #28]
 8003218:	b2d2      	uxtb	r2, r2
 800321a:	701a      	strb	r2, [r3, #0]
	for(i = 0x03020100; i != 0x04030200; i+=0x04040404)
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
 8003222:	617b      	str	r3, [r7, #20]
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	4a06      	ldr	r2, [pc, #24]	; (8003240 <tmc_fillCRC8Table+0x16c>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d186      	bne.n	800313a <tmc_fillCRC8Table+0x66>
	}

	return 1;
 800322c:	2301      	movs	r3, #1
}
 800322e:	4618      	mov	r0, r3
 8003230:	3720      	adds	r7, #32
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	20000638 	.word	0x20000638
 800323c:	03020100 	.word	0x03020100
 8003240:	04030200 	.word	0x04030200

08003244 <tmc_CRC8>:
 *     uint8_t *data: A pointer to the data that will be CRC'd.
 *     uint32_t bytes: The length of the data buffer.
 *     uint8_t index: The index of the CRC table to be used.
 */
uint8_t tmc_CRC8(uint8_t *data, uint32_t bytes, uint8_t index)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b086      	sub	sp, #24
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	4613      	mov	r3, r2
 8003250:	71fb      	strb	r3, [r7, #7]
	uint8_t result = 0;
 8003252:	2300      	movs	r3, #0
 8003254:	75fb      	strb	r3, [r7, #23]
	uint8_t *table;

	if(index >= CRC_TABLE_COUNT)
 8003256:	79fb      	ldrb	r3, [r7, #7]
 8003258:	2b01      	cmp	r3, #1
 800325a:	d901      	bls.n	8003260 <tmc_CRC8+0x1c>
		return 0;
 800325c:	2300      	movs	r3, #0
 800325e:	e02c      	b.n	80032ba <tmc_CRC8+0x76>

	table = &CRCTables[index].table[0];
 8003260:	79fa      	ldrb	r2, [r7, #7]
 8003262:	4613      	mov	r3, r2
 8003264:	01db      	lsls	r3, r3, #7
 8003266:	4413      	add	r3, r2
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	4a16      	ldr	r2, [pc, #88]	; (80032c4 <tmc_CRC8+0x80>)
 800326c:	4413      	add	r3, r2
 800326e:	613b      	str	r3, [r7, #16]

	while(bytes--)
 8003270:	e00b      	b.n	800328a <tmc_CRC8+0x46>
		result = table[result ^ *data++];
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	1c5a      	adds	r2, r3, #1
 8003276:	60fa      	str	r2, [r7, #12]
 8003278:	781a      	ldrb	r2, [r3, #0]
 800327a:	7dfb      	ldrb	r3, [r7, #23]
 800327c:	4053      	eors	r3, r2
 800327e:	b2db      	uxtb	r3, r3
 8003280:	461a      	mov	r2, r3
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	4413      	add	r3, r2
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	75fb      	strb	r3, [r7, #23]
	while(bytes--)
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	1e5a      	subs	r2, r3, #1
 800328e:	60ba      	str	r2, [r7, #8]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d1ee      	bne.n	8003272 <tmc_CRC8+0x2e>

	return (CRCTables[index].isReflected)? flipByte(result) : result;
 8003294:	79fa      	ldrb	r2, [r7, #7]
 8003296:	490b      	ldr	r1, [pc, #44]	; (80032c4 <tmc_CRC8+0x80>)
 8003298:	4613      	mov	r3, r2
 800329a:	01db      	lsls	r3, r3, #7
 800329c:	4413      	add	r3, r2
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	440b      	add	r3, r1
 80032a2:	f203 1301 	addw	r3, r3, #257	; 0x101
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d005      	beq.n	80032b8 <tmc_CRC8+0x74>
 80032ac:	7dfb      	ldrb	r3, [r7, #23]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f000 f80a 	bl	80032c8 <flipByte>
 80032b4:	4603      	mov	r3, r0
 80032b6:	e000      	b.n	80032ba <tmc_CRC8+0x76>
 80032b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3718      	adds	r7, #24
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	20000638 	.word	0x20000638

080032c8 <flipByte>:
	return CRCTables[index].isReflected;
}

// Helper functions
static uint8_t flipByte(uint8_t value)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	4603      	mov	r3, r0
 80032d0:	71fb      	strb	r3, [r7, #7]
	// swap odd and even bits
	value = ((value >> 1) & 0x55) | ((value & 0x55) << 1);
 80032d2:	79fb      	ldrb	r3, [r7, #7]
 80032d4:	085b      	lsrs	r3, r3, #1
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	b25b      	sxtb	r3, r3
 80032da:	f003 0355 	and.w	r3, r3, #85	; 0x55
 80032de:	b25a      	sxtb	r2, r3
 80032e0:	79fb      	ldrb	r3, [r7, #7]
 80032e2:	005b      	lsls	r3, r3, #1
 80032e4:	b25b      	sxtb	r3, r3
 80032e6:	f023 0355 	bic.w	r3, r3, #85	; 0x55
 80032ea:	b25b      	sxtb	r3, r3
 80032ec:	4313      	orrs	r3, r2
 80032ee:	b25b      	sxtb	r3, r3
 80032f0:	71fb      	strb	r3, [r7, #7]
	// swap consecutive pairs
	value = ((value >> 2) & 0x33) | ((value & 0x33) << 2);
 80032f2:	79fb      	ldrb	r3, [r7, #7]
 80032f4:	089b      	lsrs	r3, r3, #2
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	b25b      	sxtb	r3, r3
 80032fa:	f003 0333 	and.w	r3, r3, #51	; 0x33
 80032fe:	b25a      	sxtb	r2, r3
 8003300:	79fb      	ldrb	r3, [r7, #7]
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	b25b      	sxtb	r3, r3
 8003306:	f023 0333 	bic.w	r3, r3, #51	; 0x33
 800330a:	b25b      	sxtb	r3, r3
 800330c:	4313      	orrs	r3, r2
 800330e:	b25b      	sxtb	r3, r3
 8003310:	71fb      	strb	r3, [r7, #7]
	// swap nibbles ...
	value = ((value >> 4) & 0x0F) | ((value & 0x0F) << 4);
 8003312:	79fb      	ldrb	r3, [r7, #7]
 8003314:	091b      	lsrs	r3, r3, #4
 8003316:	b2db      	uxtb	r3, r3
 8003318:	b25a      	sxtb	r2, r3
 800331a:	79fb      	ldrb	r3, [r7, #7]
 800331c:	011b      	lsls	r3, r3, #4
 800331e:	b25b      	sxtb	r3, r3
 8003320:	4313      	orrs	r3, r2
 8003322:	b25b      	sxtb	r3, r3
 8003324:	71fb      	strb	r3, [r7, #7]

	return value;
 8003326:	79fb      	ldrb	r3, [r7, #7]
}
 8003328:	4618      	mov	r0, r3
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <flipBitsInBytes>:
 *                                 \||/
 *                                  \/
 * [b24 b25 b26 b27 b28 b29 b30 b31 .. b0 b1 b2 b3 b4 b5 b6 b7]
 */
static uint32_t flipBitsInBytes(uint32_t value)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
	// swap odd and even bits
	value = ((value >> 1) & 0x55555555) | ((value & 0x55555555) << 1);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	085b      	lsrs	r3, r3, #1
 8003340:	f003 3255 	and.w	r2, r3, #1431655765	; 0x55555555
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	005b      	lsls	r3, r3, #1
 8003348:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 800334c:	4313      	orrs	r3, r2
 800334e:	607b      	str	r3, [r7, #4]
	// swap consecutive pairs
	value = ((value >> 2) & 0x33333333) | ((value & 0x33333333) << 2);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	089b      	lsrs	r3, r3, #2
 8003354:	f003 3233 	and.w	r2, r3, #858993459	; 0x33333333
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	f003 33cc 	and.w	r3, r3, #3435973836	; 0xcccccccc
 8003360:	4313      	orrs	r3, r2
 8003362:	607b      	str	r3, [r7, #4]
	// swap nibbles ...
	value = ((value >> 4) & 0x0F0F0F0F) | ((value & 0x0F0F0F0F) << 4);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	091b      	lsrs	r3, r3, #4
 8003368:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	011b      	lsls	r3, r3, #4
 8003370:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8003374:	4313      	orrs	r3, r2
 8003376:	607b      	str	r3, [r7, #4]

	return value;
 8003378:	687b      	ldr	r3, [r7, #4]
}
 800337a:	4618      	mov	r0, r3
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr

08003386 <tmc2209_readInt>:
	tmc2209->config->shadowRegister[address] = value;
	tmc2209->registerAccess[address] |= TMC_ACCESS_DIRTY;
}

int32_t tmc2209_readInt(TMC2209TypeDef *tmc2209, uint8_t address)
{
 8003386:	b590      	push	{r4, r7, lr}
 8003388:	b085      	sub	sp, #20
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
 800338e:	460b      	mov	r3, r1
 8003390:	70fb      	strb	r3, [r7, #3]
	uint8_t data[8] = { 0 };
 8003392:	2300      	movs	r3, #0
 8003394:	60bb      	str	r3, [r7, #8]
 8003396:	2300      	movs	r3, #0
 8003398:	60fb      	str	r3, [r7, #12]

	address = TMC_ADDRESS(address);
 800339a:	78fb      	ldrb	r3, [r7, #3]
 800339c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033a0:	70fb      	strb	r3, [r7, #3]

	if (!TMC_IS_READABLE(tmc2209->registerAccess[address]))
 80033a2:	78fb      	ldrb	r3, [r7, #3]
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	4413      	add	r3, r2
 80033a8:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 80033ac:	f003 0301 	and.w	r3, r3, #1
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d106      	bne.n	80033c2 <tmc2209_readInt+0x3c>
		return tmc2209->config->shadowRegister[address];
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	78fb      	ldrb	r3, [r7, #3]
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	4413      	add	r3, r2
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	e03f      	b.n	8003442 <tmc2209_readInt+0xbc>

	data[0] = 0x05;
 80033c2:	2305      	movs	r3, #5
 80033c4:	723b      	strb	r3, [r7, #8]
	data[1] = tmc2209->slaveAddress;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f893 3284 	ldrb.w	r3, [r3, #644]	; 0x284
 80033cc:	727b      	strb	r3, [r7, #9]
	data[2] = address;
 80033ce:	78fb      	ldrb	r3, [r7, #3]
 80033d0:	72bb      	strb	r3, [r7, #10]
	data[3] = tmc2209_CRC8(data, 3);
 80033d2:	f107 0308 	add.w	r3, r7, #8
 80033d6:	2103      	movs	r1, #3
 80033d8:	4618      	mov	r0, r3
 80033da:	f7fc ff71 	bl	80002c0 <tmc2209_CRC8>
 80033de:	4603      	mov	r3, r0
 80033e0:	72fb      	strb	r3, [r7, #11]

	tmc2209_readWriteArray(tmc2209->config->channel, data, 4, 8);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
 80033ea:	f107 0108 	add.w	r1, r7, #8
 80033ee:	2308      	movs	r3, #8
 80033f0:	2204      	movs	r2, #4
 80033f2:	f7fc ff3d 	bl	8000270 <tmc2209_readWriteArray>

	// Byte 0: Sync nibble correct?
	if (data[0] != 0x05)
 80033f6:	7a3b      	ldrb	r3, [r7, #8]
 80033f8:	2b05      	cmp	r3, #5
 80033fa:	d001      	beq.n	8003400 <tmc2209_readInt+0x7a>
		return 0;
 80033fc:	2300      	movs	r3, #0
 80033fe:	e020      	b.n	8003442 <tmc2209_readInt+0xbc>

	// Byte 1: Master address correct?
	if (data[1] != 0xFF)
 8003400:	7a7b      	ldrb	r3, [r7, #9]
 8003402:	2bff      	cmp	r3, #255	; 0xff
 8003404:	d001      	beq.n	800340a <tmc2209_readInt+0x84>
		return 0;
 8003406:	2300      	movs	r3, #0
 8003408:	e01b      	b.n	8003442 <tmc2209_readInt+0xbc>

	// Byte 2: Address correct?
	if (data[2] != address)
 800340a:	7abb      	ldrb	r3, [r7, #10]
 800340c:	78fa      	ldrb	r2, [r7, #3]
 800340e:	429a      	cmp	r2, r3
 8003410:	d001      	beq.n	8003416 <tmc2209_readInt+0x90>
		return 0;
 8003412:	2300      	movs	r3, #0
 8003414:	e015      	b.n	8003442 <tmc2209_readInt+0xbc>

	// Byte 7: CRC correct?
	if (data[7] != tmc2209_CRC8(data, 7))
 8003416:	7bfc      	ldrb	r4, [r7, #15]
 8003418:	f107 0308 	add.w	r3, r7, #8
 800341c:	2107      	movs	r1, #7
 800341e:	4618      	mov	r0, r3
 8003420:	f7fc ff4e 	bl	80002c0 <tmc2209_CRC8>
 8003424:	4603      	mov	r3, r0
 8003426:	429c      	cmp	r4, r3
 8003428:	d001      	beq.n	800342e <tmc2209_readInt+0xa8>
		return 0;
 800342a:	2300      	movs	r3, #0
 800342c:	e009      	b.n	8003442 <tmc2209_readInt+0xbc>

	return ((uint32_t)data[3] << 24) | ((uint32_t)data[4] << 16) | (data[5] << 8) | data[6];
 800342e:	7afb      	ldrb	r3, [r7, #11]
 8003430:	061a      	lsls	r2, r3, #24
 8003432:	7b3b      	ldrb	r3, [r7, #12]
 8003434:	041b      	lsls	r3, r3, #16
 8003436:	4313      	orrs	r3, r2
 8003438:	7b7a      	ldrb	r2, [r7, #13]
 800343a:	0212      	lsls	r2, r2, #8
 800343c:	4313      	orrs	r3, r2
 800343e:	7bba      	ldrb	r2, [r7, #14]
 8003440:	4313      	orrs	r3, r2
}
 8003442:	4618      	mov	r0, r3
 8003444:	3714      	adds	r7, #20
 8003446:	46bd      	mov	sp, r7
 8003448:	bd90      	pop	{r4, r7, pc}
	...

0800344c <tmc2209_init>:

void tmc2209_init(TMC2209TypeDef *tmc2209, uint8_t channel, uint8_t slaveAddress, ConfigurationTypeDef *tmc2209_config, const int32_t *registerResetState)
{
 800344c:	b480      	push	{r7}
 800344e:	b087      	sub	sp, #28
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	607b      	str	r3, [r7, #4]
 8003456:	460b      	mov	r3, r1
 8003458:	72fb      	strb	r3, [r7, #11]
 800345a:	4613      	mov	r3, r2
 800345c:	72bb      	strb	r3, [r7, #10]
	tmc2209->slaveAddress = slaveAddress;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	7aba      	ldrb	r2, [r7, #10]
 8003462:	f883 2284 	strb.w	r2, [r3, #644]	; 0x284

	tmc2209->config               = tmc2209_config;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	601a      	str	r2, [r3, #0]
	tmc2209->config->callback     = NULL;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2200      	movs	r2, #0
 8003472:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	tmc2209->config->channel      = channel;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	7afa      	ldrb	r2, [r7, #11]
 800347c:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
	tmc2209->config->configIndex  = 0;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2200      	movs	r2, #0
 8003486:	705a      	strb	r2, [r3, #1]
	tmc2209->config->state        = CONFIG_READY;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2200      	movs	r2, #0
 800348e:	701a      	strb	r2, [r3, #0]

	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 8003490:	2300      	movs	r3, #0
 8003492:	617b      	str	r3, [r7, #20]
 8003494:	e017      	b.n	80034c6 <tmc2209_init+0x7a>
	{
		tmc2209->registerAccess[i]      = tmc2209_defaultRegisterAccess[i];
 8003496:	4a11      	ldr	r2, [pc, #68]	; (80034dc <tmc2209_init+0x90>)
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	4413      	add	r3, r2
 800349c:	7819      	ldrb	r1, [r3, #0]
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	4413      	add	r3, r2
 80034a4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80034a8:	460a      	mov	r2, r1
 80034aa:	701a      	strb	r2, [r3, #0]
		tmc2209->registerResetState[i]  = registerResetState[i];
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	6a3a      	ldr	r2, [r7, #32]
 80034b2:	4413      	add	r3, r2
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	68f9      	ldr	r1, [r7, #12]
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	440b      	add	r3, r1
 80034be:	605a      	str	r2, [r3, #4]
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	3301      	adds	r3, #1
 80034c4:	617b      	str	r3, [r7, #20]
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	2b7f      	cmp	r3, #127	; 0x7f
 80034ca:	d9e4      	bls.n	8003496 <tmc2209_init+0x4a>
	}
}
 80034cc:	bf00      	nop
 80034ce:	bf00      	nop
 80034d0:	371c      	adds	r7, #28
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	08004a18 	.word	0x08004a18

080034e0 <tmc2209_reset>:
{
	tmc2209->config->callback = (tmc_callback_config) callback;
}

uint8_t tmc2209_reset(TMC2209TypeDef *tmc2209)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
	if(tmc2209->config->state != CONFIG_READY)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <tmc2209_reset+0x16>
		return false;
 80034f2:	2300      	movs	r3, #0
 80034f4:	e028      	b.n	8003548 <tmc2209_reset+0x68>

	// Reset the dirty bits and wipe the shadow registers
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 80034f6:	2300      	movs	r3, #0
 80034f8:	60fb      	str	r3, [r7, #12]
 80034fa:	e019      	b.n	8003530 <tmc2209_reset+0x50>
	{
		tmc2209->registerAccess[i] &= ~TMC_ACCESS_DIRTY;
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	4413      	add	r3, r2
 8003502:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	f023 0308 	bic.w	r3, r3, #8
 800350c:	b2d9      	uxtb	r1, r3
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	4413      	add	r3, r2
 8003514:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003518:	460a      	mov	r2, r1
 800351a:	701a      	strb	r2, [r3, #0]
		tmc2209->config->shadowRegister[i] = 0;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	4413      	add	r3, r2
 8003526:	2200      	movs	r2, #0
 8003528:	605a      	str	r2, [r3, #4]
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	3301      	adds	r3, #1
 800352e:	60fb      	str	r3, [r7, #12]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2b7f      	cmp	r3, #127	; 0x7f
 8003534:	d9e2      	bls.n	80034fc <tmc2209_reset+0x1c>
	}

	tmc2209->config->state        = CONFIG_RESET;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2201      	movs	r2, #1
 800353c:	701a      	strb	r2, [r3, #0]
	tmc2209->config->configIndex  = 0;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2200      	movs	r2, #0
 8003544:	705a      	strb	r2, [r3, #1]

	return true;
 8003546:	2301      	movs	r3, #1
}
 8003548:	4618      	mov	r0, r3
 800354a:	3714      	adds	r7, #20
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <tmc2209_restore>:

uint8_t tmc2209_restore(TMC2209TypeDef *tmc2209)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
	if(tmc2209->config->state != CONFIG_READY)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d001      	beq.n	800356a <tmc2209_restore+0x16>
		return false;
 8003566:	2300      	movs	r3, #0
 8003568:	e008      	b.n	800357c <tmc2209_restore+0x28>

	tmc2209->config->state        = CONFIG_RESTORE;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2202      	movs	r2, #2
 8003570:	701a      	strb	r2, [r3, #0]
	tmc2209->config->configIndex  = 0;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2200      	movs	r2, #0
 8003578:	705a      	strb	r2, [r3, #1]

	return true;
 800357a:	2301      	movs	r3, #1
}
 800357c:	4618      	mov	r0, r3
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <__errno>:
 8003588:	4b01      	ldr	r3, [pc, #4]	; (8003590 <__errno+0x8>)
 800358a:	6818      	ldr	r0, [r3, #0]
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	2000000c 	.word	0x2000000c

08003594 <__libc_init_array>:
 8003594:	b570      	push	{r4, r5, r6, lr}
 8003596:	4d0d      	ldr	r5, [pc, #52]	; (80035cc <__libc_init_array+0x38>)
 8003598:	4c0d      	ldr	r4, [pc, #52]	; (80035d0 <__libc_init_array+0x3c>)
 800359a:	1b64      	subs	r4, r4, r5
 800359c:	10a4      	asrs	r4, r4, #2
 800359e:	2600      	movs	r6, #0
 80035a0:	42a6      	cmp	r6, r4
 80035a2:	d109      	bne.n	80035b8 <__libc_init_array+0x24>
 80035a4:	4d0b      	ldr	r5, [pc, #44]	; (80035d4 <__libc_init_array+0x40>)
 80035a6:	4c0c      	ldr	r4, [pc, #48]	; (80035d8 <__libc_init_array+0x44>)
 80035a8:	f001 f8fa 	bl	80047a0 <_init>
 80035ac:	1b64      	subs	r4, r4, r5
 80035ae:	10a4      	asrs	r4, r4, #2
 80035b0:	2600      	movs	r6, #0
 80035b2:	42a6      	cmp	r6, r4
 80035b4:	d105      	bne.n	80035c2 <__libc_init_array+0x2e>
 80035b6:	bd70      	pop	{r4, r5, r6, pc}
 80035b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80035bc:	4798      	blx	r3
 80035be:	3601      	adds	r6, #1
 80035c0:	e7ee      	b.n	80035a0 <__libc_init_array+0xc>
 80035c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80035c6:	4798      	blx	r3
 80035c8:	3601      	adds	r6, #1
 80035ca:	e7f2      	b.n	80035b2 <__libc_init_array+0x1e>
 80035cc:	08004b30 	.word	0x08004b30
 80035d0:	08004b30 	.word	0x08004b30
 80035d4:	08004b30 	.word	0x08004b30
 80035d8:	08004b34 	.word	0x08004b34

080035dc <memset>:
 80035dc:	4402      	add	r2, r0
 80035de:	4603      	mov	r3, r0
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d100      	bne.n	80035e6 <memset+0xa>
 80035e4:	4770      	bx	lr
 80035e6:	f803 1b01 	strb.w	r1, [r3], #1
 80035ea:	e7f9      	b.n	80035e0 <memset+0x4>

080035ec <iprintf>:
 80035ec:	b40f      	push	{r0, r1, r2, r3}
 80035ee:	4b0a      	ldr	r3, [pc, #40]	; (8003618 <iprintf+0x2c>)
 80035f0:	b513      	push	{r0, r1, r4, lr}
 80035f2:	681c      	ldr	r4, [r3, #0]
 80035f4:	b124      	cbz	r4, 8003600 <iprintf+0x14>
 80035f6:	69a3      	ldr	r3, [r4, #24]
 80035f8:	b913      	cbnz	r3, 8003600 <iprintf+0x14>
 80035fa:	4620      	mov	r0, r4
 80035fc:	f000 fb2c 	bl	8003c58 <__sinit>
 8003600:	ab05      	add	r3, sp, #20
 8003602:	9a04      	ldr	r2, [sp, #16]
 8003604:	68a1      	ldr	r1, [r4, #8]
 8003606:	9301      	str	r3, [sp, #4]
 8003608:	4620      	mov	r0, r4
 800360a:	f000 fd3d 	bl	8004088 <_vfiprintf_r>
 800360e:	b002      	add	sp, #8
 8003610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003614:	b004      	add	sp, #16
 8003616:	4770      	bx	lr
 8003618:	2000000c 	.word	0x2000000c

0800361c <_puts_r>:
 800361c:	b570      	push	{r4, r5, r6, lr}
 800361e:	460e      	mov	r6, r1
 8003620:	4605      	mov	r5, r0
 8003622:	b118      	cbz	r0, 800362c <_puts_r+0x10>
 8003624:	6983      	ldr	r3, [r0, #24]
 8003626:	b90b      	cbnz	r3, 800362c <_puts_r+0x10>
 8003628:	f000 fb16 	bl	8003c58 <__sinit>
 800362c:	69ab      	ldr	r3, [r5, #24]
 800362e:	68ac      	ldr	r4, [r5, #8]
 8003630:	b913      	cbnz	r3, 8003638 <_puts_r+0x1c>
 8003632:	4628      	mov	r0, r5
 8003634:	f000 fb10 	bl	8003c58 <__sinit>
 8003638:	4b2c      	ldr	r3, [pc, #176]	; (80036ec <_puts_r+0xd0>)
 800363a:	429c      	cmp	r4, r3
 800363c:	d120      	bne.n	8003680 <_puts_r+0x64>
 800363e:	686c      	ldr	r4, [r5, #4]
 8003640:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003642:	07db      	lsls	r3, r3, #31
 8003644:	d405      	bmi.n	8003652 <_puts_r+0x36>
 8003646:	89a3      	ldrh	r3, [r4, #12]
 8003648:	0598      	lsls	r0, r3, #22
 800364a:	d402      	bmi.n	8003652 <_puts_r+0x36>
 800364c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800364e:	f000 fba1 	bl	8003d94 <__retarget_lock_acquire_recursive>
 8003652:	89a3      	ldrh	r3, [r4, #12]
 8003654:	0719      	lsls	r1, r3, #28
 8003656:	d51d      	bpl.n	8003694 <_puts_r+0x78>
 8003658:	6923      	ldr	r3, [r4, #16]
 800365a:	b1db      	cbz	r3, 8003694 <_puts_r+0x78>
 800365c:	3e01      	subs	r6, #1
 800365e:	68a3      	ldr	r3, [r4, #8]
 8003660:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003664:	3b01      	subs	r3, #1
 8003666:	60a3      	str	r3, [r4, #8]
 8003668:	bb39      	cbnz	r1, 80036ba <_puts_r+0x9e>
 800366a:	2b00      	cmp	r3, #0
 800366c:	da38      	bge.n	80036e0 <_puts_r+0xc4>
 800366e:	4622      	mov	r2, r4
 8003670:	210a      	movs	r1, #10
 8003672:	4628      	mov	r0, r5
 8003674:	f000 f916 	bl	80038a4 <__swbuf_r>
 8003678:	3001      	adds	r0, #1
 800367a:	d011      	beq.n	80036a0 <_puts_r+0x84>
 800367c:	250a      	movs	r5, #10
 800367e:	e011      	b.n	80036a4 <_puts_r+0x88>
 8003680:	4b1b      	ldr	r3, [pc, #108]	; (80036f0 <_puts_r+0xd4>)
 8003682:	429c      	cmp	r4, r3
 8003684:	d101      	bne.n	800368a <_puts_r+0x6e>
 8003686:	68ac      	ldr	r4, [r5, #8]
 8003688:	e7da      	b.n	8003640 <_puts_r+0x24>
 800368a:	4b1a      	ldr	r3, [pc, #104]	; (80036f4 <_puts_r+0xd8>)
 800368c:	429c      	cmp	r4, r3
 800368e:	bf08      	it	eq
 8003690:	68ec      	ldreq	r4, [r5, #12]
 8003692:	e7d5      	b.n	8003640 <_puts_r+0x24>
 8003694:	4621      	mov	r1, r4
 8003696:	4628      	mov	r0, r5
 8003698:	f000 f956 	bl	8003948 <__swsetup_r>
 800369c:	2800      	cmp	r0, #0
 800369e:	d0dd      	beq.n	800365c <_puts_r+0x40>
 80036a0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80036a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80036a6:	07da      	lsls	r2, r3, #31
 80036a8:	d405      	bmi.n	80036b6 <_puts_r+0x9a>
 80036aa:	89a3      	ldrh	r3, [r4, #12]
 80036ac:	059b      	lsls	r3, r3, #22
 80036ae:	d402      	bmi.n	80036b6 <_puts_r+0x9a>
 80036b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036b2:	f000 fb70 	bl	8003d96 <__retarget_lock_release_recursive>
 80036b6:	4628      	mov	r0, r5
 80036b8:	bd70      	pop	{r4, r5, r6, pc}
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	da04      	bge.n	80036c8 <_puts_r+0xac>
 80036be:	69a2      	ldr	r2, [r4, #24]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	dc06      	bgt.n	80036d2 <_puts_r+0xb6>
 80036c4:	290a      	cmp	r1, #10
 80036c6:	d004      	beq.n	80036d2 <_puts_r+0xb6>
 80036c8:	6823      	ldr	r3, [r4, #0]
 80036ca:	1c5a      	adds	r2, r3, #1
 80036cc:	6022      	str	r2, [r4, #0]
 80036ce:	7019      	strb	r1, [r3, #0]
 80036d0:	e7c5      	b.n	800365e <_puts_r+0x42>
 80036d2:	4622      	mov	r2, r4
 80036d4:	4628      	mov	r0, r5
 80036d6:	f000 f8e5 	bl	80038a4 <__swbuf_r>
 80036da:	3001      	adds	r0, #1
 80036dc:	d1bf      	bne.n	800365e <_puts_r+0x42>
 80036de:	e7df      	b.n	80036a0 <_puts_r+0x84>
 80036e0:	6823      	ldr	r3, [r4, #0]
 80036e2:	250a      	movs	r5, #10
 80036e4:	1c5a      	adds	r2, r3, #1
 80036e6:	6022      	str	r2, [r4, #0]
 80036e8:	701d      	strb	r5, [r3, #0]
 80036ea:	e7db      	b.n	80036a4 <_puts_r+0x88>
 80036ec:	08004abc 	.word	0x08004abc
 80036f0:	08004adc 	.word	0x08004adc
 80036f4:	08004a9c 	.word	0x08004a9c

080036f8 <puts>:
 80036f8:	4b02      	ldr	r3, [pc, #8]	; (8003704 <puts+0xc>)
 80036fa:	4601      	mov	r1, r0
 80036fc:	6818      	ldr	r0, [r3, #0]
 80036fe:	f7ff bf8d 	b.w	800361c <_puts_r>
 8003702:	bf00      	nop
 8003704:	2000000c 	.word	0x2000000c

08003708 <setbuf>:
 8003708:	2900      	cmp	r1, #0
 800370a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800370e:	bf0c      	ite	eq
 8003710:	2202      	moveq	r2, #2
 8003712:	2200      	movne	r2, #0
 8003714:	f000 b800 	b.w	8003718 <setvbuf>

08003718 <setvbuf>:
 8003718:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800371c:	461d      	mov	r5, r3
 800371e:	4b5d      	ldr	r3, [pc, #372]	; (8003894 <setvbuf+0x17c>)
 8003720:	681f      	ldr	r7, [r3, #0]
 8003722:	4604      	mov	r4, r0
 8003724:	460e      	mov	r6, r1
 8003726:	4690      	mov	r8, r2
 8003728:	b127      	cbz	r7, 8003734 <setvbuf+0x1c>
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	b913      	cbnz	r3, 8003734 <setvbuf+0x1c>
 800372e:	4638      	mov	r0, r7
 8003730:	f000 fa92 	bl	8003c58 <__sinit>
 8003734:	4b58      	ldr	r3, [pc, #352]	; (8003898 <setvbuf+0x180>)
 8003736:	429c      	cmp	r4, r3
 8003738:	d167      	bne.n	800380a <setvbuf+0xf2>
 800373a:	687c      	ldr	r4, [r7, #4]
 800373c:	f1b8 0f02 	cmp.w	r8, #2
 8003740:	d006      	beq.n	8003750 <setvbuf+0x38>
 8003742:	f1b8 0f01 	cmp.w	r8, #1
 8003746:	f200 809f 	bhi.w	8003888 <setvbuf+0x170>
 800374a:	2d00      	cmp	r5, #0
 800374c:	f2c0 809c 	blt.w	8003888 <setvbuf+0x170>
 8003750:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003752:	07db      	lsls	r3, r3, #31
 8003754:	d405      	bmi.n	8003762 <setvbuf+0x4a>
 8003756:	89a3      	ldrh	r3, [r4, #12]
 8003758:	0598      	lsls	r0, r3, #22
 800375a:	d402      	bmi.n	8003762 <setvbuf+0x4a>
 800375c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800375e:	f000 fb19 	bl	8003d94 <__retarget_lock_acquire_recursive>
 8003762:	4621      	mov	r1, r4
 8003764:	4638      	mov	r0, r7
 8003766:	f000 f9e3 	bl	8003b30 <_fflush_r>
 800376a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800376c:	b141      	cbz	r1, 8003780 <setvbuf+0x68>
 800376e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003772:	4299      	cmp	r1, r3
 8003774:	d002      	beq.n	800377c <setvbuf+0x64>
 8003776:	4638      	mov	r0, r7
 8003778:	f000 fb7c 	bl	8003e74 <_free_r>
 800377c:	2300      	movs	r3, #0
 800377e:	6363      	str	r3, [r4, #52]	; 0x34
 8003780:	2300      	movs	r3, #0
 8003782:	61a3      	str	r3, [r4, #24]
 8003784:	6063      	str	r3, [r4, #4]
 8003786:	89a3      	ldrh	r3, [r4, #12]
 8003788:	0619      	lsls	r1, r3, #24
 800378a:	d503      	bpl.n	8003794 <setvbuf+0x7c>
 800378c:	6921      	ldr	r1, [r4, #16]
 800378e:	4638      	mov	r0, r7
 8003790:	f000 fb70 	bl	8003e74 <_free_r>
 8003794:	89a3      	ldrh	r3, [r4, #12]
 8003796:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800379a:	f023 0303 	bic.w	r3, r3, #3
 800379e:	f1b8 0f02 	cmp.w	r8, #2
 80037a2:	81a3      	strh	r3, [r4, #12]
 80037a4:	d06c      	beq.n	8003880 <setvbuf+0x168>
 80037a6:	ab01      	add	r3, sp, #4
 80037a8:	466a      	mov	r2, sp
 80037aa:	4621      	mov	r1, r4
 80037ac:	4638      	mov	r0, r7
 80037ae:	f000 faf3 	bl	8003d98 <__swhatbuf_r>
 80037b2:	89a3      	ldrh	r3, [r4, #12]
 80037b4:	4318      	orrs	r0, r3
 80037b6:	81a0      	strh	r0, [r4, #12]
 80037b8:	2d00      	cmp	r5, #0
 80037ba:	d130      	bne.n	800381e <setvbuf+0x106>
 80037bc:	9d00      	ldr	r5, [sp, #0]
 80037be:	4628      	mov	r0, r5
 80037c0:	f000 fb50 	bl	8003e64 <malloc>
 80037c4:	4606      	mov	r6, r0
 80037c6:	2800      	cmp	r0, #0
 80037c8:	d155      	bne.n	8003876 <setvbuf+0x15e>
 80037ca:	f8dd 9000 	ldr.w	r9, [sp]
 80037ce:	45a9      	cmp	r9, r5
 80037d0:	d14a      	bne.n	8003868 <setvbuf+0x150>
 80037d2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80037d6:	2200      	movs	r2, #0
 80037d8:	60a2      	str	r2, [r4, #8]
 80037da:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80037de:	6022      	str	r2, [r4, #0]
 80037e0:	6122      	str	r2, [r4, #16]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037e8:	6162      	str	r2, [r4, #20]
 80037ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80037ec:	f043 0302 	orr.w	r3, r3, #2
 80037f0:	07d2      	lsls	r2, r2, #31
 80037f2:	81a3      	strh	r3, [r4, #12]
 80037f4:	d405      	bmi.n	8003802 <setvbuf+0xea>
 80037f6:	f413 7f00 	tst.w	r3, #512	; 0x200
 80037fa:	d102      	bne.n	8003802 <setvbuf+0xea>
 80037fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80037fe:	f000 faca 	bl	8003d96 <__retarget_lock_release_recursive>
 8003802:	4628      	mov	r0, r5
 8003804:	b003      	add	sp, #12
 8003806:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800380a:	4b24      	ldr	r3, [pc, #144]	; (800389c <setvbuf+0x184>)
 800380c:	429c      	cmp	r4, r3
 800380e:	d101      	bne.n	8003814 <setvbuf+0xfc>
 8003810:	68bc      	ldr	r4, [r7, #8]
 8003812:	e793      	b.n	800373c <setvbuf+0x24>
 8003814:	4b22      	ldr	r3, [pc, #136]	; (80038a0 <setvbuf+0x188>)
 8003816:	429c      	cmp	r4, r3
 8003818:	bf08      	it	eq
 800381a:	68fc      	ldreq	r4, [r7, #12]
 800381c:	e78e      	b.n	800373c <setvbuf+0x24>
 800381e:	2e00      	cmp	r6, #0
 8003820:	d0cd      	beq.n	80037be <setvbuf+0xa6>
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	b913      	cbnz	r3, 800382c <setvbuf+0x114>
 8003826:	4638      	mov	r0, r7
 8003828:	f000 fa16 	bl	8003c58 <__sinit>
 800382c:	f1b8 0f01 	cmp.w	r8, #1
 8003830:	bf08      	it	eq
 8003832:	89a3      	ldrheq	r3, [r4, #12]
 8003834:	6026      	str	r6, [r4, #0]
 8003836:	bf04      	itt	eq
 8003838:	f043 0301 	orreq.w	r3, r3, #1
 800383c:	81a3      	strheq	r3, [r4, #12]
 800383e:	89a2      	ldrh	r2, [r4, #12]
 8003840:	f012 0308 	ands.w	r3, r2, #8
 8003844:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8003848:	d01c      	beq.n	8003884 <setvbuf+0x16c>
 800384a:	07d3      	lsls	r3, r2, #31
 800384c:	bf41      	itttt	mi
 800384e:	2300      	movmi	r3, #0
 8003850:	426d      	negmi	r5, r5
 8003852:	60a3      	strmi	r3, [r4, #8]
 8003854:	61a5      	strmi	r5, [r4, #24]
 8003856:	bf58      	it	pl
 8003858:	60a5      	strpl	r5, [r4, #8]
 800385a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800385c:	f015 0501 	ands.w	r5, r5, #1
 8003860:	d115      	bne.n	800388e <setvbuf+0x176>
 8003862:	f412 7f00 	tst.w	r2, #512	; 0x200
 8003866:	e7c8      	b.n	80037fa <setvbuf+0xe2>
 8003868:	4648      	mov	r0, r9
 800386a:	f000 fafb 	bl	8003e64 <malloc>
 800386e:	4606      	mov	r6, r0
 8003870:	2800      	cmp	r0, #0
 8003872:	d0ae      	beq.n	80037d2 <setvbuf+0xba>
 8003874:	464d      	mov	r5, r9
 8003876:	89a3      	ldrh	r3, [r4, #12]
 8003878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800387c:	81a3      	strh	r3, [r4, #12]
 800387e:	e7d0      	b.n	8003822 <setvbuf+0x10a>
 8003880:	2500      	movs	r5, #0
 8003882:	e7a8      	b.n	80037d6 <setvbuf+0xbe>
 8003884:	60a3      	str	r3, [r4, #8]
 8003886:	e7e8      	b.n	800385a <setvbuf+0x142>
 8003888:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800388c:	e7b9      	b.n	8003802 <setvbuf+0xea>
 800388e:	2500      	movs	r5, #0
 8003890:	e7b7      	b.n	8003802 <setvbuf+0xea>
 8003892:	bf00      	nop
 8003894:	2000000c 	.word	0x2000000c
 8003898:	08004abc 	.word	0x08004abc
 800389c:	08004adc 	.word	0x08004adc
 80038a0:	08004a9c 	.word	0x08004a9c

080038a4 <__swbuf_r>:
 80038a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038a6:	460e      	mov	r6, r1
 80038a8:	4614      	mov	r4, r2
 80038aa:	4605      	mov	r5, r0
 80038ac:	b118      	cbz	r0, 80038b6 <__swbuf_r+0x12>
 80038ae:	6983      	ldr	r3, [r0, #24]
 80038b0:	b90b      	cbnz	r3, 80038b6 <__swbuf_r+0x12>
 80038b2:	f000 f9d1 	bl	8003c58 <__sinit>
 80038b6:	4b21      	ldr	r3, [pc, #132]	; (800393c <__swbuf_r+0x98>)
 80038b8:	429c      	cmp	r4, r3
 80038ba:	d12b      	bne.n	8003914 <__swbuf_r+0x70>
 80038bc:	686c      	ldr	r4, [r5, #4]
 80038be:	69a3      	ldr	r3, [r4, #24]
 80038c0:	60a3      	str	r3, [r4, #8]
 80038c2:	89a3      	ldrh	r3, [r4, #12]
 80038c4:	071a      	lsls	r2, r3, #28
 80038c6:	d52f      	bpl.n	8003928 <__swbuf_r+0x84>
 80038c8:	6923      	ldr	r3, [r4, #16]
 80038ca:	b36b      	cbz	r3, 8003928 <__swbuf_r+0x84>
 80038cc:	6923      	ldr	r3, [r4, #16]
 80038ce:	6820      	ldr	r0, [r4, #0]
 80038d0:	1ac0      	subs	r0, r0, r3
 80038d2:	6963      	ldr	r3, [r4, #20]
 80038d4:	b2f6      	uxtb	r6, r6
 80038d6:	4283      	cmp	r3, r0
 80038d8:	4637      	mov	r7, r6
 80038da:	dc04      	bgt.n	80038e6 <__swbuf_r+0x42>
 80038dc:	4621      	mov	r1, r4
 80038de:	4628      	mov	r0, r5
 80038e0:	f000 f926 	bl	8003b30 <_fflush_r>
 80038e4:	bb30      	cbnz	r0, 8003934 <__swbuf_r+0x90>
 80038e6:	68a3      	ldr	r3, [r4, #8]
 80038e8:	3b01      	subs	r3, #1
 80038ea:	60a3      	str	r3, [r4, #8]
 80038ec:	6823      	ldr	r3, [r4, #0]
 80038ee:	1c5a      	adds	r2, r3, #1
 80038f0:	6022      	str	r2, [r4, #0]
 80038f2:	701e      	strb	r6, [r3, #0]
 80038f4:	6963      	ldr	r3, [r4, #20]
 80038f6:	3001      	adds	r0, #1
 80038f8:	4283      	cmp	r3, r0
 80038fa:	d004      	beq.n	8003906 <__swbuf_r+0x62>
 80038fc:	89a3      	ldrh	r3, [r4, #12]
 80038fe:	07db      	lsls	r3, r3, #31
 8003900:	d506      	bpl.n	8003910 <__swbuf_r+0x6c>
 8003902:	2e0a      	cmp	r6, #10
 8003904:	d104      	bne.n	8003910 <__swbuf_r+0x6c>
 8003906:	4621      	mov	r1, r4
 8003908:	4628      	mov	r0, r5
 800390a:	f000 f911 	bl	8003b30 <_fflush_r>
 800390e:	b988      	cbnz	r0, 8003934 <__swbuf_r+0x90>
 8003910:	4638      	mov	r0, r7
 8003912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003914:	4b0a      	ldr	r3, [pc, #40]	; (8003940 <__swbuf_r+0x9c>)
 8003916:	429c      	cmp	r4, r3
 8003918:	d101      	bne.n	800391e <__swbuf_r+0x7a>
 800391a:	68ac      	ldr	r4, [r5, #8]
 800391c:	e7cf      	b.n	80038be <__swbuf_r+0x1a>
 800391e:	4b09      	ldr	r3, [pc, #36]	; (8003944 <__swbuf_r+0xa0>)
 8003920:	429c      	cmp	r4, r3
 8003922:	bf08      	it	eq
 8003924:	68ec      	ldreq	r4, [r5, #12]
 8003926:	e7ca      	b.n	80038be <__swbuf_r+0x1a>
 8003928:	4621      	mov	r1, r4
 800392a:	4628      	mov	r0, r5
 800392c:	f000 f80c 	bl	8003948 <__swsetup_r>
 8003930:	2800      	cmp	r0, #0
 8003932:	d0cb      	beq.n	80038cc <__swbuf_r+0x28>
 8003934:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003938:	e7ea      	b.n	8003910 <__swbuf_r+0x6c>
 800393a:	bf00      	nop
 800393c:	08004abc 	.word	0x08004abc
 8003940:	08004adc 	.word	0x08004adc
 8003944:	08004a9c 	.word	0x08004a9c

08003948 <__swsetup_r>:
 8003948:	4b32      	ldr	r3, [pc, #200]	; (8003a14 <__swsetup_r+0xcc>)
 800394a:	b570      	push	{r4, r5, r6, lr}
 800394c:	681d      	ldr	r5, [r3, #0]
 800394e:	4606      	mov	r6, r0
 8003950:	460c      	mov	r4, r1
 8003952:	b125      	cbz	r5, 800395e <__swsetup_r+0x16>
 8003954:	69ab      	ldr	r3, [r5, #24]
 8003956:	b913      	cbnz	r3, 800395e <__swsetup_r+0x16>
 8003958:	4628      	mov	r0, r5
 800395a:	f000 f97d 	bl	8003c58 <__sinit>
 800395e:	4b2e      	ldr	r3, [pc, #184]	; (8003a18 <__swsetup_r+0xd0>)
 8003960:	429c      	cmp	r4, r3
 8003962:	d10f      	bne.n	8003984 <__swsetup_r+0x3c>
 8003964:	686c      	ldr	r4, [r5, #4]
 8003966:	89a3      	ldrh	r3, [r4, #12]
 8003968:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800396c:	0719      	lsls	r1, r3, #28
 800396e:	d42c      	bmi.n	80039ca <__swsetup_r+0x82>
 8003970:	06dd      	lsls	r5, r3, #27
 8003972:	d411      	bmi.n	8003998 <__swsetup_r+0x50>
 8003974:	2309      	movs	r3, #9
 8003976:	6033      	str	r3, [r6, #0]
 8003978:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800397c:	81a3      	strh	r3, [r4, #12]
 800397e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003982:	e03e      	b.n	8003a02 <__swsetup_r+0xba>
 8003984:	4b25      	ldr	r3, [pc, #148]	; (8003a1c <__swsetup_r+0xd4>)
 8003986:	429c      	cmp	r4, r3
 8003988:	d101      	bne.n	800398e <__swsetup_r+0x46>
 800398a:	68ac      	ldr	r4, [r5, #8]
 800398c:	e7eb      	b.n	8003966 <__swsetup_r+0x1e>
 800398e:	4b24      	ldr	r3, [pc, #144]	; (8003a20 <__swsetup_r+0xd8>)
 8003990:	429c      	cmp	r4, r3
 8003992:	bf08      	it	eq
 8003994:	68ec      	ldreq	r4, [r5, #12]
 8003996:	e7e6      	b.n	8003966 <__swsetup_r+0x1e>
 8003998:	0758      	lsls	r0, r3, #29
 800399a:	d512      	bpl.n	80039c2 <__swsetup_r+0x7a>
 800399c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800399e:	b141      	cbz	r1, 80039b2 <__swsetup_r+0x6a>
 80039a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80039a4:	4299      	cmp	r1, r3
 80039a6:	d002      	beq.n	80039ae <__swsetup_r+0x66>
 80039a8:	4630      	mov	r0, r6
 80039aa:	f000 fa63 	bl	8003e74 <_free_r>
 80039ae:	2300      	movs	r3, #0
 80039b0:	6363      	str	r3, [r4, #52]	; 0x34
 80039b2:	89a3      	ldrh	r3, [r4, #12]
 80039b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80039b8:	81a3      	strh	r3, [r4, #12]
 80039ba:	2300      	movs	r3, #0
 80039bc:	6063      	str	r3, [r4, #4]
 80039be:	6923      	ldr	r3, [r4, #16]
 80039c0:	6023      	str	r3, [r4, #0]
 80039c2:	89a3      	ldrh	r3, [r4, #12]
 80039c4:	f043 0308 	orr.w	r3, r3, #8
 80039c8:	81a3      	strh	r3, [r4, #12]
 80039ca:	6923      	ldr	r3, [r4, #16]
 80039cc:	b94b      	cbnz	r3, 80039e2 <__swsetup_r+0x9a>
 80039ce:	89a3      	ldrh	r3, [r4, #12]
 80039d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80039d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039d8:	d003      	beq.n	80039e2 <__swsetup_r+0x9a>
 80039da:	4621      	mov	r1, r4
 80039dc:	4630      	mov	r0, r6
 80039de:	f000 fa01 	bl	8003de4 <__smakebuf_r>
 80039e2:	89a0      	ldrh	r0, [r4, #12]
 80039e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80039e8:	f010 0301 	ands.w	r3, r0, #1
 80039ec:	d00a      	beq.n	8003a04 <__swsetup_r+0xbc>
 80039ee:	2300      	movs	r3, #0
 80039f0:	60a3      	str	r3, [r4, #8]
 80039f2:	6963      	ldr	r3, [r4, #20]
 80039f4:	425b      	negs	r3, r3
 80039f6:	61a3      	str	r3, [r4, #24]
 80039f8:	6923      	ldr	r3, [r4, #16]
 80039fa:	b943      	cbnz	r3, 8003a0e <__swsetup_r+0xc6>
 80039fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003a00:	d1ba      	bne.n	8003978 <__swsetup_r+0x30>
 8003a02:	bd70      	pop	{r4, r5, r6, pc}
 8003a04:	0781      	lsls	r1, r0, #30
 8003a06:	bf58      	it	pl
 8003a08:	6963      	ldrpl	r3, [r4, #20]
 8003a0a:	60a3      	str	r3, [r4, #8]
 8003a0c:	e7f4      	b.n	80039f8 <__swsetup_r+0xb0>
 8003a0e:	2000      	movs	r0, #0
 8003a10:	e7f7      	b.n	8003a02 <__swsetup_r+0xba>
 8003a12:	bf00      	nop
 8003a14:	2000000c 	.word	0x2000000c
 8003a18:	08004abc 	.word	0x08004abc
 8003a1c:	08004adc 	.word	0x08004adc
 8003a20:	08004a9c 	.word	0x08004a9c

08003a24 <__sflush_r>:
 8003a24:	898a      	ldrh	r2, [r1, #12]
 8003a26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a2a:	4605      	mov	r5, r0
 8003a2c:	0710      	lsls	r0, r2, #28
 8003a2e:	460c      	mov	r4, r1
 8003a30:	d458      	bmi.n	8003ae4 <__sflush_r+0xc0>
 8003a32:	684b      	ldr	r3, [r1, #4]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	dc05      	bgt.n	8003a44 <__sflush_r+0x20>
 8003a38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	dc02      	bgt.n	8003a44 <__sflush_r+0x20>
 8003a3e:	2000      	movs	r0, #0
 8003a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003a46:	2e00      	cmp	r6, #0
 8003a48:	d0f9      	beq.n	8003a3e <__sflush_r+0x1a>
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003a50:	682f      	ldr	r7, [r5, #0]
 8003a52:	602b      	str	r3, [r5, #0]
 8003a54:	d032      	beq.n	8003abc <__sflush_r+0x98>
 8003a56:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003a58:	89a3      	ldrh	r3, [r4, #12]
 8003a5a:	075a      	lsls	r2, r3, #29
 8003a5c:	d505      	bpl.n	8003a6a <__sflush_r+0x46>
 8003a5e:	6863      	ldr	r3, [r4, #4]
 8003a60:	1ac0      	subs	r0, r0, r3
 8003a62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003a64:	b10b      	cbz	r3, 8003a6a <__sflush_r+0x46>
 8003a66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a68:	1ac0      	subs	r0, r0, r3
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003a70:	6a21      	ldr	r1, [r4, #32]
 8003a72:	4628      	mov	r0, r5
 8003a74:	47b0      	blx	r6
 8003a76:	1c43      	adds	r3, r0, #1
 8003a78:	89a3      	ldrh	r3, [r4, #12]
 8003a7a:	d106      	bne.n	8003a8a <__sflush_r+0x66>
 8003a7c:	6829      	ldr	r1, [r5, #0]
 8003a7e:	291d      	cmp	r1, #29
 8003a80:	d82c      	bhi.n	8003adc <__sflush_r+0xb8>
 8003a82:	4a2a      	ldr	r2, [pc, #168]	; (8003b2c <__sflush_r+0x108>)
 8003a84:	40ca      	lsrs	r2, r1
 8003a86:	07d6      	lsls	r6, r2, #31
 8003a88:	d528      	bpl.n	8003adc <__sflush_r+0xb8>
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	6062      	str	r2, [r4, #4]
 8003a8e:	04d9      	lsls	r1, r3, #19
 8003a90:	6922      	ldr	r2, [r4, #16]
 8003a92:	6022      	str	r2, [r4, #0]
 8003a94:	d504      	bpl.n	8003aa0 <__sflush_r+0x7c>
 8003a96:	1c42      	adds	r2, r0, #1
 8003a98:	d101      	bne.n	8003a9e <__sflush_r+0x7a>
 8003a9a:	682b      	ldr	r3, [r5, #0]
 8003a9c:	b903      	cbnz	r3, 8003aa0 <__sflush_r+0x7c>
 8003a9e:	6560      	str	r0, [r4, #84]	; 0x54
 8003aa0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003aa2:	602f      	str	r7, [r5, #0]
 8003aa4:	2900      	cmp	r1, #0
 8003aa6:	d0ca      	beq.n	8003a3e <__sflush_r+0x1a>
 8003aa8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003aac:	4299      	cmp	r1, r3
 8003aae:	d002      	beq.n	8003ab6 <__sflush_r+0x92>
 8003ab0:	4628      	mov	r0, r5
 8003ab2:	f000 f9df 	bl	8003e74 <_free_r>
 8003ab6:	2000      	movs	r0, #0
 8003ab8:	6360      	str	r0, [r4, #52]	; 0x34
 8003aba:	e7c1      	b.n	8003a40 <__sflush_r+0x1c>
 8003abc:	6a21      	ldr	r1, [r4, #32]
 8003abe:	2301      	movs	r3, #1
 8003ac0:	4628      	mov	r0, r5
 8003ac2:	47b0      	blx	r6
 8003ac4:	1c41      	adds	r1, r0, #1
 8003ac6:	d1c7      	bne.n	8003a58 <__sflush_r+0x34>
 8003ac8:	682b      	ldr	r3, [r5, #0]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d0c4      	beq.n	8003a58 <__sflush_r+0x34>
 8003ace:	2b1d      	cmp	r3, #29
 8003ad0:	d001      	beq.n	8003ad6 <__sflush_r+0xb2>
 8003ad2:	2b16      	cmp	r3, #22
 8003ad4:	d101      	bne.n	8003ada <__sflush_r+0xb6>
 8003ad6:	602f      	str	r7, [r5, #0]
 8003ad8:	e7b1      	b.n	8003a3e <__sflush_r+0x1a>
 8003ada:	89a3      	ldrh	r3, [r4, #12]
 8003adc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ae0:	81a3      	strh	r3, [r4, #12]
 8003ae2:	e7ad      	b.n	8003a40 <__sflush_r+0x1c>
 8003ae4:	690f      	ldr	r7, [r1, #16]
 8003ae6:	2f00      	cmp	r7, #0
 8003ae8:	d0a9      	beq.n	8003a3e <__sflush_r+0x1a>
 8003aea:	0793      	lsls	r3, r2, #30
 8003aec:	680e      	ldr	r6, [r1, #0]
 8003aee:	bf08      	it	eq
 8003af0:	694b      	ldreq	r3, [r1, #20]
 8003af2:	600f      	str	r7, [r1, #0]
 8003af4:	bf18      	it	ne
 8003af6:	2300      	movne	r3, #0
 8003af8:	eba6 0807 	sub.w	r8, r6, r7
 8003afc:	608b      	str	r3, [r1, #8]
 8003afe:	f1b8 0f00 	cmp.w	r8, #0
 8003b02:	dd9c      	ble.n	8003a3e <__sflush_r+0x1a>
 8003b04:	6a21      	ldr	r1, [r4, #32]
 8003b06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003b08:	4643      	mov	r3, r8
 8003b0a:	463a      	mov	r2, r7
 8003b0c:	4628      	mov	r0, r5
 8003b0e:	47b0      	blx	r6
 8003b10:	2800      	cmp	r0, #0
 8003b12:	dc06      	bgt.n	8003b22 <__sflush_r+0xfe>
 8003b14:	89a3      	ldrh	r3, [r4, #12]
 8003b16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b1a:	81a3      	strh	r3, [r4, #12]
 8003b1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b20:	e78e      	b.n	8003a40 <__sflush_r+0x1c>
 8003b22:	4407      	add	r7, r0
 8003b24:	eba8 0800 	sub.w	r8, r8, r0
 8003b28:	e7e9      	b.n	8003afe <__sflush_r+0xda>
 8003b2a:	bf00      	nop
 8003b2c:	20400001 	.word	0x20400001

08003b30 <_fflush_r>:
 8003b30:	b538      	push	{r3, r4, r5, lr}
 8003b32:	690b      	ldr	r3, [r1, #16]
 8003b34:	4605      	mov	r5, r0
 8003b36:	460c      	mov	r4, r1
 8003b38:	b913      	cbnz	r3, 8003b40 <_fflush_r+0x10>
 8003b3a:	2500      	movs	r5, #0
 8003b3c:	4628      	mov	r0, r5
 8003b3e:	bd38      	pop	{r3, r4, r5, pc}
 8003b40:	b118      	cbz	r0, 8003b4a <_fflush_r+0x1a>
 8003b42:	6983      	ldr	r3, [r0, #24]
 8003b44:	b90b      	cbnz	r3, 8003b4a <_fflush_r+0x1a>
 8003b46:	f000 f887 	bl	8003c58 <__sinit>
 8003b4a:	4b14      	ldr	r3, [pc, #80]	; (8003b9c <_fflush_r+0x6c>)
 8003b4c:	429c      	cmp	r4, r3
 8003b4e:	d11b      	bne.n	8003b88 <_fflush_r+0x58>
 8003b50:	686c      	ldr	r4, [r5, #4]
 8003b52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d0ef      	beq.n	8003b3a <_fflush_r+0xa>
 8003b5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003b5c:	07d0      	lsls	r0, r2, #31
 8003b5e:	d404      	bmi.n	8003b6a <_fflush_r+0x3a>
 8003b60:	0599      	lsls	r1, r3, #22
 8003b62:	d402      	bmi.n	8003b6a <_fflush_r+0x3a>
 8003b64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b66:	f000 f915 	bl	8003d94 <__retarget_lock_acquire_recursive>
 8003b6a:	4628      	mov	r0, r5
 8003b6c:	4621      	mov	r1, r4
 8003b6e:	f7ff ff59 	bl	8003a24 <__sflush_r>
 8003b72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003b74:	07da      	lsls	r2, r3, #31
 8003b76:	4605      	mov	r5, r0
 8003b78:	d4e0      	bmi.n	8003b3c <_fflush_r+0xc>
 8003b7a:	89a3      	ldrh	r3, [r4, #12]
 8003b7c:	059b      	lsls	r3, r3, #22
 8003b7e:	d4dd      	bmi.n	8003b3c <_fflush_r+0xc>
 8003b80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b82:	f000 f908 	bl	8003d96 <__retarget_lock_release_recursive>
 8003b86:	e7d9      	b.n	8003b3c <_fflush_r+0xc>
 8003b88:	4b05      	ldr	r3, [pc, #20]	; (8003ba0 <_fflush_r+0x70>)
 8003b8a:	429c      	cmp	r4, r3
 8003b8c:	d101      	bne.n	8003b92 <_fflush_r+0x62>
 8003b8e:	68ac      	ldr	r4, [r5, #8]
 8003b90:	e7df      	b.n	8003b52 <_fflush_r+0x22>
 8003b92:	4b04      	ldr	r3, [pc, #16]	; (8003ba4 <_fflush_r+0x74>)
 8003b94:	429c      	cmp	r4, r3
 8003b96:	bf08      	it	eq
 8003b98:	68ec      	ldreq	r4, [r5, #12]
 8003b9a:	e7da      	b.n	8003b52 <_fflush_r+0x22>
 8003b9c:	08004abc 	.word	0x08004abc
 8003ba0:	08004adc 	.word	0x08004adc
 8003ba4:	08004a9c 	.word	0x08004a9c

08003ba8 <std>:
 8003ba8:	2300      	movs	r3, #0
 8003baa:	b510      	push	{r4, lr}
 8003bac:	4604      	mov	r4, r0
 8003bae:	e9c0 3300 	strd	r3, r3, [r0]
 8003bb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003bb6:	6083      	str	r3, [r0, #8]
 8003bb8:	8181      	strh	r1, [r0, #12]
 8003bba:	6643      	str	r3, [r0, #100]	; 0x64
 8003bbc:	81c2      	strh	r2, [r0, #14]
 8003bbe:	6183      	str	r3, [r0, #24]
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	2208      	movs	r2, #8
 8003bc4:	305c      	adds	r0, #92	; 0x5c
 8003bc6:	f7ff fd09 	bl	80035dc <memset>
 8003bca:	4b05      	ldr	r3, [pc, #20]	; (8003be0 <std+0x38>)
 8003bcc:	6263      	str	r3, [r4, #36]	; 0x24
 8003bce:	4b05      	ldr	r3, [pc, #20]	; (8003be4 <std+0x3c>)
 8003bd0:	62a3      	str	r3, [r4, #40]	; 0x28
 8003bd2:	4b05      	ldr	r3, [pc, #20]	; (8003be8 <std+0x40>)
 8003bd4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003bd6:	4b05      	ldr	r3, [pc, #20]	; (8003bec <std+0x44>)
 8003bd8:	6224      	str	r4, [r4, #32]
 8003bda:	6323      	str	r3, [r4, #48]	; 0x30
 8003bdc:	bd10      	pop	{r4, pc}
 8003bde:	bf00      	nop
 8003be0:	08004631 	.word	0x08004631
 8003be4:	08004653 	.word	0x08004653
 8003be8:	0800468b 	.word	0x0800468b
 8003bec:	080046af 	.word	0x080046af

08003bf0 <_cleanup_r>:
 8003bf0:	4901      	ldr	r1, [pc, #4]	; (8003bf8 <_cleanup_r+0x8>)
 8003bf2:	f000 b8af 	b.w	8003d54 <_fwalk_reent>
 8003bf6:	bf00      	nop
 8003bf8:	08003b31 	.word	0x08003b31

08003bfc <__sfmoreglue>:
 8003bfc:	b570      	push	{r4, r5, r6, lr}
 8003bfe:	2268      	movs	r2, #104	; 0x68
 8003c00:	1e4d      	subs	r5, r1, #1
 8003c02:	4355      	muls	r5, r2
 8003c04:	460e      	mov	r6, r1
 8003c06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003c0a:	f000 f99f 	bl	8003f4c <_malloc_r>
 8003c0e:	4604      	mov	r4, r0
 8003c10:	b140      	cbz	r0, 8003c24 <__sfmoreglue+0x28>
 8003c12:	2100      	movs	r1, #0
 8003c14:	e9c0 1600 	strd	r1, r6, [r0]
 8003c18:	300c      	adds	r0, #12
 8003c1a:	60a0      	str	r0, [r4, #8]
 8003c1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003c20:	f7ff fcdc 	bl	80035dc <memset>
 8003c24:	4620      	mov	r0, r4
 8003c26:	bd70      	pop	{r4, r5, r6, pc}

08003c28 <__sfp_lock_acquire>:
 8003c28:	4801      	ldr	r0, [pc, #4]	; (8003c30 <__sfp_lock_acquire+0x8>)
 8003c2a:	f000 b8b3 	b.w	8003d94 <__retarget_lock_acquire_recursive>
 8003c2e:	bf00      	nop
 8003c30:	2000083d 	.word	0x2000083d

08003c34 <__sfp_lock_release>:
 8003c34:	4801      	ldr	r0, [pc, #4]	; (8003c3c <__sfp_lock_release+0x8>)
 8003c36:	f000 b8ae 	b.w	8003d96 <__retarget_lock_release_recursive>
 8003c3a:	bf00      	nop
 8003c3c:	2000083d 	.word	0x2000083d

08003c40 <__sinit_lock_acquire>:
 8003c40:	4801      	ldr	r0, [pc, #4]	; (8003c48 <__sinit_lock_acquire+0x8>)
 8003c42:	f000 b8a7 	b.w	8003d94 <__retarget_lock_acquire_recursive>
 8003c46:	bf00      	nop
 8003c48:	2000083e 	.word	0x2000083e

08003c4c <__sinit_lock_release>:
 8003c4c:	4801      	ldr	r0, [pc, #4]	; (8003c54 <__sinit_lock_release+0x8>)
 8003c4e:	f000 b8a2 	b.w	8003d96 <__retarget_lock_release_recursive>
 8003c52:	bf00      	nop
 8003c54:	2000083e 	.word	0x2000083e

08003c58 <__sinit>:
 8003c58:	b510      	push	{r4, lr}
 8003c5a:	4604      	mov	r4, r0
 8003c5c:	f7ff fff0 	bl	8003c40 <__sinit_lock_acquire>
 8003c60:	69a3      	ldr	r3, [r4, #24]
 8003c62:	b11b      	cbz	r3, 8003c6c <__sinit+0x14>
 8003c64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c68:	f7ff bff0 	b.w	8003c4c <__sinit_lock_release>
 8003c6c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003c70:	6523      	str	r3, [r4, #80]	; 0x50
 8003c72:	4b13      	ldr	r3, [pc, #76]	; (8003cc0 <__sinit+0x68>)
 8003c74:	4a13      	ldr	r2, [pc, #76]	; (8003cc4 <__sinit+0x6c>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	62a2      	str	r2, [r4, #40]	; 0x28
 8003c7a:	42a3      	cmp	r3, r4
 8003c7c:	bf04      	itt	eq
 8003c7e:	2301      	moveq	r3, #1
 8003c80:	61a3      	streq	r3, [r4, #24]
 8003c82:	4620      	mov	r0, r4
 8003c84:	f000 f820 	bl	8003cc8 <__sfp>
 8003c88:	6060      	str	r0, [r4, #4]
 8003c8a:	4620      	mov	r0, r4
 8003c8c:	f000 f81c 	bl	8003cc8 <__sfp>
 8003c90:	60a0      	str	r0, [r4, #8]
 8003c92:	4620      	mov	r0, r4
 8003c94:	f000 f818 	bl	8003cc8 <__sfp>
 8003c98:	2200      	movs	r2, #0
 8003c9a:	60e0      	str	r0, [r4, #12]
 8003c9c:	2104      	movs	r1, #4
 8003c9e:	6860      	ldr	r0, [r4, #4]
 8003ca0:	f7ff ff82 	bl	8003ba8 <std>
 8003ca4:	68a0      	ldr	r0, [r4, #8]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	2109      	movs	r1, #9
 8003caa:	f7ff ff7d 	bl	8003ba8 <std>
 8003cae:	68e0      	ldr	r0, [r4, #12]
 8003cb0:	2202      	movs	r2, #2
 8003cb2:	2112      	movs	r1, #18
 8003cb4:	f7ff ff78 	bl	8003ba8 <std>
 8003cb8:	2301      	movs	r3, #1
 8003cba:	61a3      	str	r3, [r4, #24]
 8003cbc:	e7d2      	b.n	8003c64 <__sinit+0xc>
 8003cbe:	bf00      	nop
 8003cc0:	08004a98 	.word	0x08004a98
 8003cc4:	08003bf1 	.word	0x08003bf1

08003cc8 <__sfp>:
 8003cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cca:	4607      	mov	r7, r0
 8003ccc:	f7ff ffac 	bl	8003c28 <__sfp_lock_acquire>
 8003cd0:	4b1e      	ldr	r3, [pc, #120]	; (8003d4c <__sfp+0x84>)
 8003cd2:	681e      	ldr	r6, [r3, #0]
 8003cd4:	69b3      	ldr	r3, [r6, #24]
 8003cd6:	b913      	cbnz	r3, 8003cde <__sfp+0x16>
 8003cd8:	4630      	mov	r0, r6
 8003cda:	f7ff ffbd 	bl	8003c58 <__sinit>
 8003cde:	3648      	adds	r6, #72	; 0x48
 8003ce0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	d503      	bpl.n	8003cf0 <__sfp+0x28>
 8003ce8:	6833      	ldr	r3, [r6, #0]
 8003cea:	b30b      	cbz	r3, 8003d30 <__sfp+0x68>
 8003cec:	6836      	ldr	r6, [r6, #0]
 8003cee:	e7f7      	b.n	8003ce0 <__sfp+0x18>
 8003cf0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003cf4:	b9d5      	cbnz	r5, 8003d2c <__sfp+0x64>
 8003cf6:	4b16      	ldr	r3, [pc, #88]	; (8003d50 <__sfp+0x88>)
 8003cf8:	60e3      	str	r3, [r4, #12]
 8003cfa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003cfe:	6665      	str	r5, [r4, #100]	; 0x64
 8003d00:	f000 f847 	bl	8003d92 <__retarget_lock_init_recursive>
 8003d04:	f7ff ff96 	bl	8003c34 <__sfp_lock_release>
 8003d08:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003d0c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003d10:	6025      	str	r5, [r4, #0]
 8003d12:	61a5      	str	r5, [r4, #24]
 8003d14:	2208      	movs	r2, #8
 8003d16:	4629      	mov	r1, r5
 8003d18:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003d1c:	f7ff fc5e 	bl	80035dc <memset>
 8003d20:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003d24:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003d28:	4620      	mov	r0, r4
 8003d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d2c:	3468      	adds	r4, #104	; 0x68
 8003d2e:	e7d9      	b.n	8003ce4 <__sfp+0x1c>
 8003d30:	2104      	movs	r1, #4
 8003d32:	4638      	mov	r0, r7
 8003d34:	f7ff ff62 	bl	8003bfc <__sfmoreglue>
 8003d38:	4604      	mov	r4, r0
 8003d3a:	6030      	str	r0, [r6, #0]
 8003d3c:	2800      	cmp	r0, #0
 8003d3e:	d1d5      	bne.n	8003cec <__sfp+0x24>
 8003d40:	f7ff ff78 	bl	8003c34 <__sfp_lock_release>
 8003d44:	230c      	movs	r3, #12
 8003d46:	603b      	str	r3, [r7, #0]
 8003d48:	e7ee      	b.n	8003d28 <__sfp+0x60>
 8003d4a:	bf00      	nop
 8003d4c:	08004a98 	.word	0x08004a98
 8003d50:	ffff0001 	.word	0xffff0001

08003d54 <_fwalk_reent>:
 8003d54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d58:	4606      	mov	r6, r0
 8003d5a:	4688      	mov	r8, r1
 8003d5c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003d60:	2700      	movs	r7, #0
 8003d62:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003d66:	f1b9 0901 	subs.w	r9, r9, #1
 8003d6a:	d505      	bpl.n	8003d78 <_fwalk_reent+0x24>
 8003d6c:	6824      	ldr	r4, [r4, #0]
 8003d6e:	2c00      	cmp	r4, #0
 8003d70:	d1f7      	bne.n	8003d62 <_fwalk_reent+0xe>
 8003d72:	4638      	mov	r0, r7
 8003d74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d78:	89ab      	ldrh	r3, [r5, #12]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d907      	bls.n	8003d8e <_fwalk_reent+0x3a>
 8003d7e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003d82:	3301      	adds	r3, #1
 8003d84:	d003      	beq.n	8003d8e <_fwalk_reent+0x3a>
 8003d86:	4629      	mov	r1, r5
 8003d88:	4630      	mov	r0, r6
 8003d8a:	47c0      	blx	r8
 8003d8c:	4307      	orrs	r7, r0
 8003d8e:	3568      	adds	r5, #104	; 0x68
 8003d90:	e7e9      	b.n	8003d66 <_fwalk_reent+0x12>

08003d92 <__retarget_lock_init_recursive>:
 8003d92:	4770      	bx	lr

08003d94 <__retarget_lock_acquire_recursive>:
 8003d94:	4770      	bx	lr

08003d96 <__retarget_lock_release_recursive>:
 8003d96:	4770      	bx	lr

08003d98 <__swhatbuf_r>:
 8003d98:	b570      	push	{r4, r5, r6, lr}
 8003d9a:	460e      	mov	r6, r1
 8003d9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003da0:	2900      	cmp	r1, #0
 8003da2:	b096      	sub	sp, #88	; 0x58
 8003da4:	4614      	mov	r4, r2
 8003da6:	461d      	mov	r5, r3
 8003da8:	da08      	bge.n	8003dbc <__swhatbuf_r+0x24>
 8003daa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003dae:	2200      	movs	r2, #0
 8003db0:	602a      	str	r2, [r5, #0]
 8003db2:	061a      	lsls	r2, r3, #24
 8003db4:	d410      	bmi.n	8003dd8 <__swhatbuf_r+0x40>
 8003db6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003dba:	e00e      	b.n	8003dda <__swhatbuf_r+0x42>
 8003dbc:	466a      	mov	r2, sp
 8003dbe:	f000 fc9d 	bl	80046fc <_fstat_r>
 8003dc2:	2800      	cmp	r0, #0
 8003dc4:	dbf1      	blt.n	8003daa <__swhatbuf_r+0x12>
 8003dc6:	9a01      	ldr	r2, [sp, #4]
 8003dc8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003dcc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003dd0:	425a      	negs	r2, r3
 8003dd2:	415a      	adcs	r2, r3
 8003dd4:	602a      	str	r2, [r5, #0]
 8003dd6:	e7ee      	b.n	8003db6 <__swhatbuf_r+0x1e>
 8003dd8:	2340      	movs	r3, #64	; 0x40
 8003dda:	2000      	movs	r0, #0
 8003ddc:	6023      	str	r3, [r4, #0]
 8003dde:	b016      	add	sp, #88	; 0x58
 8003de0:	bd70      	pop	{r4, r5, r6, pc}
	...

08003de4 <__smakebuf_r>:
 8003de4:	898b      	ldrh	r3, [r1, #12]
 8003de6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003de8:	079d      	lsls	r5, r3, #30
 8003dea:	4606      	mov	r6, r0
 8003dec:	460c      	mov	r4, r1
 8003dee:	d507      	bpl.n	8003e00 <__smakebuf_r+0x1c>
 8003df0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003df4:	6023      	str	r3, [r4, #0]
 8003df6:	6123      	str	r3, [r4, #16]
 8003df8:	2301      	movs	r3, #1
 8003dfa:	6163      	str	r3, [r4, #20]
 8003dfc:	b002      	add	sp, #8
 8003dfe:	bd70      	pop	{r4, r5, r6, pc}
 8003e00:	ab01      	add	r3, sp, #4
 8003e02:	466a      	mov	r2, sp
 8003e04:	f7ff ffc8 	bl	8003d98 <__swhatbuf_r>
 8003e08:	9900      	ldr	r1, [sp, #0]
 8003e0a:	4605      	mov	r5, r0
 8003e0c:	4630      	mov	r0, r6
 8003e0e:	f000 f89d 	bl	8003f4c <_malloc_r>
 8003e12:	b948      	cbnz	r0, 8003e28 <__smakebuf_r+0x44>
 8003e14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e18:	059a      	lsls	r2, r3, #22
 8003e1a:	d4ef      	bmi.n	8003dfc <__smakebuf_r+0x18>
 8003e1c:	f023 0303 	bic.w	r3, r3, #3
 8003e20:	f043 0302 	orr.w	r3, r3, #2
 8003e24:	81a3      	strh	r3, [r4, #12]
 8003e26:	e7e3      	b.n	8003df0 <__smakebuf_r+0xc>
 8003e28:	4b0d      	ldr	r3, [pc, #52]	; (8003e60 <__smakebuf_r+0x7c>)
 8003e2a:	62b3      	str	r3, [r6, #40]	; 0x28
 8003e2c:	89a3      	ldrh	r3, [r4, #12]
 8003e2e:	6020      	str	r0, [r4, #0]
 8003e30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e34:	81a3      	strh	r3, [r4, #12]
 8003e36:	9b00      	ldr	r3, [sp, #0]
 8003e38:	6163      	str	r3, [r4, #20]
 8003e3a:	9b01      	ldr	r3, [sp, #4]
 8003e3c:	6120      	str	r0, [r4, #16]
 8003e3e:	b15b      	cbz	r3, 8003e58 <__smakebuf_r+0x74>
 8003e40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e44:	4630      	mov	r0, r6
 8003e46:	f000 fc6b 	bl	8004720 <_isatty_r>
 8003e4a:	b128      	cbz	r0, 8003e58 <__smakebuf_r+0x74>
 8003e4c:	89a3      	ldrh	r3, [r4, #12]
 8003e4e:	f023 0303 	bic.w	r3, r3, #3
 8003e52:	f043 0301 	orr.w	r3, r3, #1
 8003e56:	81a3      	strh	r3, [r4, #12]
 8003e58:	89a0      	ldrh	r0, [r4, #12]
 8003e5a:	4305      	orrs	r5, r0
 8003e5c:	81a5      	strh	r5, [r4, #12]
 8003e5e:	e7cd      	b.n	8003dfc <__smakebuf_r+0x18>
 8003e60:	08003bf1 	.word	0x08003bf1

08003e64 <malloc>:
 8003e64:	4b02      	ldr	r3, [pc, #8]	; (8003e70 <malloc+0xc>)
 8003e66:	4601      	mov	r1, r0
 8003e68:	6818      	ldr	r0, [r3, #0]
 8003e6a:	f000 b86f 	b.w	8003f4c <_malloc_r>
 8003e6e:	bf00      	nop
 8003e70:	2000000c 	.word	0x2000000c

08003e74 <_free_r>:
 8003e74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003e76:	2900      	cmp	r1, #0
 8003e78:	d044      	beq.n	8003f04 <_free_r+0x90>
 8003e7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e7e:	9001      	str	r0, [sp, #4]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	f1a1 0404 	sub.w	r4, r1, #4
 8003e86:	bfb8      	it	lt
 8003e88:	18e4      	addlt	r4, r4, r3
 8003e8a:	f000 fc6b 	bl	8004764 <__malloc_lock>
 8003e8e:	4a1e      	ldr	r2, [pc, #120]	; (8003f08 <_free_r+0x94>)
 8003e90:	9801      	ldr	r0, [sp, #4]
 8003e92:	6813      	ldr	r3, [r2, #0]
 8003e94:	b933      	cbnz	r3, 8003ea4 <_free_r+0x30>
 8003e96:	6063      	str	r3, [r4, #4]
 8003e98:	6014      	str	r4, [r2, #0]
 8003e9a:	b003      	add	sp, #12
 8003e9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003ea0:	f000 bc66 	b.w	8004770 <__malloc_unlock>
 8003ea4:	42a3      	cmp	r3, r4
 8003ea6:	d908      	bls.n	8003eba <_free_r+0x46>
 8003ea8:	6825      	ldr	r5, [r4, #0]
 8003eaa:	1961      	adds	r1, r4, r5
 8003eac:	428b      	cmp	r3, r1
 8003eae:	bf01      	itttt	eq
 8003eb0:	6819      	ldreq	r1, [r3, #0]
 8003eb2:	685b      	ldreq	r3, [r3, #4]
 8003eb4:	1949      	addeq	r1, r1, r5
 8003eb6:	6021      	streq	r1, [r4, #0]
 8003eb8:	e7ed      	b.n	8003e96 <_free_r+0x22>
 8003eba:	461a      	mov	r2, r3
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	b10b      	cbz	r3, 8003ec4 <_free_r+0x50>
 8003ec0:	42a3      	cmp	r3, r4
 8003ec2:	d9fa      	bls.n	8003eba <_free_r+0x46>
 8003ec4:	6811      	ldr	r1, [r2, #0]
 8003ec6:	1855      	adds	r5, r2, r1
 8003ec8:	42a5      	cmp	r5, r4
 8003eca:	d10b      	bne.n	8003ee4 <_free_r+0x70>
 8003ecc:	6824      	ldr	r4, [r4, #0]
 8003ece:	4421      	add	r1, r4
 8003ed0:	1854      	adds	r4, r2, r1
 8003ed2:	42a3      	cmp	r3, r4
 8003ed4:	6011      	str	r1, [r2, #0]
 8003ed6:	d1e0      	bne.n	8003e9a <_free_r+0x26>
 8003ed8:	681c      	ldr	r4, [r3, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	6053      	str	r3, [r2, #4]
 8003ede:	4421      	add	r1, r4
 8003ee0:	6011      	str	r1, [r2, #0]
 8003ee2:	e7da      	b.n	8003e9a <_free_r+0x26>
 8003ee4:	d902      	bls.n	8003eec <_free_r+0x78>
 8003ee6:	230c      	movs	r3, #12
 8003ee8:	6003      	str	r3, [r0, #0]
 8003eea:	e7d6      	b.n	8003e9a <_free_r+0x26>
 8003eec:	6825      	ldr	r5, [r4, #0]
 8003eee:	1961      	adds	r1, r4, r5
 8003ef0:	428b      	cmp	r3, r1
 8003ef2:	bf04      	itt	eq
 8003ef4:	6819      	ldreq	r1, [r3, #0]
 8003ef6:	685b      	ldreq	r3, [r3, #4]
 8003ef8:	6063      	str	r3, [r4, #4]
 8003efa:	bf04      	itt	eq
 8003efc:	1949      	addeq	r1, r1, r5
 8003efe:	6021      	streq	r1, [r4, #0]
 8003f00:	6054      	str	r4, [r2, #4]
 8003f02:	e7ca      	b.n	8003e9a <_free_r+0x26>
 8003f04:	b003      	add	sp, #12
 8003f06:	bd30      	pop	{r4, r5, pc}
 8003f08:	20000840 	.word	0x20000840

08003f0c <sbrk_aligned>:
 8003f0c:	b570      	push	{r4, r5, r6, lr}
 8003f0e:	4e0e      	ldr	r6, [pc, #56]	; (8003f48 <sbrk_aligned+0x3c>)
 8003f10:	460c      	mov	r4, r1
 8003f12:	6831      	ldr	r1, [r6, #0]
 8003f14:	4605      	mov	r5, r0
 8003f16:	b911      	cbnz	r1, 8003f1e <sbrk_aligned+0x12>
 8003f18:	f000 fb7a 	bl	8004610 <_sbrk_r>
 8003f1c:	6030      	str	r0, [r6, #0]
 8003f1e:	4621      	mov	r1, r4
 8003f20:	4628      	mov	r0, r5
 8003f22:	f000 fb75 	bl	8004610 <_sbrk_r>
 8003f26:	1c43      	adds	r3, r0, #1
 8003f28:	d00a      	beq.n	8003f40 <sbrk_aligned+0x34>
 8003f2a:	1cc4      	adds	r4, r0, #3
 8003f2c:	f024 0403 	bic.w	r4, r4, #3
 8003f30:	42a0      	cmp	r0, r4
 8003f32:	d007      	beq.n	8003f44 <sbrk_aligned+0x38>
 8003f34:	1a21      	subs	r1, r4, r0
 8003f36:	4628      	mov	r0, r5
 8003f38:	f000 fb6a 	bl	8004610 <_sbrk_r>
 8003f3c:	3001      	adds	r0, #1
 8003f3e:	d101      	bne.n	8003f44 <sbrk_aligned+0x38>
 8003f40:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003f44:	4620      	mov	r0, r4
 8003f46:	bd70      	pop	{r4, r5, r6, pc}
 8003f48:	20000844 	.word	0x20000844

08003f4c <_malloc_r>:
 8003f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f50:	1ccd      	adds	r5, r1, #3
 8003f52:	f025 0503 	bic.w	r5, r5, #3
 8003f56:	3508      	adds	r5, #8
 8003f58:	2d0c      	cmp	r5, #12
 8003f5a:	bf38      	it	cc
 8003f5c:	250c      	movcc	r5, #12
 8003f5e:	2d00      	cmp	r5, #0
 8003f60:	4607      	mov	r7, r0
 8003f62:	db01      	blt.n	8003f68 <_malloc_r+0x1c>
 8003f64:	42a9      	cmp	r1, r5
 8003f66:	d905      	bls.n	8003f74 <_malloc_r+0x28>
 8003f68:	230c      	movs	r3, #12
 8003f6a:	603b      	str	r3, [r7, #0]
 8003f6c:	2600      	movs	r6, #0
 8003f6e:	4630      	mov	r0, r6
 8003f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f74:	4e2e      	ldr	r6, [pc, #184]	; (8004030 <_malloc_r+0xe4>)
 8003f76:	f000 fbf5 	bl	8004764 <__malloc_lock>
 8003f7a:	6833      	ldr	r3, [r6, #0]
 8003f7c:	461c      	mov	r4, r3
 8003f7e:	bb34      	cbnz	r4, 8003fce <_malloc_r+0x82>
 8003f80:	4629      	mov	r1, r5
 8003f82:	4638      	mov	r0, r7
 8003f84:	f7ff ffc2 	bl	8003f0c <sbrk_aligned>
 8003f88:	1c43      	adds	r3, r0, #1
 8003f8a:	4604      	mov	r4, r0
 8003f8c:	d14d      	bne.n	800402a <_malloc_r+0xde>
 8003f8e:	6834      	ldr	r4, [r6, #0]
 8003f90:	4626      	mov	r6, r4
 8003f92:	2e00      	cmp	r6, #0
 8003f94:	d140      	bne.n	8004018 <_malloc_r+0xcc>
 8003f96:	6823      	ldr	r3, [r4, #0]
 8003f98:	4631      	mov	r1, r6
 8003f9a:	4638      	mov	r0, r7
 8003f9c:	eb04 0803 	add.w	r8, r4, r3
 8003fa0:	f000 fb36 	bl	8004610 <_sbrk_r>
 8003fa4:	4580      	cmp	r8, r0
 8003fa6:	d13a      	bne.n	800401e <_malloc_r+0xd2>
 8003fa8:	6821      	ldr	r1, [r4, #0]
 8003faa:	3503      	adds	r5, #3
 8003fac:	1a6d      	subs	r5, r5, r1
 8003fae:	f025 0503 	bic.w	r5, r5, #3
 8003fb2:	3508      	adds	r5, #8
 8003fb4:	2d0c      	cmp	r5, #12
 8003fb6:	bf38      	it	cc
 8003fb8:	250c      	movcc	r5, #12
 8003fba:	4629      	mov	r1, r5
 8003fbc:	4638      	mov	r0, r7
 8003fbe:	f7ff ffa5 	bl	8003f0c <sbrk_aligned>
 8003fc2:	3001      	adds	r0, #1
 8003fc4:	d02b      	beq.n	800401e <_malloc_r+0xd2>
 8003fc6:	6823      	ldr	r3, [r4, #0]
 8003fc8:	442b      	add	r3, r5
 8003fca:	6023      	str	r3, [r4, #0]
 8003fcc:	e00e      	b.n	8003fec <_malloc_r+0xa0>
 8003fce:	6822      	ldr	r2, [r4, #0]
 8003fd0:	1b52      	subs	r2, r2, r5
 8003fd2:	d41e      	bmi.n	8004012 <_malloc_r+0xc6>
 8003fd4:	2a0b      	cmp	r2, #11
 8003fd6:	d916      	bls.n	8004006 <_malloc_r+0xba>
 8003fd8:	1961      	adds	r1, r4, r5
 8003fda:	42a3      	cmp	r3, r4
 8003fdc:	6025      	str	r5, [r4, #0]
 8003fde:	bf18      	it	ne
 8003fe0:	6059      	strne	r1, [r3, #4]
 8003fe2:	6863      	ldr	r3, [r4, #4]
 8003fe4:	bf08      	it	eq
 8003fe6:	6031      	streq	r1, [r6, #0]
 8003fe8:	5162      	str	r2, [r4, r5]
 8003fea:	604b      	str	r3, [r1, #4]
 8003fec:	4638      	mov	r0, r7
 8003fee:	f104 060b 	add.w	r6, r4, #11
 8003ff2:	f000 fbbd 	bl	8004770 <__malloc_unlock>
 8003ff6:	f026 0607 	bic.w	r6, r6, #7
 8003ffa:	1d23      	adds	r3, r4, #4
 8003ffc:	1af2      	subs	r2, r6, r3
 8003ffe:	d0b6      	beq.n	8003f6e <_malloc_r+0x22>
 8004000:	1b9b      	subs	r3, r3, r6
 8004002:	50a3      	str	r3, [r4, r2]
 8004004:	e7b3      	b.n	8003f6e <_malloc_r+0x22>
 8004006:	6862      	ldr	r2, [r4, #4]
 8004008:	42a3      	cmp	r3, r4
 800400a:	bf0c      	ite	eq
 800400c:	6032      	streq	r2, [r6, #0]
 800400e:	605a      	strne	r2, [r3, #4]
 8004010:	e7ec      	b.n	8003fec <_malloc_r+0xa0>
 8004012:	4623      	mov	r3, r4
 8004014:	6864      	ldr	r4, [r4, #4]
 8004016:	e7b2      	b.n	8003f7e <_malloc_r+0x32>
 8004018:	4634      	mov	r4, r6
 800401a:	6876      	ldr	r6, [r6, #4]
 800401c:	e7b9      	b.n	8003f92 <_malloc_r+0x46>
 800401e:	230c      	movs	r3, #12
 8004020:	603b      	str	r3, [r7, #0]
 8004022:	4638      	mov	r0, r7
 8004024:	f000 fba4 	bl	8004770 <__malloc_unlock>
 8004028:	e7a1      	b.n	8003f6e <_malloc_r+0x22>
 800402a:	6025      	str	r5, [r4, #0]
 800402c:	e7de      	b.n	8003fec <_malloc_r+0xa0>
 800402e:	bf00      	nop
 8004030:	20000840 	.word	0x20000840

08004034 <__sfputc_r>:
 8004034:	6893      	ldr	r3, [r2, #8]
 8004036:	3b01      	subs	r3, #1
 8004038:	2b00      	cmp	r3, #0
 800403a:	b410      	push	{r4}
 800403c:	6093      	str	r3, [r2, #8]
 800403e:	da08      	bge.n	8004052 <__sfputc_r+0x1e>
 8004040:	6994      	ldr	r4, [r2, #24]
 8004042:	42a3      	cmp	r3, r4
 8004044:	db01      	blt.n	800404a <__sfputc_r+0x16>
 8004046:	290a      	cmp	r1, #10
 8004048:	d103      	bne.n	8004052 <__sfputc_r+0x1e>
 800404a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800404e:	f7ff bc29 	b.w	80038a4 <__swbuf_r>
 8004052:	6813      	ldr	r3, [r2, #0]
 8004054:	1c58      	adds	r0, r3, #1
 8004056:	6010      	str	r0, [r2, #0]
 8004058:	7019      	strb	r1, [r3, #0]
 800405a:	4608      	mov	r0, r1
 800405c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004060:	4770      	bx	lr

08004062 <__sfputs_r>:
 8004062:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004064:	4606      	mov	r6, r0
 8004066:	460f      	mov	r7, r1
 8004068:	4614      	mov	r4, r2
 800406a:	18d5      	adds	r5, r2, r3
 800406c:	42ac      	cmp	r4, r5
 800406e:	d101      	bne.n	8004074 <__sfputs_r+0x12>
 8004070:	2000      	movs	r0, #0
 8004072:	e007      	b.n	8004084 <__sfputs_r+0x22>
 8004074:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004078:	463a      	mov	r2, r7
 800407a:	4630      	mov	r0, r6
 800407c:	f7ff ffda 	bl	8004034 <__sfputc_r>
 8004080:	1c43      	adds	r3, r0, #1
 8004082:	d1f3      	bne.n	800406c <__sfputs_r+0xa>
 8004084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004088 <_vfiprintf_r>:
 8004088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800408c:	460d      	mov	r5, r1
 800408e:	b09d      	sub	sp, #116	; 0x74
 8004090:	4614      	mov	r4, r2
 8004092:	4698      	mov	r8, r3
 8004094:	4606      	mov	r6, r0
 8004096:	b118      	cbz	r0, 80040a0 <_vfiprintf_r+0x18>
 8004098:	6983      	ldr	r3, [r0, #24]
 800409a:	b90b      	cbnz	r3, 80040a0 <_vfiprintf_r+0x18>
 800409c:	f7ff fddc 	bl	8003c58 <__sinit>
 80040a0:	4b89      	ldr	r3, [pc, #548]	; (80042c8 <_vfiprintf_r+0x240>)
 80040a2:	429d      	cmp	r5, r3
 80040a4:	d11b      	bne.n	80040de <_vfiprintf_r+0x56>
 80040a6:	6875      	ldr	r5, [r6, #4]
 80040a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80040aa:	07d9      	lsls	r1, r3, #31
 80040ac:	d405      	bmi.n	80040ba <_vfiprintf_r+0x32>
 80040ae:	89ab      	ldrh	r3, [r5, #12]
 80040b0:	059a      	lsls	r2, r3, #22
 80040b2:	d402      	bmi.n	80040ba <_vfiprintf_r+0x32>
 80040b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80040b6:	f7ff fe6d 	bl	8003d94 <__retarget_lock_acquire_recursive>
 80040ba:	89ab      	ldrh	r3, [r5, #12]
 80040bc:	071b      	lsls	r3, r3, #28
 80040be:	d501      	bpl.n	80040c4 <_vfiprintf_r+0x3c>
 80040c0:	692b      	ldr	r3, [r5, #16]
 80040c2:	b9eb      	cbnz	r3, 8004100 <_vfiprintf_r+0x78>
 80040c4:	4629      	mov	r1, r5
 80040c6:	4630      	mov	r0, r6
 80040c8:	f7ff fc3e 	bl	8003948 <__swsetup_r>
 80040cc:	b1c0      	cbz	r0, 8004100 <_vfiprintf_r+0x78>
 80040ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80040d0:	07dc      	lsls	r4, r3, #31
 80040d2:	d50e      	bpl.n	80040f2 <_vfiprintf_r+0x6a>
 80040d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040d8:	b01d      	add	sp, #116	; 0x74
 80040da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040de:	4b7b      	ldr	r3, [pc, #492]	; (80042cc <_vfiprintf_r+0x244>)
 80040e0:	429d      	cmp	r5, r3
 80040e2:	d101      	bne.n	80040e8 <_vfiprintf_r+0x60>
 80040e4:	68b5      	ldr	r5, [r6, #8]
 80040e6:	e7df      	b.n	80040a8 <_vfiprintf_r+0x20>
 80040e8:	4b79      	ldr	r3, [pc, #484]	; (80042d0 <_vfiprintf_r+0x248>)
 80040ea:	429d      	cmp	r5, r3
 80040ec:	bf08      	it	eq
 80040ee:	68f5      	ldreq	r5, [r6, #12]
 80040f0:	e7da      	b.n	80040a8 <_vfiprintf_r+0x20>
 80040f2:	89ab      	ldrh	r3, [r5, #12]
 80040f4:	0598      	lsls	r0, r3, #22
 80040f6:	d4ed      	bmi.n	80040d4 <_vfiprintf_r+0x4c>
 80040f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80040fa:	f7ff fe4c 	bl	8003d96 <__retarget_lock_release_recursive>
 80040fe:	e7e9      	b.n	80040d4 <_vfiprintf_r+0x4c>
 8004100:	2300      	movs	r3, #0
 8004102:	9309      	str	r3, [sp, #36]	; 0x24
 8004104:	2320      	movs	r3, #32
 8004106:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800410a:	f8cd 800c 	str.w	r8, [sp, #12]
 800410e:	2330      	movs	r3, #48	; 0x30
 8004110:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80042d4 <_vfiprintf_r+0x24c>
 8004114:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004118:	f04f 0901 	mov.w	r9, #1
 800411c:	4623      	mov	r3, r4
 800411e:	469a      	mov	sl, r3
 8004120:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004124:	b10a      	cbz	r2, 800412a <_vfiprintf_r+0xa2>
 8004126:	2a25      	cmp	r2, #37	; 0x25
 8004128:	d1f9      	bne.n	800411e <_vfiprintf_r+0x96>
 800412a:	ebba 0b04 	subs.w	fp, sl, r4
 800412e:	d00b      	beq.n	8004148 <_vfiprintf_r+0xc0>
 8004130:	465b      	mov	r3, fp
 8004132:	4622      	mov	r2, r4
 8004134:	4629      	mov	r1, r5
 8004136:	4630      	mov	r0, r6
 8004138:	f7ff ff93 	bl	8004062 <__sfputs_r>
 800413c:	3001      	adds	r0, #1
 800413e:	f000 80aa 	beq.w	8004296 <_vfiprintf_r+0x20e>
 8004142:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004144:	445a      	add	r2, fp
 8004146:	9209      	str	r2, [sp, #36]	; 0x24
 8004148:	f89a 3000 	ldrb.w	r3, [sl]
 800414c:	2b00      	cmp	r3, #0
 800414e:	f000 80a2 	beq.w	8004296 <_vfiprintf_r+0x20e>
 8004152:	2300      	movs	r3, #0
 8004154:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004158:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800415c:	f10a 0a01 	add.w	sl, sl, #1
 8004160:	9304      	str	r3, [sp, #16]
 8004162:	9307      	str	r3, [sp, #28]
 8004164:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004168:	931a      	str	r3, [sp, #104]	; 0x68
 800416a:	4654      	mov	r4, sl
 800416c:	2205      	movs	r2, #5
 800416e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004172:	4858      	ldr	r0, [pc, #352]	; (80042d4 <_vfiprintf_r+0x24c>)
 8004174:	f7fc f82c 	bl	80001d0 <memchr>
 8004178:	9a04      	ldr	r2, [sp, #16]
 800417a:	b9d8      	cbnz	r0, 80041b4 <_vfiprintf_r+0x12c>
 800417c:	06d1      	lsls	r1, r2, #27
 800417e:	bf44      	itt	mi
 8004180:	2320      	movmi	r3, #32
 8004182:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004186:	0713      	lsls	r3, r2, #28
 8004188:	bf44      	itt	mi
 800418a:	232b      	movmi	r3, #43	; 0x2b
 800418c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004190:	f89a 3000 	ldrb.w	r3, [sl]
 8004194:	2b2a      	cmp	r3, #42	; 0x2a
 8004196:	d015      	beq.n	80041c4 <_vfiprintf_r+0x13c>
 8004198:	9a07      	ldr	r2, [sp, #28]
 800419a:	4654      	mov	r4, sl
 800419c:	2000      	movs	r0, #0
 800419e:	f04f 0c0a 	mov.w	ip, #10
 80041a2:	4621      	mov	r1, r4
 80041a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80041a8:	3b30      	subs	r3, #48	; 0x30
 80041aa:	2b09      	cmp	r3, #9
 80041ac:	d94e      	bls.n	800424c <_vfiprintf_r+0x1c4>
 80041ae:	b1b0      	cbz	r0, 80041de <_vfiprintf_r+0x156>
 80041b0:	9207      	str	r2, [sp, #28]
 80041b2:	e014      	b.n	80041de <_vfiprintf_r+0x156>
 80041b4:	eba0 0308 	sub.w	r3, r0, r8
 80041b8:	fa09 f303 	lsl.w	r3, r9, r3
 80041bc:	4313      	orrs	r3, r2
 80041be:	9304      	str	r3, [sp, #16]
 80041c0:	46a2      	mov	sl, r4
 80041c2:	e7d2      	b.n	800416a <_vfiprintf_r+0xe2>
 80041c4:	9b03      	ldr	r3, [sp, #12]
 80041c6:	1d19      	adds	r1, r3, #4
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	9103      	str	r1, [sp, #12]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	bfbb      	ittet	lt
 80041d0:	425b      	neglt	r3, r3
 80041d2:	f042 0202 	orrlt.w	r2, r2, #2
 80041d6:	9307      	strge	r3, [sp, #28]
 80041d8:	9307      	strlt	r3, [sp, #28]
 80041da:	bfb8      	it	lt
 80041dc:	9204      	strlt	r2, [sp, #16]
 80041de:	7823      	ldrb	r3, [r4, #0]
 80041e0:	2b2e      	cmp	r3, #46	; 0x2e
 80041e2:	d10c      	bne.n	80041fe <_vfiprintf_r+0x176>
 80041e4:	7863      	ldrb	r3, [r4, #1]
 80041e6:	2b2a      	cmp	r3, #42	; 0x2a
 80041e8:	d135      	bne.n	8004256 <_vfiprintf_r+0x1ce>
 80041ea:	9b03      	ldr	r3, [sp, #12]
 80041ec:	1d1a      	adds	r2, r3, #4
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	9203      	str	r2, [sp, #12]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	bfb8      	it	lt
 80041f6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80041fa:	3402      	adds	r4, #2
 80041fc:	9305      	str	r3, [sp, #20]
 80041fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80042e4 <_vfiprintf_r+0x25c>
 8004202:	7821      	ldrb	r1, [r4, #0]
 8004204:	2203      	movs	r2, #3
 8004206:	4650      	mov	r0, sl
 8004208:	f7fb ffe2 	bl	80001d0 <memchr>
 800420c:	b140      	cbz	r0, 8004220 <_vfiprintf_r+0x198>
 800420e:	2340      	movs	r3, #64	; 0x40
 8004210:	eba0 000a 	sub.w	r0, r0, sl
 8004214:	fa03 f000 	lsl.w	r0, r3, r0
 8004218:	9b04      	ldr	r3, [sp, #16]
 800421a:	4303      	orrs	r3, r0
 800421c:	3401      	adds	r4, #1
 800421e:	9304      	str	r3, [sp, #16]
 8004220:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004224:	482c      	ldr	r0, [pc, #176]	; (80042d8 <_vfiprintf_r+0x250>)
 8004226:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800422a:	2206      	movs	r2, #6
 800422c:	f7fb ffd0 	bl	80001d0 <memchr>
 8004230:	2800      	cmp	r0, #0
 8004232:	d03f      	beq.n	80042b4 <_vfiprintf_r+0x22c>
 8004234:	4b29      	ldr	r3, [pc, #164]	; (80042dc <_vfiprintf_r+0x254>)
 8004236:	bb1b      	cbnz	r3, 8004280 <_vfiprintf_r+0x1f8>
 8004238:	9b03      	ldr	r3, [sp, #12]
 800423a:	3307      	adds	r3, #7
 800423c:	f023 0307 	bic.w	r3, r3, #7
 8004240:	3308      	adds	r3, #8
 8004242:	9303      	str	r3, [sp, #12]
 8004244:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004246:	443b      	add	r3, r7
 8004248:	9309      	str	r3, [sp, #36]	; 0x24
 800424a:	e767      	b.n	800411c <_vfiprintf_r+0x94>
 800424c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004250:	460c      	mov	r4, r1
 8004252:	2001      	movs	r0, #1
 8004254:	e7a5      	b.n	80041a2 <_vfiprintf_r+0x11a>
 8004256:	2300      	movs	r3, #0
 8004258:	3401      	adds	r4, #1
 800425a:	9305      	str	r3, [sp, #20]
 800425c:	4619      	mov	r1, r3
 800425e:	f04f 0c0a 	mov.w	ip, #10
 8004262:	4620      	mov	r0, r4
 8004264:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004268:	3a30      	subs	r2, #48	; 0x30
 800426a:	2a09      	cmp	r2, #9
 800426c:	d903      	bls.n	8004276 <_vfiprintf_r+0x1ee>
 800426e:	2b00      	cmp	r3, #0
 8004270:	d0c5      	beq.n	80041fe <_vfiprintf_r+0x176>
 8004272:	9105      	str	r1, [sp, #20]
 8004274:	e7c3      	b.n	80041fe <_vfiprintf_r+0x176>
 8004276:	fb0c 2101 	mla	r1, ip, r1, r2
 800427a:	4604      	mov	r4, r0
 800427c:	2301      	movs	r3, #1
 800427e:	e7f0      	b.n	8004262 <_vfiprintf_r+0x1da>
 8004280:	ab03      	add	r3, sp, #12
 8004282:	9300      	str	r3, [sp, #0]
 8004284:	462a      	mov	r2, r5
 8004286:	4b16      	ldr	r3, [pc, #88]	; (80042e0 <_vfiprintf_r+0x258>)
 8004288:	a904      	add	r1, sp, #16
 800428a:	4630      	mov	r0, r6
 800428c:	f3af 8000 	nop.w
 8004290:	4607      	mov	r7, r0
 8004292:	1c78      	adds	r0, r7, #1
 8004294:	d1d6      	bne.n	8004244 <_vfiprintf_r+0x1bc>
 8004296:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004298:	07d9      	lsls	r1, r3, #31
 800429a:	d405      	bmi.n	80042a8 <_vfiprintf_r+0x220>
 800429c:	89ab      	ldrh	r3, [r5, #12]
 800429e:	059a      	lsls	r2, r3, #22
 80042a0:	d402      	bmi.n	80042a8 <_vfiprintf_r+0x220>
 80042a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80042a4:	f7ff fd77 	bl	8003d96 <__retarget_lock_release_recursive>
 80042a8:	89ab      	ldrh	r3, [r5, #12]
 80042aa:	065b      	lsls	r3, r3, #25
 80042ac:	f53f af12 	bmi.w	80040d4 <_vfiprintf_r+0x4c>
 80042b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80042b2:	e711      	b.n	80040d8 <_vfiprintf_r+0x50>
 80042b4:	ab03      	add	r3, sp, #12
 80042b6:	9300      	str	r3, [sp, #0]
 80042b8:	462a      	mov	r2, r5
 80042ba:	4b09      	ldr	r3, [pc, #36]	; (80042e0 <_vfiprintf_r+0x258>)
 80042bc:	a904      	add	r1, sp, #16
 80042be:	4630      	mov	r0, r6
 80042c0:	f000 f880 	bl	80043c4 <_printf_i>
 80042c4:	e7e4      	b.n	8004290 <_vfiprintf_r+0x208>
 80042c6:	bf00      	nop
 80042c8:	08004abc 	.word	0x08004abc
 80042cc:	08004adc 	.word	0x08004adc
 80042d0:	08004a9c 	.word	0x08004a9c
 80042d4:	08004afc 	.word	0x08004afc
 80042d8:	08004b06 	.word	0x08004b06
 80042dc:	00000000 	.word	0x00000000
 80042e0:	08004063 	.word	0x08004063
 80042e4:	08004b02 	.word	0x08004b02

080042e8 <_printf_common>:
 80042e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042ec:	4616      	mov	r6, r2
 80042ee:	4699      	mov	r9, r3
 80042f0:	688a      	ldr	r2, [r1, #8]
 80042f2:	690b      	ldr	r3, [r1, #16]
 80042f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80042f8:	4293      	cmp	r3, r2
 80042fa:	bfb8      	it	lt
 80042fc:	4613      	movlt	r3, r2
 80042fe:	6033      	str	r3, [r6, #0]
 8004300:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004304:	4607      	mov	r7, r0
 8004306:	460c      	mov	r4, r1
 8004308:	b10a      	cbz	r2, 800430e <_printf_common+0x26>
 800430a:	3301      	adds	r3, #1
 800430c:	6033      	str	r3, [r6, #0]
 800430e:	6823      	ldr	r3, [r4, #0]
 8004310:	0699      	lsls	r1, r3, #26
 8004312:	bf42      	ittt	mi
 8004314:	6833      	ldrmi	r3, [r6, #0]
 8004316:	3302      	addmi	r3, #2
 8004318:	6033      	strmi	r3, [r6, #0]
 800431a:	6825      	ldr	r5, [r4, #0]
 800431c:	f015 0506 	ands.w	r5, r5, #6
 8004320:	d106      	bne.n	8004330 <_printf_common+0x48>
 8004322:	f104 0a19 	add.w	sl, r4, #25
 8004326:	68e3      	ldr	r3, [r4, #12]
 8004328:	6832      	ldr	r2, [r6, #0]
 800432a:	1a9b      	subs	r3, r3, r2
 800432c:	42ab      	cmp	r3, r5
 800432e:	dc26      	bgt.n	800437e <_printf_common+0x96>
 8004330:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004334:	1e13      	subs	r3, r2, #0
 8004336:	6822      	ldr	r2, [r4, #0]
 8004338:	bf18      	it	ne
 800433a:	2301      	movne	r3, #1
 800433c:	0692      	lsls	r2, r2, #26
 800433e:	d42b      	bmi.n	8004398 <_printf_common+0xb0>
 8004340:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004344:	4649      	mov	r1, r9
 8004346:	4638      	mov	r0, r7
 8004348:	47c0      	blx	r8
 800434a:	3001      	adds	r0, #1
 800434c:	d01e      	beq.n	800438c <_printf_common+0xa4>
 800434e:	6823      	ldr	r3, [r4, #0]
 8004350:	68e5      	ldr	r5, [r4, #12]
 8004352:	6832      	ldr	r2, [r6, #0]
 8004354:	f003 0306 	and.w	r3, r3, #6
 8004358:	2b04      	cmp	r3, #4
 800435a:	bf08      	it	eq
 800435c:	1aad      	subeq	r5, r5, r2
 800435e:	68a3      	ldr	r3, [r4, #8]
 8004360:	6922      	ldr	r2, [r4, #16]
 8004362:	bf0c      	ite	eq
 8004364:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004368:	2500      	movne	r5, #0
 800436a:	4293      	cmp	r3, r2
 800436c:	bfc4      	itt	gt
 800436e:	1a9b      	subgt	r3, r3, r2
 8004370:	18ed      	addgt	r5, r5, r3
 8004372:	2600      	movs	r6, #0
 8004374:	341a      	adds	r4, #26
 8004376:	42b5      	cmp	r5, r6
 8004378:	d11a      	bne.n	80043b0 <_printf_common+0xc8>
 800437a:	2000      	movs	r0, #0
 800437c:	e008      	b.n	8004390 <_printf_common+0xa8>
 800437e:	2301      	movs	r3, #1
 8004380:	4652      	mov	r2, sl
 8004382:	4649      	mov	r1, r9
 8004384:	4638      	mov	r0, r7
 8004386:	47c0      	blx	r8
 8004388:	3001      	adds	r0, #1
 800438a:	d103      	bne.n	8004394 <_printf_common+0xac>
 800438c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004394:	3501      	adds	r5, #1
 8004396:	e7c6      	b.n	8004326 <_printf_common+0x3e>
 8004398:	18e1      	adds	r1, r4, r3
 800439a:	1c5a      	adds	r2, r3, #1
 800439c:	2030      	movs	r0, #48	; 0x30
 800439e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80043a2:	4422      	add	r2, r4
 80043a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80043a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80043ac:	3302      	adds	r3, #2
 80043ae:	e7c7      	b.n	8004340 <_printf_common+0x58>
 80043b0:	2301      	movs	r3, #1
 80043b2:	4622      	mov	r2, r4
 80043b4:	4649      	mov	r1, r9
 80043b6:	4638      	mov	r0, r7
 80043b8:	47c0      	blx	r8
 80043ba:	3001      	adds	r0, #1
 80043bc:	d0e6      	beq.n	800438c <_printf_common+0xa4>
 80043be:	3601      	adds	r6, #1
 80043c0:	e7d9      	b.n	8004376 <_printf_common+0x8e>
	...

080043c4 <_printf_i>:
 80043c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80043c8:	7e0f      	ldrb	r7, [r1, #24]
 80043ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80043cc:	2f78      	cmp	r7, #120	; 0x78
 80043ce:	4691      	mov	r9, r2
 80043d0:	4680      	mov	r8, r0
 80043d2:	460c      	mov	r4, r1
 80043d4:	469a      	mov	sl, r3
 80043d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80043da:	d807      	bhi.n	80043ec <_printf_i+0x28>
 80043dc:	2f62      	cmp	r7, #98	; 0x62
 80043de:	d80a      	bhi.n	80043f6 <_printf_i+0x32>
 80043e0:	2f00      	cmp	r7, #0
 80043e2:	f000 80d8 	beq.w	8004596 <_printf_i+0x1d2>
 80043e6:	2f58      	cmp	r7, #88	; 0x58
 80043e8:	f000 80a3 	beq.w	8004532 <_printf_i+0x16e>
 80043ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80043f4:	e03a      	b.n	800446c <_printf_i+0xa8>
 80043f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80043fa:	2b15      	cmp	r3, #21
 80043fc:	d8f6      	bhi.n	80043ec <_printf_i+0x28>
 80043fe:	a101      	add	r1, pc, #4	; (adr r1, 8004404 <_printf_i+0x40>)
 8004400:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004404:	0800445d 	.word	0x0800445d
 8004408:	08004471 	.word	0x08004471
 800440c:	080043ed 	.word	0x080043ed
 8004410:	080043ed 	.word	0x080043ed
 8004414:	080043ed 	.word	0x080043ed
 8004418:	080043ed 	.word	0x080043ed
 800441c:	08004471 	.word	0x08004471
 8004420:	080043ed 	.word	0x080043ed
 8004424:	080043ed 	.word	0x080043ed
 8004428:	080043ed 	.word	0x080043ed
 800442c:	080043ed 	.word	0x080043ed
 8004430:	0800457d 	.word	0x0800457d
 8004434:	080044a1 	.word	0x080044a1
 8004438:	0800455f 	.word	0x0800455f
 800443c:	080043ed 	.word	0x080043ed
 8004440:	080043ed 	.word	0x080043ed
 8004444:	0800459f 	.word	0x0800459f
 8004448:	080043ed 	.word	0x080043ed
 800444c:	080044a1 	.word	0x080044a1
 8004450:	080043ed 	.word	0x080043ed
 8004454:	080043ed 	.word	0x080043ed
 8004458:	08004567 	.word	0x08004567
 800445c:	682b      	ldr	r3, [r5, #0]
 800445e:	1d1a      	adds	r2, r3, #4
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	602a      	str	r2, [r5, #0]
 8004464:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004468:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800446c:	2301      	movs	r3, #1
 800446e:	e0a3      	b.n	80045b8 <_printf_i+0x1f4>
 8004470:	6820      	ldr	r0, [r4, #0]
 8004472:	6829      	ldr	r1, [r5, #0]
 8004474:	0606      	lsls	r6, r0, #24
 8004476:	f101 0304 	add.w	r3, r1, #4
 800447a:	d50a      	bpl.n	8004492 <_printf_i+0xce>
 800447c:	680e      	ldr	r6, [r1, #0]
 800447e:	602b      	str	r3, [r5, #0]
 8004480:	2e00      	cmp	r6, #0
 8004482:	da03      	bge.n	800448c <_printf_i+0xc8>
 8004484:	232d      	movs	r3, #45	; 0x2d
 8004486:	4276      	negs	r6, r6
 8004488:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800448c:	485e      	ldr	r0, [pc, #376]	; (8004608 <_printf_i+0x244>)
 800448e:	230a      	movs	r3, #10
 8004490:	e019      	b.n	80044c6 <_printf_i+0x102>
 8004492:	680e      	ldr	r6, [r1, #0]
 8004494:	602b      	str	r3, [r5, #0]
 8004496:	f010 0f40 	tst.w	r0, #64	; 0x40
 800449a:	bf18      	it	ne
 800449c:	b236      	sxthne	r6, r6
 800449e:	e7ef      	b.n	8004480 <_printf_i+0xbc>
 80044a0:	682b      	ldr	r3, [r5, #0]
 80044a2:	6820      	ldr	r0, [r4, #0]
 80044a4:	1d19      	adds	r1, r3, #4
 80044a6:	6029      	str	r1, [r5, #0]
 80044a8:	0601      	lsls	r1, r0, #24
 80044aa:	d501      	bpl.n	80044b0 <_printf_i+0xec>
 80044ac:	681e      	ldr	r6, [r3, #0]
 80044ae:	e002      	b.n	80044b6 <_printf_i+0xf2>
 80044b0:	0646      	lsls	r6, r0, #25
 80044b2:	d5fb      	bpl.n	80044ac <_printf_i+0xe8>
 80044b4:	881e      	ldrh	r6, [r3, #0]
 80044b6:	4854      	ldr	r0, [pc, #336]	; (8004608 <_printf_i+0x244>)
 80044b8:	2f6f      	cmp	r7, #111	; 0x6f
 80044ba:	bf0c      	ite	eq
 80044bc:	2308      	moveq	r3, #8
 80044be:	230a      	movne	r3, #10
 80044c0:	2100      	movs	r1, #0
 80044c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80044c6:	6865      	ldr	r5, [r4, #4]
 80044c8:	60a5      	str	r5, [r4, #8]
 80044ca:	2d00      	cmp	r5, #0
 80044cc:	bfa2      	ittt	ge
 80044ce:	6821      	ldrge	r1, [r4, #0]
 80044d0:	f021 0104 	bicge.w	r1, r1, #4
 80044d4:	6021      	strge	r1, [r4, #0]
 80044d6:	b90e      	cbnz	r6, 80044dc <_printf_i+0x118>
 80044d8:	2d00      	cmp	r5, #0
 80044da:	d04d      	beq.n	8004578 <_printf_i+0x1b4>
 80044dc:	4615      	mov	r5, r2
 80044de:	fbb6 f1f3 	udiv	r1, r6, r3
 80044e2:	fb03 6711 	mls	r7, r3, r1, r6
 80044e6:	5dc7      	ldrb	r7, [r0, r7]
 80044e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80044ec:	4637      	mov	r7, r6
 80044ee:	42bb      	cmp	r3, r7
 80044f0:	460e      	mov	r6, r1
 80044f2:	d9f4      	bls.n	80044de <_printf_i+0x11a>
 80044f4:	2b08      	cmp	r3, #8
 80044f6:	d10b      	bne.n	8004510 <_printf_i+0x14c>
 80044f8:	6823      	ldr	r3, [r4, #0]
 80044fa:	07de      	lsls	r6, r3, #31
 80044fc:	d508      	bpl.n	8004510 <_printf_i+0x14c>
 80044fe:	6923      	ldr	r3, [r4, #16]
 8004500:	6861      	ldr	r1, [r4, #4]
 8004502:	4299      	cmp	r1, r3
 8004504:	bfde      	ittt	le
 8004506:	2330      	movle	r3, #48	; 0x30
 8004508:	f805 3c01 	strble.w	r3, [r5, #-1]
 800450c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004510:	1b52      	subs	r2, r2, r5
 8004512:	6122      	str	r2, [r4, #16]
 8004514:	f8cd a000 	str.w	sl, [sp]
 8004518:	464b      	mov	r3, r9
 800451a:	aa03      	add	r2, sp, #12
 800451c:	4621      	mov	r1, r4
 800451e:	4640      	mov	r0, r8
 8004520:	f7ff fee2 	bl	80042e8 <_printf_common>
 8004524:	3001      	adds	r0, #1
 8004526:	d14c      	bne.n	80045c2 <_printf_i+0x1fe>
 8004528:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800452c:	b004      	add	sp, #16
 800452e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004532:	4835      	ldr	r0, [pc, #212]	; (8004608 <_printf_i+0x244>)
 8004534:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004538:	6829      	ldr	r1, [r5, #0]
 800453a:	6823      	ldr	r3, [r4, #0]
 800453c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004540:	6029      	str	r1, [r5, #0]
 8004542:	061d      	lsls	r5, r3, #24
 8004544:	d514      	bpl.n	8004570 <_printf_i+0x1ac>
 8004546:	07df      	lsls	r7, r3, #31
 8004548:	bf44      	itt	mi
 800454a:	f043 0320 	orrmi.w	r3, r3, #32
 800454e:	6023      	strmi	r3, [r4, #0]
 8004550:	b91e      	cbnz	r6, 800455a <_printf_i+0x196>
 8004552:	6823      	ldr	r3, [r4, #0]
 8004554:	f023 0320 	bic.w	r3, r3, #32
 8004558:	6023      	str	r3, [r4, #0]
 800455a:	2310      	movs	r3, #16
 800455c:	e7b0      	b.n	80044c0 <_printf_i+0xfc>
 800455e:	6823      	ldr	r3, [r4, #0]
 8004560:	f043 0320 	orr.w	r3, r3, #32
 8004564:	6023      	str	r3, [r4, #0]
 8004566:	2378      	movs	r3, #120	; 0x78
 8004568:	4828      	ldr	r0, [pc, #160]	; (800460c <_printf_i+0x248>)
 800456a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800456e:	e7e3      	b.n	8004538 <_printf_i+0x174>
 8004570:	0659      	lsls	r1, r3, #25
 8004572:	bf48      	it	mi
 8004574:	b2b6      	uxthmi	r6, r6
 8004576:	e7e6      	b.n	8004546 <_printf_i+0x182>
 8004578:	4615      	mov	r5, r2
 800457a:	e7bb      	b.n	80044f4 <_printf_i+0x130>
 800457c:	682b      	ldr	r3, [r5, #0]
 800457e:	6826      	ldr	r6, [r4, #0]
 8004580:	6961      	ldr	r1, [r4, #20]
 8004582:	1d18      	adds	r0, r3, #4
 8004584:	6028      	str	r0, [r5, #0]
 8004586:	0635      	lsls	r5, r6, #24
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	d501      	bpl.n	8004590 <_printf_i+0x1cc>
 800458c:	6019      	str	r1, [r3, #0]
 800458e:	e002      	b.n	8004596 <_printf_i+0x1d2>
 8004590:	0670      	lsls	r0, r6, #25
 8004592:	d5fb      	bpl.n	800458c <_printf_i+0x1c8>
 8004594:	8019      	strh	r1, [r3, #0]
 8004596:	2300      	movs	r3, #0
 8004598:	6123      	str	r3, [r4, #16]
 800459a:	4615      	mov	r5, r2
 800459c:	e7ba      	b.n	8004514 <_printf_i+0x150>
 800459e:	682b      	ldr	r3, [r5, #0]
 80045a0:	1d1a      	adds	r2, r3, #4
 80045a2:	602a      	str	r2, [r5, #0]
 80045a4:	681d      	ldr	r5, [r3, #0]
 80045a6:	6862      	ldr	r2, [r4, #4]
 80045a8:	2100      	movs	r1, #0
 80045aa:	4628      	mov	r0, r5
 80045ac:	f7fb fe10 	bl	80001d0 <memchr>
 80045b0:	b108      	cbz	r0, 80045b6 <_printf_i+0x1f2>
 80045b2:	1b40      	subs	r0, r0, r5
 80045b4:	6060      	str	r0, [r4, #4]
 80045b6:	6863      	ldr	r3, [r4, #4]
 80045b8:	6123      	str	r3, [r4, #16]
 80045ba:	2300      	movs	r3, #0
 80045bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045c0:	e7a8      	b.n	8004514 <_printf_i+0x150>
 80045c2:	6923      	ldr	r3, [r4, #16]
 80045c4:	462a      	mov	r2, r5
 80045c6:	4649      	mov	r1, r9
 80045c8:	4640      	mov	r0, r8
 80045ca:	47d0      	blx	sl
 80045cc:	3001      	adds	r0, #1
 80045ce:	d0ab      	beq.n	8004528 <_printf_i+0x164>
 80045d0:	6823      	ldr	r3, [r4, #0]
 80045d2:	079b      	lsls	r3, r3, #30
 80045d4:	d413      	bmi.n	80045fe <_printf_i+0x23a>
 80045d6:	68e0      	ldr	r0, [r4, #12]
 80045d8:	9b03      	ldr	r3, [sp, #12]
 80045da:	4298      	cmp	r0, r3
 80045dc:	bfb8      	it	lt
 80045de:	4618      	movlt	r0, r3
 80045e0:	e7a4      	b.n	800452c <_printf_i+0x168>
 80045e2:	2301      	movs	r3, #1
 80045e4:	4632      	mov	r2, r6
 80045e6:	4649      	mov	r1, r9
 80045e8:	4640      	mov	r0, r8
 80045ea:	47d0      	blx	sl
 80045ec:	3001      	adds	r0, #1
 80045ee:	d09b      	beq.n	8004528 <_printf_i+0x164>
 80045f0:	3501      	adds	r5, #1
 80045f2:	68e3      	ldr	r3, [r4, #12]
 80045f4:	9903      	ldr	r1, [sp, #12]
 80045f6:	1a5b      	subs	r3, r3, r1
 80045f8:	42ab      	cmp	r3, r5
 80045fa:	dcf2      	bgt.n	80045e2 <_printf_i+0x21e>
 80045fc:	e7eb      	b.n	80045d6 <_printf_i+0x212>
 80045fe:	2500      	movs	r5, #0
 8004600:	f104 0619 	add.w	r6, r4, #25
 8004604:	e7f5      	b.n	80045f2 <_printf_i+0x22e>
 8004606:	bf00      	nop
 8004608:	08004b0d 	.word	0x08004b0d
 800460c:	08004b1e 	.word	0x08004b1e

08004610 <_sbrk_r>:
 8004610:	b538      	push	{r3, r4, r5, lr}
 8004612:	4d06      	ldr	r5, [pc, #24]	; (800462c <_sbrk_r+0x1c>)
 8004614:	2300      	movs	r3, #0
 8004616:	4604      	mov	r4, r0
 8004618:	4608      	mov	r0, r1
 800461a:	602b      	str	r3, [r5, #0]
 800461c:	f7fc f8d8 	bl	80007d0 <_sbrk>
 8004620:	1c43      	adds	r3, r0, #1
 8004622:	d102      	bne.n	800462a <_sbrk_r+0x1a>
 8004624:	682b      	ldr	r3, [r5, #0]
 8004626:	b103      	cbz	r3, 800462a <_sbrk_r+0x1a>
 8004628:	6023      	str	r3, [r4, #0]
 800462a:	bd38      	pop	{r3, r4, r5, pc}
 800462c:	20000848 	.word	0x20000848

08004630 <__sread>:
 8004630:	b510      	push	{r4, lr}
 8004632:	460c      	mov	r4, r1
 8004634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004638:	f000 f8a0 	bl	800477c <_read_r>
 800463c:	2800      	cmp	r0, #0
 800463e:	bfab      	itete	ge
 8004640:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004642:	89a3      	ldrhlt	r3, [r4, #12]
 8004644:	181b      	addge	r3, r3, r0
 8004646:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800464a:	bfac      	ite	ge
 800464c:	6563      	strge	r3, [r4, #84]	; 0x54
 800464e:	81a3      	strhlt	r3, [r4, #12]
 8004650:	bd10      	pop	{r4, pc}

08004652 <__swrite>:
 8004652:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004656:	461f      	mov	r7, r3
 8004658:	898b      	ldrh	r3, [r1, #12]
 800465a:	05db      	lsls	r3, r3, #23
 800465c:	4605      	mov	r5, r0
 800465e:	460c      	mov	r4, r1
 8004660:	4616      	mov	r6, r2
 8004662:	d505      	bpl.n	8004670 <__swrite+0x1e>
 8004664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004668:	2302      	movs	r3, #2
 800466a:	2200      	movs	r2, #0
 800466c:	f000 f868 	bl	8004740 <_lseek_r>
 8004670:	89a3      	ldrh	r3, [r4, #12]
 8004672:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004676:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800467a:	81a3      	strh	r3, [r4, #12]
 800467c:	4632      	mov	r2, r6
 800467e:	463b      	mov	r3, r7
 8004680:	4628      	mov	r0, r5
 8004682:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004686:	f000 b817 	b.w	80046b8 <_write_r>

0800468a <__sseek>:
 800468a:	b510      	push	{r4, lr}
 800468c:	460c      	mov	r4, r1
 800468e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004692:	f000 f855 	bl	8004740 <_lseek_r>
 8004696:	1c43      	adds	r3, r0, #1
 8004698:	89a3      	ldrh	r3, [r4, #12]
 800469a:	bf15      	itete	ne
 800469c:	6560      	strne	r0, [r4, #84]	; 0x54
 800469e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80046a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80046a6:	81a3      	strheq	r3, [r4, #12]
 80046a8:	bf18      	it	ne
 80046aa:	81a3      	strhne	r3, [r4, #12]
 80046ac:	bd10      	pop	{r4, pc}

080046ae <__sclose>:
 80046ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046b2:	f000 b813 	b.w	80046dc <_close_r>
	...

080046b8 <_write_r>:
 80046b8:	b538      	push	{r3, r4, r5, lr}
 80046ba:	4d07      	ldr	r5, [pc, #28]	; (80046d8 <_write_r+0x20>)
 80046bc:	4604      	mov	r4, r0
 80046be:	4608      	mov	r0, r1
 80046c0:	4611      	mov	r1, r2
 80046c2:	2200      	movs	r2, #0
 80046c4:	602a      	str	r2, [r5, #0]
 80046c6:	461a      	mov	r2, r3
 80046c8:	f7fb ff52 	bl	8000570 <_write>
 80046cc:	1c43      	adds	r3, r0, #1
 80046ce:	d102      	bne.n	80046d6 <_write_r+0x1e>
 80046d0:	682b      	ldr	r3, [r5, #0]
 80046d2:	b103      	cbz	r3, 80046d6 <_write_r+0x1e>
 80046d4:	6023      	str	r3, [r4, #0]
 80046d6:	bd38      	pop	{r3, r4, r5, pc}
 80046d8:	20000848 	.word	0x20000848

080046dc <_close_r>:
 80046dc:	b538      	push	{r3, r4, r5, lr}
 80046de:	4d06      	ldr	r5, [pc, #24]	; (80046f8 <_close_r+0x1c>)
 80046e0:	2300      	movs	r3, #0
 80046e2:	4604      	mov	r4, r0
 80046e4:	4608      	mov	r0, r1
 80046e6:	602b      	str	r3, [r5, #0]
 80046e8:	f7fc f83d 	bl	8000766 <_close>
 80046ec:	1c43      	adds	r3, r0, #1
 80046ee:	d102      	bne.n	80046f6 <_close_r+0x1a>
 80046f0:	682b      	ldr	r3, [r5, #0]
 80046f2:	b103      	cbz	r3, 80046f6 <_close_r+0x1a>
 80046f4:	6023      	str	r3, [r4, #0]
 80046f6:	bd38      	pop	{r3, r4, r5, pc}
 80046f8:	20000848 	.word	0x20000848

080046fc <_fstat_r>:
 80046fc:	b538      	push	{r3, r4, r5, lr}
 80046fe:	4d07      	ldr	r5, [pc, #28]	; (800471c <_fstat_r+0x20>)
 8004700:	2300      	movs	r3, #0
 8004702:	4604      	mov	r4, r0
 8004704:	4608      	mov	r0, r1
 8004706:	4611      	mov	r1, r2
 8004708:	602b      	str	r3, [r5, #0]
 800470a:	f7fc f838 	bl	800077e <_fstat>
 800470e:	1c43      	adds	r3, r0, #1
 8004710:	d102      	bne.n	8004718 <_fstat_r+0x1c>
 8004712:	682b      	ldr	r3, [r5, #0]
 8004714:	b103      	cbz	r3, 8004718 <_fstat_r+0x1c>
 8004716:	6023      	str	r3, [r4, #0]
 8004718:	bd38      	pop	{r3, r4, r5, pc}
 800471a:	bf00      	nop
 800471c:	20000848 	.word	0x20000848

08004720 <_isatty_r>:
 8004720:	b538      	push	{r3, r4, r5, lr}
 8004722:	4d06      	ldr	r5, [pc, #24]	; (800473c <_isatty_r+0x1c>)
 8004724:	2300      	movs	r3, #0
 8004726:	4604      	mov	r4, r0
 8004728:	4608      	mov	r0, r1
 800472a:	602b      	str	r3, [r5, #0]
 800472c:	f7fc f837 	bl	800079e <_isatty>
 8004730:	1c43      	adds	r3, r0, #1
 8004732:	d102      	bne.n	800473a <_isatty_r+0x1a>
 8004734:	682b      	ldr	r3, [r5, #0]
 8004736:	b103      	cbz	r3, 800473a <_isatty_r+0x1a>
 8004738:	6023      	str	r3, [r4, #0]
 800473a:	bd38      	pop	{r3, r4, r5, pc}
 800473c:	20000848 	.word	0x20000848

08004740 <_lseek_r>:
 8004740:	b538      	push	{r3, r4, r5, lr}
 8004742:	4d07      	ldr	r5, [pc, #28]	; (8004760 <_lseek_r+0x20>)
 8004744:	4604      	mov	r4, r0
 8004746:	4608      	mov	r0, r1
 8004748:	4611      	mov	r1, r2
 800474a:	2200      	movs	r2, #0
 800474c:	602a      	str	r2, [r5, #0]
 800474e:	461a      	mov	r2, r3
 8004750:	f7fc f830 	bl	80007b4 <_lseek>
 8004754:	1c43      	adds	r3, r0, #1
 8004756:	d102      	bne.n	800475e <_lseek_r+0x1e>
 8004758:	682b      	ldr	r3, [r5, #0]
 800475a:	b103      	cbz	r3, 800475e <_lseek_r+0x1e>
 800475c:	6023      	str	r3, [r4, #0]
 800475e:	bd38      	pop	{r3, r4, r5, pc}
 8004760:	20000848 	.word	0x20000848

08004764 <__malloc_lock>:
 8004764:	4801      	ldr	r0, [pc, #4]	; (800476c <__malloc_lock+0x8>)
 8004766:	f7ff bb15 	b.w	8003d94 <__retarget_lock_acquire_recursive>
 800476a:	bf00      	nop
 800476c:	2000083c 	.word	0x2000083c

08004770 <__malloc_unlock>:
 8004770:	4801      	ldr	r0, [pc, #4]	; (8004778 <__malloc_unlock+0x8>)
 8004772:	f7ff bb10 	b.w	8003d96 <__retarget_lock_release_recursive>
 8004776:	bf00      	nop
 8004778:	2000083c 	.word	0x2000083c

0800477c <_read_r>:
 800477c:	b538      	push	{r3, r4, r5, lr}
 800477e:	4d07      	ldr	r5, [pc, #28]	; (800479c <_read_r+0x20>)
 8004780:	4604      	mov	r4, r0
 8004782:	4608      	mov	r0, r1
 8004784:	4611      	mov	r1, r2
 8004786:	2200      	movs	r2, #0
 8004788:	602a      	str	r2, [r5, #0]
 800478a:	461a      	mov	r2, r3
 800478c:	f7fb ffce 	bl	800072c <_read>
 8004790:	1c43      	adds	r3, r0, #1
 8004792:	d102      	bne.n	800479a <_read_r+0x1e>
 8004794:	682b      	ldr	r3, [r5, #0]
 8004796:	b103      	cbz	r3, 800479a <_read_r+0x1e>
 8004798:	6023      	str	r3, [r4, #0]
 800479a:	bd38      	pop	{r3, r4, r5, pc}
 800479c:	20000848 	.word	0x20000848

080047a0 <_init>:
 80047a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047a2:	bf00      	nop
 80047a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047a6:	bc08      	pop	{r3}
 80047a8:	469e      	mov	lr, r3
 80047aa:	4770      	bx	lr

080047ac <_fini>:
 80047ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ae:	bf00      	nop
 80047b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047b2:	bc08      	pop	{r3}
 80047b4:	469e      	mov	lr, r3
 80047b6:	4770      	bx	lr
