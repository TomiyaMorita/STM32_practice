
stm32_f446_usart2can.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b04  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004cc8  08004cc8  00014cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ce8  08004ce8  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08004ce8  08004ce8  00014ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004cf0  08004cf0  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cf0  08004cf0  00014cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004cf4  08004cf4  00014cf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08004cf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  2000001c  08004d14  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  08004d14  000201d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b7d4  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001af4  00000000  00000000  0002b820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008b8  00000000  00000000  0002d318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000820  00000000  00000000  0002dbd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002093d  00000000  00000000  0002e3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aed0  00000000  00000000  0004ed2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c70a2  00000000  00000000  00059bfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00120c9f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002340  00000000  00000000  00120cf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000001c 	.word	0x2000001c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004cb0 	.word	0x08004cb0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000020 	.word	0x20000020
 8000200:	08004cb0 	.word	0x08004cb0

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800050c:	4b0e      	ldr	r3, [pc, #56]	; (8000548 <HAL_Init+0x40>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a0d      	ldr	r2, [pc, #52]	; (8000548 <HAL_Init+0x40>)
 8000512:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000516:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000518:	4b0b      	ldr	r3, [pc, #44]	; (8000548 <HAL_Init+0x40>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a0a      	ldr	r2, [pc, #40]	; (8000548 <HAL_Init+0x40>)
 800051e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000522:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000524:	4b08      	ldr	r3, [pc, #32]	; (8000548 <HAL_Init+0x40>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a07      	ldr	r2, [pc, #28]	; (8000548 <HAL_Init+0x40>)
 800052a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800052e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000530:	2003      	movs	r0, #3
 8000532:	f000 ff8d 	bl	8001450 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000536:	2000      	movs	r0, #0
 8000538:	f000 f808 	bl	800054c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800053c:	f004 f934 	bl	80047a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000540:	2300      	movs	r3, #0
}
 8000542:	4618      	mov	r0, r3
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	40023c00 	.word	0x40023c00

0800054c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000554:	4b12      	ldr	r3, [pc, #72]	; (80005a0 <HAL_InitTick+0x54>)
 8000556:	681a      	ldr	r2, [r3, #0]
 8000558:	4b12      	ldr	r3, [pc, #72]	; (80005a4 <HAL_InitTick+0x58>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	4619      	mov	r1, r3
 800055e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000562:	fbb3 f3f1 	udiv	r3, r3, r1
 8000566:	fbb2 f3f3 	udiv	r3, r2, r3
 800056a:	4618      	mov	r0, r3
 800056c:	f000 ffa5 	bl	80014ba <HAL_SYSTICK_Config>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000576:	2301      	movs	r3, #1
 8000578:	e00e      	b.n	8000598 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	2b0f      	cmp	r3, #15
 800057e:	d80a      	bhi.n	8000596 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000580:	2200      	movs	r2, #0
 8000582:	6879      	ldr	r1, [r7, #4]
 8000584:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000588:	f000 ff6d 	bl	8001466 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800058c:	4a06      	ldr	r2, [pc, #24]	; (80005a8 <HAL_InitTick+0x5c>)
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000592:	2300      	movs	r3, #0
 8000594:	e000      	b.n	8000598 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000596:	2301      	movs	r3, #1
}
 8000598:	4618      	mov	r0, r3
 800059a:	3708      	adds	r7, #8
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	20000018 	.word	0x20000018
 80005a4:	20000004 	.word	0x20000004
 80005a8:	20000000 	.word	0x20000000

080005ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005b0:	4b06      	ldr	r3, [pc, #24]	; (80005cc <HAL_IncTick+0x20>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	461a      	mov	r2, r3
 80005b6:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <HAL_IncTick+0x24>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	4413      	add	r3, r2
 80005bc:	4a04      	ldr	r2, [pc, #16]	; (80005d0 <HAL_IncTick+0x24>)
 80005be:	6013      	str	r3, [r2, #0]
}
 80005c0:	bf00      	nop
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	20000004 	.word	0x20000004
 80005d0:	20000038 	.word	0x20000038

080005d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  return uwTick;
 80005d8:	4b03      	ldr	r3, [pc, #12]	; (80005e8 <HAL_GetTick+0x14>)
 80005da:	681b      	ldr	r3, [r3, #0]
}
 80005dc:	4618      	mov	r0, r3
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	20000038 	.word	0x20000038

080005ec <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d101      	bne.n	80005fe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80005fa:	2301      	movs	r3, #1
 80005fc:	e0ed      	b.n	80007da <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000604:	b2db      	uxtb	r3, r3
 8000606:	2b00      	cmp	r3, #0
 8000608:	d102      	bne.n	8000610 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800060a:	6878      	ldr	r0, [r7, #4]
 800060c:	f004 f8f4 	bl	80047f8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	681a      	ldr	r2, [r3, #0]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	f042 0201 	orr.w	r2, r2, #1
 800061e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000620:	f7ff ffd8 	bl	80005d4 <HAL_GetTick>
 8000624:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000626:	e012      	b.n	800064e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000628:	f7ff ffd4 	bl	80005d4 <HAL_GetTick>
 800062c:	4602      	mov	r2, r0
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	1ad3      	subs	r3, r2, r3
 8000632:	2b0a      	cmp	r3, #10
 8000634:	d90b      	bls.n	800064e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800063a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	2205      	movs	r2, #5
 8000646:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800064a:	2301      	movs	r3, #1
 800064c:	e0c5      	b.n	80007da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	685b      	ldr	r3, [r3, #4]
 8000654:	f003 0301 	and.w	r3, r3, #1
 8000658:	2b00      	cmp	r3, #0
 800065a:	d0e5      	beq.n	8000628 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	681a      	ldr	r2, [r3, #0]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	f022 0202 	bic.w	r2, r2, #2
 800066a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800066c:	f7ff ffb2 	bl	80005d4 <HAL_GetTick>
 8000670:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000672:	e012      	b.n	800069a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000674:	f7ff ffae 	bl	80005d4 <HAL_GetTick>
 8000678:	4602      	mov	r2, r0
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	1ad3      	subs	r3, r2, r3
 800067e:	2b0a      	cmp	r3, #10
 8000680:	d90b      	bls.n	800069a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000686:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	2205      	movs	r2, #5
 8000692:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000696:	2301      	movs	r3, #1
 8000698:	e09f      	b.n	80007da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	685b      	ldr	r3, [r3, #4]
 80006a0:	f003 0302 	and.w	r3, r3, #2
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d1e5      	bne.n	8000674 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	7e1b      	ldrb	r3, [r3, #24]
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d108      	bne.n	80006c2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	e007      	b.n	80006d2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	681a      	ldr	r2, [r3, #0]
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80006d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	7e5b      	ldrb	r3, [r3, #25]
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	d108      	bne.n	80006ec <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	681a      	ldr	r2, [r3, #0]
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	e007      	b.n	80006fc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	681a      	ldr	r2, [r3, #0]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80006fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	7e9b      	ldrb	r3, [r3, #26]
 8000700:	2b01      	cmp	r3, #1
 8000702:	d108      	bne.n	8000716 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	681a      	ldr	r2, [r3, #0]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	f042 0220 	orr.w	r2, r2, #32
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	e007      	b.n	8000726 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	681a      	ldr	r2, [r3, #0]
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f022 0220 	bic.w	r2, r2, #32
 8000724:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	7edb      	ldrb	r3, [r3, #27]
 800072a:	2b01      	cmp	r3, #1
 800072c:	d108      	bne.n	8000740 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	681a      	ldr	r2, [r3, #0]
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f022 0210 	bic.w	r2, r2, #16
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	e007      	b.n	8000750 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	681a      	ldr	r2, [r3, #0]
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	f042 0210 	orr.w	r2, r2, #16
 800074e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	7f1b      	ldrb	r3, [r3, #28]
 8000754:	2b01      	cmp	r3, #1
 8000756:	d108      	bne.n	800076a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	f042 0208 	orr.w	r2, r2, #8
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	e007      	b.n	800077a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	681a      	ldr	r2, [r3, #0]
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	f022 0208 	bic.w	r2, r2, #8
 8000778:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	7f5b      	ldrb	r3, [r3, #29]
 800077e:	2b01      	cmp	r3, #1
 8000780:	d108      	bne.n	8000794 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	681a      	ldr	r2, [r3, #0]
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f042 0204 	orr.w	r2, r2, #4
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	e007      	b.n	80007a4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	681a      	ldr	r2, [r3, #0]
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	f022 0204 	bic.w	r2, r2, #4
 80007a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	689a      	ldr	r2, [r3, #8]
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	68db      	ldr	r3, [r3, #12]
 80007ac:	431a      	orrs	r2, r3
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	691b      	ldr	r3, [r3, #16]
 80007b2:	431a      	orrs	r2, r3
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	695b      	ldr	r3, [r3, #20]
 80007b8:	ea42 0103 	orr.w	r1, r2, r3
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	685b      	ldr	r3, [r3, #4]
 80007c0:	1e5a      	subs	r2, r3, #1
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	430a      	orrs	r2, r1
 80007c8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	2200      	movs	r2, #0
 80007ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2201      	movs	r2, #1
 80007d4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80007d8:	2300      	movs	r3, #0
}
 80007da:	4618      	mov	r0, r3
 80007dc:	3710      	adds	r7, #16
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
	...

080007e4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b087      	sub	sp, #28
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
 80007ec:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80007fa:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80007fc:	7cfb      	ldrb	r3, [r7, #19]
 80007fe:	2b01      	cmp	r3, #1
 8000800:	d003      	beq.n	800080a <HAL_CAN_ConfigFilter+0x26>
 8000802:	7cfb      	ldrb	r3, [r7, #19]
 8000804:	2b02      	cmp	r3, #2
 8000806:	f040 80be 	bne.w	8000986 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800080a:	4b65      	ldr	r3, [pc, #404]	; (80009a0 <HAL_CAN_ConfigFilter+0x1bc>)
 800080c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800080e:	697b      	ldr	r3, [r7, #20]
 8000810:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000814:	f043 0201 	orr.w	r2, r3, #1
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000824:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000828:	697b      	ldr	r3, [r7, #20]
 800082a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800082e:	697b      	ldr	r3, [r7, #20]
 8000830:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000838:	021b      	lsls	r3, r3, #8
 800083a:	431a      	orrs	r2, r3
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	695b      	ldr	r3, [r3, #20]
 8000846:	f003 031f 	and.w	r3, r3, #31
 800084a:	2201      	movs	r2, #1
 800084c:	fa02 f303 	lsl.w	r3, r2, r3
 8000850:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000852:	697b      	ldr	r3, [r7, #20]
 8000854:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	43db      	mvns	r3, r3
 800085c:	401a      	ands	r2, r3
 800085e:	697b      	ldr	r3, [r7, #20]
 8000860:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	69db      	ldr	r3, [r3, #28]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d123      	bne.n	80008b4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	43db      	mvns	r3, r3
 8000876:	401a      	ands	r2, r3
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	68db      	ldr	r3, [r3, #12]
 8000882:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	685b      	ldr	r3, [r3, #4]
 8000888:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800088a:	683a      	ldr	r2, [r7, #0]
 800088c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800088e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	3248      	adds	r2, #72	; 0x48
 8000894:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	689b      	ldr	r3, [r3, #8]
 800089c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80008a8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80008aa:	6979      	ldr	r1, [r7, #20]
 80008ac:	3348      	adds	r3, #72	; 0x48
 80008ae:	00db      	lsls	r3, r3, #3
 80008b0:	440b      	add	r3, r1
 80008b2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	69db      	ldr	r3, [r3, #28]
 80008b8:	2b01      	cmp	r3, #1
 80008ba:	d122      	bne.n	8000902 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	431a      	orrs	r2, r3
 80008c6:	697b      	ldr	r3, [r7, #20]
 80008c8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	685b      	ldr	r3, [r3, #4]
 80008d6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80008d8:	683a      	ldr	r2, [r7, #0]
 80008da:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80008dc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80008de:	697b      	ldr	r3, [r7, #20]
 80008e0:	3248      	adds	r2, #72	; 0x48
 80008e2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	689b      	ldr	r3, [r3, #8]
 80008ea:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	68db      	ldr	r3, [r3, #12]
 80008f0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80008f6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80008f8:	6979      	ldr	r1, [r7, #20]
 80008fa:	3348      	adds	r3, #72	; 0x48
 80008fc:	00db      	lsls	r3, r3, #3
 80008fe:	440b      	add	r3, r1
 8000900:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	699b      	ldr	r3, [r3, #24]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d109      	bne.n	800091e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800090a:	697b      	ldr	r3, [r7, #20]
 800090c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	43db      	mvns	r3, r3
 8000914:	401a      	ands	r2, r3
 8000916:	697b      	ldr	r3, [r7, #20]
 8000918:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800091c:	e007      	b.n	800092e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	431a      	orrs	r2, r3
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	691b      	ldr	r3, [r3, #16]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d109      	bne.n	800094a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	43db      	mvns	r3, r3
 8000940:	401a      	ands	r2, r3
 8000942:	697b      	ldr	r3, [r7, #20]
 8000944:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000948:	e007      	b.n	800095a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	431a      	orrs	r2, r3
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	6a1b      	ldr	r3, [r3, #32]
 800095e:	2b01      	cmp	r3, #1
 8000960:	d107      	bne.n	8000972 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	431a      	orrs	r2, r3
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000978:	f023 0201 	bic.w	r2, r3, #1
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000982:	2300      	movs	r3, #0
 8000984:	e006      	b.n	8000994 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800098a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000992:	2301      	movs	r3, #1
  }
}
 8000994:	4618      	mov	r0, r3
 8000996:	371c      	adds	r7, #28
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr
 80009a0:	40006400 	.word	0x40006400

080009a4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d12e      	bne.n	8000a16 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2202      	movs	r2, #2
 80009bc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	681a      	ldr	r2, [r3, #0]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	f022 0201 	bic.w	r2, r2, #1
 80009ce:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80009d0:	f7ff fe00 	bl	80005d4 <HAL_GetTick>
 80009d4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80009d6:	e012      	b.n	80009fe <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80009d8:	f7ff fdfc 	bl	80005d4 <HAL_GetTick>
 80009dc:	4602      	mov	r2, r0
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	1ad3      	subs	r3, r2, r3
 80009e2:	2b0a      	cmp	r3, #10
 80009e4:	d90b      	bls.n	80009fe <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2205      	movs	r2, #5
 80009f6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80009fa:	2301      	movs	r3, #1
 80009fc:	e012      	b.n	8000a24 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	f003 0301 	and.w	r3, r3, #1
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d1e5      	bne.n	80009d8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	2200      	movs	r2, #0
 8000a10:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000a12:	2300      	movs	r3, #0
 8000a14:	e006      	b.n	8000a24 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a1a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000a22:	2301      	movs	r3, #1
  }
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	3710      	adds	r7, #16
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b089      	sub	sp, #36	; 0x24
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	60f8      	str	r0, [r7, #12]
 8000a34:	60b9      	str	r1, [r7, #8]
 8000a36:	607a      	str	r2, [r7, #4]
 8000a38:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a40:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	689b      	ldr	r3, [r3, #8]
 8000a48:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000a4a:	7ffb      	ldrb	r3, [r7, #31]
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d003      	beq.n	8000a58 <HAL_CAN_AddTxMessage+0x2c>
 8000a50:	7ffb      	ldrb	r3, [r7, #31]
 8000a52:	2b02      	cmp	r3, #2
 8000a54:	f040 80b8 	bne.w	8000bc8 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000a58:	69bb      	ldr	r3, [r7, #24]
 8000a5a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d10a      	bne.n	8000a78 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000a62:	69bb      	ldr	r3, [r7, #24]
 8000a64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d105      	bne.n	8000a78 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000a6c:	69bb      	ldr	r3, [r7, #24]
 8000a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	f000 80a0 	beq.w	8000bb8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000a78:	69bb      	ldr	r3, [r7, #24]
 8000a7a:	0e1b      	lsrs	r3, r3, #24
 8000a7c:	f003 0303 	and.w	r3, r3, #3
 8000a80:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	2b02      	cmp	r3, #2
 8000a86:	d907      	bls.n	8000a98 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a8c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000a94:	2301      	movs	r3, #1
 8000a96:	e09e      	b.n	8000bd6 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000a98:	2201      	movs	r2, #1
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	409a      	lsls	r2, r3
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000aa2:	68bb      	ldr	r3, [r7, #8]
 8000aa4:	689b      	ldr	r3, [r3, #8]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d10d      	bne.n	8000ac6 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000aaa:	68bb      	ldr	r3, [r7, #8]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000ab4:	68f9      	ldr	r1, [r7, #12]
 8000ab6:	6809      	ldr	r1, [r1, #0]
 8000ab8:	431a      	orrs	r2, r3
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	3318      	adds	r3, #24
 8000abe:	011b      	lsls	r3, r3, #4
 8000ac0:	440b      	add	r3, r1
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	e00f      	b.n	8000ae6 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000ac6:	68bb      	ldr	r3, [r7, #8]
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000ad0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000ad2:	68bb      	ldr	r3, [r7, #8]
 8000ad4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000ad6:	68f9      	ldr	r1, [r7, #12]
 8000ad8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000ada:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	3318      	adds	r3, #24
 8000ae0:	011b      	lsls	r3, r3, #4
 8000ae2:	440b      	add	r3, r1
 8000ae4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	6819      	ldr	r1, [r3, #0]
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	691a      	ldr	r2, [r3, #16]
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	3318      	adds	r3, #24
 8000af2:	011b      	lsls	r3, r3, #4
 8000af4:	440b      	add	r3, r1
 8000af6:	3304      	adds	r3, #4
 8000af8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000afa:	68bb      	ldr	r3, [r7, #8]
 8000afc:	7d1b      	ldrb	r3, [r3, #20]
 8000afe:	2b01      	cmp	r3, #1
 8000b00:	d111      	bne.n	8000b26 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	3318      	adds	r3, #24
 8000b0a:	011b      	lsls	r3, r3, #4
 8000b0c:	4413      	add	r3, r2
 8000b0e:	3304      	adds	r3, #4
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	68fa      	ldr	r2, [r7, #12]
 8000b14:	6811      	ldr	r1, [r2, #0]
 8000b16:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	3318      	adds	r3, #24
 8000b1e:	011b      	lsls	r3, r3, #4
 8000b20:	440b      	add	r3, r1
 8000b22:	3304      	adds	r3, #4
 8000b24:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	3307      	adds	r3, #7
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	061a      	lsls	r2, r3, #24
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	3306      	adds	r3, #6
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	041b      	lsls	r3, r3, #16
 8000b36:	431a      	orrs	r2, r3
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	3305      	adds	r3, #5
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	021b      	lsls	r3, r3, #8
 8000b40:	4313      	orrs	r3, r2
 8000b42:	687a      	ldr	r2, [r7, #4]
 8000b44:	3204      	adds	r2, #4
 8000b46:	7812      	ldrb	r2, [r2, #0]
 8000b48:	4610      	mov	r0, r2
 8000b4a:	68fa      	ldr	r2, [r7, #12]
 8000b4c:	6811      	ldr	r1, [r2, #0]
 8000b4e:	ea43 0200 	orr.w	r2, r3, r0
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	011b      	lsls	r3, r3, #4
 8000b56:	440b      	add	r3, r1
 8000b58:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000b5c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	3303      	adds	r3, #3
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	061a      	lsls	r2, r3, #24
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	3302      	adds	r3, #2
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	041b      	lsls	r3, r3, #16
 8000b6e:	431a      	orrs	r2, r3
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	3301      	adds	r3, #1
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	021b      	lsls	r3, r3, #8
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	687a      	ldr	r2, [r7, #4]
 8000b7c:	7812      	ldrb	r2, [r2, #0]
 8000b7e:	4610      	mov	r0, r2
 8000b80:	68fa      	ldr	r2, [r7, #12]
 8000b82:	6811      	ldr	r1, [r2, #0]
 8000b84:	ea43 0200 	orr.w	r2, r3, r0
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	011b      	lsls	r3, r3, #4
 8000b8c:	440b      	add	r3, r1
 8000b8e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000b92:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	3318      	adds	r3, #24
 8000b9c:	011b      	lsls	r3, r3, #4
 8000b9e:	4413      	add	r3, r2
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	68fa      	ldr	r2, [r7, #12]
 8000ba4:	6811      	ldr	r1, [r2, #0]
 8000ba6:	f043 0201 	orr.w	r2, r3, #1
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	3318      	adds	r3, #24
 8000bae:	011b      	lsls	r3, r3, #4
 8000bb0:	440b      	add	r3, r1
 8000bb2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	e00e      	b.n	8000bd6 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bbc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	e006      	b.n	8000bd6 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bcc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000bd4:	2301      	movs	r3, #1
  }
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3724      	adds	r7, #36	; 0x24
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr

08000be2 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000be2:	b480      	push	{r7}
 8000be4:	b087      	sub	sp, #28
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	60f8      	str	r0, [r7, #12]
 8000bea:	60b9      	str	r1, [r7, #8]
 8000bec:	607a      	str	r2, [r7, #4]
 8000bee:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bf6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000bf8:	7dfb      	ldrb	r3, [r7, #23]
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d003      	beq.n	8000c06 <HAL_CAN_GetRxMessage+0x24>
 8000bfe:	7dfb      	ldrb	r3, [r7, #23]
 8000c00:	2b02      	cmp	r3, #2
 8000c02:	f040 80f3 	bne.w	8000dec <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000c06:	68bb      	ldr	r3, [r7, #8]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d10e      	bne.n	8000c2a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	68db      	ldr	r3, [r3, #12]
 8000c12:	f003 0303 	and.w	r3, r3, #3
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d116      	bne.n	8000c48 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c1e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000c26:	2301      	movs	r3, #1
 8000c28:	e0e7      	b.n	8000dfa <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	691b      	ldr	r3, [r3, #16]
 8000c30:	f003 0303 	and.w	r3, r3, #3
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d107      	bne.n	8000c48 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c3c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000c44:	2301      	movs	r3, #1
 8000c46:	e0d8      	b.n	8000dfa <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	331b      	adds	r3, #27
 8000c50:	011b      	lsls	r3, r3, #4
 8000c52:	4413      	add	r3, r2
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f003 0204 	and.w	r2, r3, #4
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	689b      	ldr	r3, [r3, #8]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d10c      	bne.n	8000c80 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	331b      	adds	r3, #27
 8000c6e:	011b      	lsls	r3, r3, #4
 8000c70:	4413      	add	r3, r2
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	0d5b      	lsrs	r3, r3, #21
 8000c76:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	e00b      	b.n	8000c98 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	331b      	adds	r3, #27
 8000c88:	011b      	lsls	r3, r3, #4
 8000c8a:	4413      	add	r3, r2
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	08db      	lsrs	r3, r3, #3
 8000c90:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	331b      	adds	r3, #27
 8000ca0:	011b      	lsls	r3, r3, #4
 8000ca2:	4413      	add	r3, r2
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f003 0202 	and.w	r2, r3, #2
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	331b      	adds	r3, #27
 8000cb6:	011b      	lsls	r3, r3, #4
 8000cb8:	4413      	add	r3, r2
 8000cba:	3304      	adds	r3, #4
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f003 020f 	and.w	r2, r3, #15
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	331b      	adds	r3, #27
 8000cce:	011b      	lsls	r3, r3, #4
 8000cd0:	4413      	add	r3, r2
 8000cd2:	3304      	adds	r3, #4
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	0a1b      	lsrs	r3, r3, #8
 8000cd8:	b2da      	uxtb	r2, r3
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	331b      	adds	r3, #27
 8000ce6:	011b      	lsls	r3, r3, #4
 8000ce8:	4413      	add	r3, r2
 8000cea:	3304      	adds	r3, #4
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	0c1b      	lsrs	r3, r3, #16
 8000cf0:	b29a      	uxth	r2, r3
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	011b      	lsls	r3, r3, #4
 8000cfe:	4413      	add	r3, r2
 8000d00:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	b2da      	uxtb	r2, r3
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	011b      	lsls	r3, r3, #4
 8000d14:	4413      	add	r3, r2
 8000d16:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	0a1a      	lsrs	r2, r3, #8
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	3301      	adds	r3, #1
 8000d22:	b2d2      	uxtb	r2, r2
 8000d24:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	68bb      	ldr	r3, [r7, #8]
 8000d2c:	011b      	lsls	r3, r3, #4
 8000d2e:	4413      	add	r3, r2
 8000d30:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	0c1a      	lsrs	r2, r3, #16
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	3302      	adds	r3, #2
 8000d3c:	b2d2      	uxtb	r2, r2
 8000d3e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	011b      	lsls	r3, r3, #4
 8000d48:	4413      	add	r3, r2
 8000d4a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	0e1a      	lsrs	r2, r3, #24
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	3303      	adds	r3, #3
 8000d56:	b2d2      	uxtb	r2, r2
 8000d58:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	68bb      	ldr	r3, [r7, #8]
 8000d60:	011b      	lsls	r3, r3, #4
 8000d62:	4413      	add	r3, r2
 8000d64:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	3304      	adds	r3, #4
 8000d6e:	b2d2      	uxtb	r2, r2
 8000d70:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	011b      	lsls	r3, r3, #4
 8000d7a:	4413      	add	r3, r2
 8000d7c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	0a1a      	lsrs	r2, r3, #8
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	3305      	adds	r3, #5
 8000d88:	b2d2      	uxtb	r2, r2
 8000d8a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	011b      	lsls	r3, r3, #4
 8000d94:	4413      	add	r3, r2
 8000d96:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	0c1a      	lsrs	r2, r3, #16
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	3306      	adds	r3, #6
 8000da2:	b2d2      	uxtb	r2, r2
 8000da4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	68bb      	ldr	r3, [r7, #8]
 8000dac:	011b      	lsls	r3, r3, #4
 8000dae:	4413      	add	r3, r2
 8000db0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	0e1a      	lsrs	r2, r3, #24
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	3307      	adds	r3, #7
 8000dbc:	b2d2      	uxtb	r2, r2
 8000dbe:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d108      	bne.n	8000dd8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	68da      	ldr	r2, [r3, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f042 0220 	orr.w	r2, r2, #32
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	e007      	b.n	8000de8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	691a      	ldr	r2, [r3, #16]
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f042 0220 	orr.w	r2, r2, #32
 8000de6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8000de8:	2300      	movs	r3, #0
 8000dea:	e006      	b.n	8000dfa <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000df8:	2301      	movs	r3, #1
  }
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	371c      	adds	r7, #28
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr

08000e06 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000e06:	b480      	push	{r7}
 8000e08:	b085      	sub	sp, #20
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	6078      	str	r0, [r7, #4]
 8000e0e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e16:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000e18:	7bfb      	ldrb	r3, [r7, #15]
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d002      	beq.n	8000e24 <HAL_CAN_ActivateNotification+0x1e>
 8000e1e:	7bfb      	ldrb	r3, [r7, #15]
 8000e20:	2b02      	cmp	r3, #2
 8000e22:	d109      	bne.n	8000e38 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	6959      	ldr	r1, [r3, #20]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	683a      	ldr	r2, [r7, #0]
 8000e30:	430a      	orrs	r2, r1
 8000e32:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8000e34:	2300      	movs	r3, #0
 8000e36:	e006      	b.n	8000e46 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e3c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e44:	2301      	movs	r3, #1
  }
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3714      	adds	r7, #20
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr

08000e52 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b08a      	sub	sp, #40	; 0x28
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	695b      	ldr	r3, [r3, #20]
 8000e64:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	689b      	ldr	r3, [r3, #8]
 8000e74:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	691b      	ldr	r3, [r3, #16]
 8000e84:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	699b      	ldr	r3, [r3, #24]
 8000e8c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000e8e:	6a3b      	ldr	r3, [r7, #32]
 8000e90:	f003 0301 	and.w	r3, r3, #1
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d07c      	beq.n	8000f92 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000e98:	69bb      	ldr	r3, [r7, #24]
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d023      	beq.n	8000eea <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000eaa:	69bb      	ldr	r3, [r7, #24]
 8000eac:	f003 0302 	and.w	r3, r3, #2
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d003      	beq.n	8000ebc <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f000 f983 	bl	80011c0 <HAL_CAN_TxMailbox0CompleteCallback>
 8000eba:	e016      	b.n	8000eea <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000ebc:	69bb      	ldr	r3, [r7, #24]
 8000ebe:	f003 0304 	and.w	r3, r3, #4
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d004      	beq.n	8000ed0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ecc:	627b      	str	r3, [r7, #36]	; 0x24
 8000ece:	e00c      	b.n	8000eea <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000ed0:	69bb      	ldr	r3, [r7, #24]
 8000ed2:	f003 0308 	and.w	r3, r3, #8
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d004      	beq.n	8000ee4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000edc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ee0:	627b      	str	r3, [r7, #36]	; 0x24
 8000ee2:	e002      	b.n	8000eea <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f000 f989 	bl	80011fc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000eea:	69bb      	ldr	r3, [r7, #24]
 8000eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d024      	beq.n	8000f3e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000efc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000efe:	69bb      	ldr	r3, [r7, #24]
 8000f00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d003      	beq.n	8000f10 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	f000 f963 	bl	80011d4 <HAL_CAN_TxMailbox1CompleteCallback>
 8000f0e:	e016      	b.n	8000f3e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000f10:	69bb      	ldr	r3, [r7, #24]
 8000f12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d004      	beq.n	8000f24 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f20:	627b      	str	r3, [r7, #36]	; 0x24
 8000f22:	e00c      	b.n	8000f3e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d004      	beq.n	8000f38 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f34:	627b      	str	r3, [r7, #36]	; 0x24
 8000f36:	e002      	b.n	8000f3e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f000 f969 	bl	8001210 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000f3e:	69bb      	ldr	r3, [r7, #24]
 8000f40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d024      	beq.n	8000f92 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f50:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000f52:	69bb      	ldr	r3, [r7, #24]
 8000f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d003      	beq.n	8000f64 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f000 f943 	bl	80011e8 <HAL_CAN_TxMailbox2CompleteCallback>
 8000f62:	e016      	b.n	8000f92 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d004      	beq.n	8000f78 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f74:	627b      	str	r3, [r7, #36]	; 0x24
 8000f76:	e00c      	b.n	8000f92 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000f78:	69bb      	ldr	r3, [r7, #24]
 8000f7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d004      	beq.n	8000f8c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f88:	627b      	str	r3, [r7, #36]	; 0x24
 8000f8a:	e002      	b.n	8000f92 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f000 f949 	bl	8001224 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000f92:	6a3b      	ldr	r3, [r7, #32]
 8000f94:	f003 0308 	and.w	r3, r3, #8
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d00c      	beq.n	8000fb6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	f003 0310 	and.w	r3, r3, #16
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d007      	beq.n	8000fb6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fac:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2210      	movs	r2, #16
 8000fb4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000fb6:	6a3b      	ldr	r3, [r7, #32]
 8000fb8:	f003 0304 	and.w	r3, r3, #4
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d00b      	beq.n	8000fd8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	f003 0308 	and.w	r3, r3, #8
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d006      	beq.n	8000fd8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2208      	movs	r2, #8
 8000fd0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f000 f930 	bl	8001238 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000fd8:	6a3b      	ldr	r3, [r7, #32]
 8000fda:	f003 0302 	and.w	r3, r3, #2
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d009      	beq.n	8000ff6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	f003 0303 	and.w	r3, r3, #3
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d002      	beq.n	8000ff6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f003 fbb3 	bl	800475c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000ff6:	6a3b      	ldr	r3, [r7, #32]
 8000ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d00c      	beq.n	800101a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	f003 0310 	and.w	r3, r3, #16
 8001006:	2b00      	cmp	r3, #0
 8001008:	d007      	beq.n	800101a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800100a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001010:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2210      	movs	r2, #16
 8001018:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800101a:	6a3b      	ldr	r3, [r7, #32]
 800101c:	f003 0320 	and.w	r3, r3, #32
 8001020:	2b00      	cmp	r3, #0
 8001022:	d00b      	beq.n	800103c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	f003 0308 	and.w	r3, r3, #8
 800102a:	2b00      	cmp	r3, #0
 800102c:	d006      	beq.n	800103c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2208      	movs	r2, #8
 8001034:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f000 f912 	bl	8001260 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800103c:	6a3b      	ldr	r3, [r7, #32]
 800103e:	f003 0310 	and.w	r3, r3, #16
 8001042:	2b00      	cmp	r3, #0
 8001044:	d009      	beq.n	800105a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	691b      	ldr	r3, [r3, #16]
 800104c:	f003 0303 	and.w	r3, r3, #3
 8001050:	2b00      	cmp	r3, #0
 8001052:	d002      	beq.n	800105a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f000 f8f9 	bl	800124c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800105a:	6a3b      	ldr	r3, [r7, #32]
 800105c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001060:	2b00      	cmp	r3, #0
 8001062:	d00b      	beq.n	800107c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	f003 0310 	and.w	r3, r3, #16
 800106a:	2b00      	cmp	r3, #0
 800106c:	d006      	beq.n	800107c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2210      	movs	r2, #16
 8001074:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f000 f8fc 	bl	8001274 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800107c:	6a3b      	ldr	r3, [r7, #32]
 800107e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001082:	2b00      	cmp	r3, #0
 8001084:	d00b      	beq.n	800109e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	f003 0308 	and.w	r3, r3, #8
 800108c:	2b00      	cmp	r3, #0
 800108e:	d006      	beq.n	800109e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2208      	movs	r2, #8
 8001096:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f000 f8f5 	bl	8001288 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800109e:	6a3b      	ldr	r3, [r7, #32]
 80010a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d07b      	beq.n	80011a0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	f003 0304 	and.w	r3, r3, #4
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d072      	beq.n	8001198 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80010b2:	6a3b      	ldr	r3, [r7, #32]
 80010b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d008      	beq.n	80010ce <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d003      	beq.n	80010ce <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80010c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80010ce:	6a3b      	ldr	r3, [r7, #32]
 80010d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d008      	beq.n	80010ea <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d003      	beq.n	80010ea <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80010e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e4:	f043 0302 	orr.w	r3, r3, #2
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80010ea:	6a3b      	ldr	r3, [r7, #32]
 80010ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d008      	beq.n	8001106 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d003      	beq.n	8001106 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80010fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001100:	f043 0304 	orr.w	r3, r3, #4
 8001104:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001106:	6a3b      	ldr	r3, [r7, #32]
 8001108:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800110c:	2b00      	cmp	r3, #0
 800110e:	d043      	beq.n	8001198 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001116:	2b00      	cmp	r3, #0
 8001118:	d03e      	beq.n	8001198 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001120:	2b60      	cmp	r3, #96	; 0x60
 8001122:	d02b      	beq.n	800117c <HAL_CAN_IRQHandler+0x32a>
 8001124:	2b60      	cmp	r3, #96	; 0x60
 8001126:	d82e      	bhi.n	8001186 <HAL_CAN_IRQHandler+0x334>
 8001128:	2b50      	cmp	r3, #80	; 0x50
 800112a:	d022      	beq.n	8001172 <HAL_CAN_IRQHandler+0x320>
 800112c:	2b50      	cmp	r3, #80	; 0x50
 800112e:	d82a      	bhi.n	8001186 <HAL_CAN_IRQHandler+0x334>
 8001130:	2b40      	cmp	r3, #64	; 0x40
 8001132:	d019      	beq.n	8001168 <HAL_CAN_IRQHandler+0x316>
 8001134:	2b40      	cmp	r3, #64	; 0x40
 8001136:	d826      	bhi.n	8001186 <HAL_CAN_IRQHandler+0x334>
 8001138:	2b30      	cmp	r3, #48	; 0x30
 800113a:	d010      	beq.n	800115e <HAL_CAN_IRQHandler+0x30c>
 800113c:	2b30      	cmp	r3, #48	; 0x30
 800113e:	d822      	bhi.n	8001186 <HAL_CAN_IRQHandler+0x334>
 8001140:	2b10      	cmp	r3, #16
 8001142:	d002      	beq.n	800114a <HAL_CAN_IRQHandler+0x2f8>
 8001144:	2b20      	cmp	r3, #32
 8001146:	d005      	beq.n	8001154 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001148:	e01d      	b.n	8001186 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800114a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114c:	f043 0308 	orr.w	r3, r3, #8
 8001150:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001152:	e019      	b.n	8001188 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001156:	f043 0310 	orr.w	r3, r3, #16
 800115a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800115c:	e014      	b.n	8001188 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800115e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001160:	f043 0320 	orr.w	r3, r3, #32
 8001164:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001166:	e00f      	b.n	8001188 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800116e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001170:	e00a      	b.n	8001188 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001178:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800117a:	e005      	b.n	8001188 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800117c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001182:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001184:	e000      	b.n	8001188 <HAL_CAN_IRQHandler+0x336>
            break;
 8001186:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	699a      	ldr	r2, [r3, #24]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001196:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2204      	movs	r2, #4
 800119e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80011a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d008      	beq.n	80011b8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ac:	431a      	orrs	r2, r3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f000 f872 	bl	800129c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80011b8:	bf00      	nop
 80011ba:	3728      	adds	r7, #40	; 0x28
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80011dc:	bf00      	nop
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001204:	bf00      	nop
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001218:	bf00      	nop
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800122c:	bf00      	nop
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001240:	bf00      	nop
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001254:	bf00      	nop
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001268:	bf00      	nop
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800127c:	bf00      	nop
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001290:	bf00      	nop
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f003 0307 	and.w	r3, r3, #7
 80012be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012c0:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <__NVIC_SetPriorityGrouping+0x44>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012c6:	68ba      	ldr	r2, [r7, #8]
 80012c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012cc:	4013      	ands	r3, r2
 80012ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012e2:	4a04      	ldr	r2, [pc, #16]	; (80012f4 <__NVIC_SetPriorityGrouping+0x44>)
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	60d3      	str	r3, [r2, #12]
}
 80012e8:	bf00      	nop
 80012ea:	3714      	adds	r7, #20
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	e000ed00 	.word	0xe000ed00

080012f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012fc:	4b04      	ldr	r3, [pc, #16]	; (8001310 <__NVIC_GetPriorityGrouping+0x18>)
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	0a1b      	lsrs	r3, r3, #8
 8001302:	f003 0307 	and.w	r3, r3, #7
}
 8001306:	4618      	mov	r0, r3
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800131e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001322:	2b00      	cmp	r3, #0
 8001324:	db0b      	blt.n	800133e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	f003 021f 	and.w	r2, r3, #31
 800132c:	4907      	ldr	r1, [pc, #28]	; (800134c <__NVIC_EnableIRQ+0x38>)
 800132e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001332:	095b      	lsrs	r3, r3, #5
 8001334:	2001      	movs	r0, #1
 8001336:	fa00 f202 	lsl.w	r2, r0, r2
 800133a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	e000e100 	.word	0xe000e100

08001350 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	6039      	str	r1, [r7, #0]
 800135a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800135c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001360:	2b00      	cmp	r3, #0
 8001362:	db0a      	blt.n	800137a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	b2da      	uxtb	r2, r3
 8001368:	490c      	ldr	r1, [pc, #48]	; (800139c <__NVIC_SetPriority+0x4c>)
 800136a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136e:	0112      	lsls	r2, r2, #4
 8001370:	b2d2      	uxtb	r2, r2
 8001372:	440b      	add	r3, r1
 8001374:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001378:	e00a      	b.n	8001390 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	b2da      	uxtb	r2, r3
 800137e:	4908      	ldr	r1, [pc, #32]	; (80013a0 <__NVIC_SetPriority+0x50>)
 8001380:	79fb      	ldrb	r3, [r7, #7]
 8001382:	f003 030f 	and.w	r3, r3, #15
 8001386:	3b04      	subs	r3, #4
 8001388:	0112      	lsls	r2, r2, #4
 800138a:	b2d2      	uxtb	r2, r2
 800138c:	440b      	add	r3, r1
 800138e:	761a      	strb	r2, [r3, #24]
}
 8001390:	bf00      	nop
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr
 800139c:	e000e100 	.word	0xe000e100
 80013a0:	e000ed00 	.word	0xe000ed00

080013a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b089      	sub	sp, #36	; 0x24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f003 0307 	and.w	r3, r3, #7
 80013b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	f1c3 0307 	rsb	r3, r3, #7
 80013be:	2b04      	cmp	r3, #4
 80013c0:	bf28      	it	cs
 80013c2:	2304      	movcs	r3, #4
 80013c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	3304      	adds	r3, #4
 80013ca:	2b06      	cmp	r3, #6
 80013cc:	d902      	bls.n	80013d4 <NVIC_EncodePriority+0x30>
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	3b03      	subs	r3, #3
 80013d2:	e000      	b.n	80013d6 <NVIC_EncodePriority+0x32>
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	43da      	mvns	r2, r3
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	401a      	ands	r2, r3
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	fa01 f303 	lsl.w	r3, r1, r3
 80013f6:	43d9      	mvns	r1, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013fc:	4313      	orrs	r3, r2
         );
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3724      	adds	r7, #36	; 0x24
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
	...

0800140c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	3b01      	subs	r3, #1
 8001418:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800141c:	d301      	bcc.n	8001422 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800141e:	2301      	movs	r3, #1
 8001420:	e00f      	b.n	8001442 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001422:	4a0a      	ldr	r2, [pc, #40]	; (800144c <SysTick_Config+0x40>)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	3b01      	subs	r3, #1
 8001428:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800142a:	210f      	movs	r1, #15
 800142c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001430:	f7ff ff8e 	bl	8001350 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001434:	4b05      	ldr	r3, [pc, #20]	; (800144c <SysTick_Config+0x40>)
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800143a:	4b04      	ldr	r3, [pc, #16]	; (800144c <SysTick_Config+0x40>)
 800143c:	2207      	movs	r2, #7
 800143e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	e000e010 	.word	0xe000e010

08001450 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f7ff ff29 	bl	80012b0 <__NVIC_SetPriorityGrouping>
}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001466:	b580      	push	{r7, lr}
 8001468:	b086      	sub	sp, #24
 800146a:	af00      	add	r7, sp, #0
 800146c:	4603      	mov	r3, r0
 800146e:	60b9      	str	r1, [r7, #8]
 8001470:	607a      	str	r2, [r7, #4]
 8001472:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001478:	f7ff ff3e 	bl	80012f8 <__NVIC_GetPriorityGrouping>
 800147c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	68b9      	ldr	r1, [r7, #8]
 8001482:	6978      	ldr	r0, [r7, #20]
 8001484:	f7ff ff8e 	bl	80013a4 <NVIC_EncodePriority>
 8001488:	4602      	mov	r2, r0
 800148a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800148e:	4611      	mov	r1, r2
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff ff5d 	bl	8001350 <__NVIC_SetPriority>
}
 8001496:	bf00      	nop
 8001498:	3718      	adds	r7, #24
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b082      	sub	sp, #8
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	4603      	mov	r3, r0
 80014a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff ff31 	bl	8001314 <__NVIC_EnableIRQ>
}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b082      	sub	sp, #8
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f7ff ffa2 	bl	800140c <SysTick_Config>
 80014c8:	4603      	mov	r3, r0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
	...

080014d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80014e0:	f7ff f878 	bl	80005d4 <HAL_GetTick>
 80014e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d101      	bne.n	80014f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e099      	b.n	8001624 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2202      	movs	r2, #2
 80014f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2200      	movs	r2, #0
 80014fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f022 0201 	bic.w	r2, r2, #1
 800150e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001510:	e00f      	b.n	8001532 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001512:	f7ff f85f 	bl	80005d4 <HAL_GetTick>
 8001516:	4602      	mov	r2, r0
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	2b05      	cmp	r3, #5
 800151e:	d908      	bls.n	8001532 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2220      	movs	r2, #32
 8001524:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2203      	movs	r2, #3
 800152a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e078      	b.n	8001624 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0301 	and.w	r3, r3, #1
 800153c:	2b00      	cmp	r3, #0
 800153e:	d1e8      	bne.n	8001512 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001548:	697a      	ldr	r2, [r7, #20]
 800154a:	4b38      	ldr	r3, [pc, #224]	; (800162c <HAL_DMA_Init+0x158>)
 800154c:	4013      	ands	r3, r2
 800154e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	685a      	ldr	r2, [r3, #4]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800155e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	691b      	ldr	r3, [r3, #16]
 8001564:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800156a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001576:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6a1b      	ldr	r3, [r3, #32]
 800157c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800157e:	697a      	ldr	r2, [r7, #20]
 8001580:	4313      	orrs	r3, r2
 8001582:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001588:	2b04      	cmp	r3, #4
 800158a:	d107      	bne.n	800159c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001594:	4313      	orrs	r3, r2
 8001596:	697a      	ldr	r2, [r7, #20]
 8001598:	4313      	orrs	r3, r2
 800159a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	697a      	ldr	r2, [r7, #20]
 80015a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	695b      	ldr	r3, [r3, #20]
 80015aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	f023 0307 	bic.w	r3, r3, #7
 80015b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b8:	697a      	ldr	r2, [r7, #20]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c2:	2b04      	cmp	r3, #4
 80015c4:	d117      	bne.n	80015f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ca:	697a      	ldr	r2, [r7, #20]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d00e      	beq.n	80015f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f000 fb01 	bl	8001be0 <DMA_CheckFifoParam>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d008      	beq.n	80015f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2240      	movs	r2, #64	; 0x40
 80015e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2201      	movs	r2, #1
 80015ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80015f2:	2301      	movs	r3, #1
 80015f4:	e016      	b.n	8001624 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	697a      	ldr	r2, [r7, #20]
 80015fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f000 fab8 	bl	8001b74 <DMA_CalcBaseAndBitshift>
 8001604:	4603      	mov	r3, r0
 8001606:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800160c:	223f      	movs	r2, #63	; 0x3f
 800160e:	409a      	lsls	r2, r3
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2200      	movs	r2, #0
 8001618:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2201      	movs	r2, #1
 800161e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001622:	2300      	movs	r3, #0
}
 8001624:	4618      	mov	r0, r3
 8001626:	3718      	adds	r7, #24
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	f010803f 	.word	0xf010803f

08001630 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b086      	sub	sp, #24
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
 800163c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800163e:	2300      	movs	r3, #0
 8001640:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001646:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800164e:	2b01      	cmp	r3, #1
 8001650:	d101      	bne.n	8001656 <HAL_DMA_Start_IT+0x26>
 8001652:	2302      	movs	r3, #2
 8001654:	e040      	b.n	80016d8 <HAL_DMA_Start_IT+0xa8>
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	2201      	movs	r2, #1
 800165a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001664:	b2db      	uxtb	r3, r3
 8001666:	2b01      	cmp	r3, #1
 8001668:	d12f      	bne.n	80016ca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	2202      	movs	r2, #2
 800166e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	2200      	movs	r2, #0
 8001676:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	68b9      	ldr	r1, [r7, #8]
 800167e:	68f8      	ldr	r0, [r7, #12]
 8001680:	f000 fa4a 	bl	8001b18 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001688:	223f      	movs	r2, #63	; 0x3f
 800168a:	409a      	lsls	r2, r3
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f042 0216 	orr.w	r2, r2, #22
 800169e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d007      	beq.n	80016b8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f042 0208 	orr.w	r2, r2, #8
 80016b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f042 0201 	orr.w	r2, r2, #1
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	e005      	b.n	80016d6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	2200      	movs	r2, #0
 80016ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80016d2:	2302      	movs	r3, #2
 80016d4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80016d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3718      	adds	r7, #24
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ec:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80016ee:	f7fe ff71 	bl	80005d4 <HAL_GetTick>
 80016f2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d008      	beq.n	8001712 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2280      	movs	r2, #128	; 0x80
 8001704:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e052      	b.n	80017b8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f022 0216 	bic.w	r2, r2, #22
 8001720:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	695a      	ldr	r2, [r3, #20]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001730:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001736:	2b00      	cmp	r3, #0
 8001738:	d103      	bne.n	8001742 <HAL_DMA_Abort+0x62>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800173e:	2b00      	cmp	r3, #0
 8001740:	d007      	beq.n	8001752 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f022 0208 	bic.w	r2, r2, #8
 8001750:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f022 0201 	bic.w	r2, r2, #1
 8001760:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001762:	e013      	b.n	800178c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001764:	f7fe ff36 	bl	80005d4 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b05      	cmp	r3, #5
 8001770:	d90c      	bls.n	800178c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2220      	movs	r2, #32
 8001776:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2203      	movs	r2, #3
 800177c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2200      	movs	r2, #0
 8001784:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e015      	b.n	80017b8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	2b00      	cmp	r3, #0
 8001798:	d1e4      	bne.n	8001764 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800179e:	223f      	movs	r2, #63	; 0x3f
 80017a0:	409a      	lsls	r2, r3
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2201      	movs	r2, #1
 80017aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2200      	movs	r2, #0
 80017b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80017b6:	2300      	movs	r3, #0
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3710      	adds	r7, #16
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}

080017c0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d004      	beq.n	80017de <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2280      	movs	r2, #128	; 0x80
 80017d8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e00c      	b.n	80017f8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2205      	movs	r2, #5
 80017e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f022 0201 	bic.w	r2, r2, #1
 80017f4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80017f6:	2300      	movs	r3, #0
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800180c:	2300      	movs	r3, #0
 800180e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001810:	4b8e      	ldr	r3, [pc, #568]	; (8001a4c <HAL_DMA_IRQHandler+0x248>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a8e      	ldr	r2, [pc, #568]	; (8001a50 <HAL_DMA_IRQHandler+0x24c>)
 8001816:	fba2 2303 	umull	r2, r3, r2, r3
 800181a:	0a9b      	lsrs	r3, r3, #10
 800181c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001822:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800182e:	2208      	movs	r2, #8
 8001830:	409a      	lsls	r2, r3
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	4013      	ands	r3, r2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d01a      	beq.n	8001870 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0304 	and.w	r3, r3, #4
 8001844:	2b00      	cmp	r3, #0
 8001846:	d013      	beq.n	8001870 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f022 0204 	bic.w	r2, r2, #4
 8001856:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800185c:	2208      	movs	r2, #8
 800185e:	409a      	lsls	r2, r3
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001868:	f043 0201 	orr.w	r2, r3, #1
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001874:	2201      	movs	r2, #1
 8001876:	409a      	lsls	r2, r3
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	4013      	ands	r3, r2
 800187c:	2b00      	cmp	r3, #0
 800187e:	d012      	beq.n	80018a6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	695b      	ldr	r3, [r3, #20]
 8001886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800188a:	2b00      	cmp	r3, #0
 800188c:	d00b      	beq.n	80018a6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001892:	2201      	movs	r2, #1
 8001894:	409a      	lsls	r2, r3
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800189e:	f043 0202 	orr.w	r2, r3, #2
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018aa:	2204      	movs	r2, #4
 80018ac:	409a      	lsls	r2, r3
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	4013      	ands	r3, r2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d012      	beq.n	80018dc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0302 	and.w	r3, r3, #2
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d00b      	beq.n	80018dc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018c8:	2204      	movs	r2, #4
 80018ca:	409a      	lsls	r2, r3
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018d4:	f043 0204 	orr.w	r2, r3, #4
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018e0:	2210      	movs	r2, #16
 80018e2:	409a      	lsls	r2, r3
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	4013      	ands	r3, r2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d043      	beq.n	8001974 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0308 	and.w	r3, r3, #8
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d03c      	beq.n	8001974 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018fe:	2210      	movs	r2, #16
 8001900:	409a      	lsls	r2, r3
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d018      	beq.n	8001946 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d108      	bne.n	8001934 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001926:	2b00      	cmp	r3, #0
 8001928:	d024      	beq.n	8001974 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	4798      	blx	r3
 8001932:	e01f      	b.n	8001974 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001938:	2b00      	cmp	r3, #0
 800193a:	d01b      	beq.n	8001974 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	4798      	blx	r3
 8001944:	e016      	b.n	8001974 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001950:	2b00      	cmp	r3, #0
 8001952:	d107      	bne.n	8001964 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f022 0208 	bic.w	r2, r2, #8
 8001962:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001968:	2b00      	cmp	r3, #0
 800196a:	d003      	beq.n	8001974 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001978:	2220      	movs	r2, #32
 800197a:	409a      	lsls	r2, r3
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	4013      	ands	r3, r2
 8001980:	2b00      	cmp	r3, #0
 8001982:	f000 808f 	beq.w	8001aa4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0310 	and.w	r3, r3, #16
 8001990:	2b00      	cmp	r3, #0
 8001992:	f000 8087 	beq.w	8001aa4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800199a:	2220      	movs	r2, #32
 800199c:	409a      	lsls	r2, r3
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	2b05      	cmp	r3, #5
 80019ac:	d136      	bne.n	8001a1c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f022 0216 	bic.w	r2, r2, #22
 80019bc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	695a      	ldr	r2, [r3, #20]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019cc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d103      	bne.n	80019de <HAL_DMA_IRQHandler+0x1da>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d007      	beq.n	80019ee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f022 0208 	bic.w	r2, r2, #8
 80019ec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019f2:	223f      	movs	r2, #63	; 0x3f
 80019f4:	409a      	lsls	r2, r3
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2201      	movs	r2, #1
 80019fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d07e      	beq.n	8001b10 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	4798      	blx	r3
        }
        return;
 8001a1a:	e079      	b.n	8001b10 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d01d      	beq.n	8001a66 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d10d      	bne.n	8001a54 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d031      	beq.n	8001aa4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	4798      	blx	r3
 8001a48:	e02c      	b.n	8001aa4 <HAL_DMA_IRQHandler+0x2a0>
 8001a4a:	bf00      	nop
 8001a4c:	20000018 	.word	0x20000018
 8001a50:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d023      	beq.n	8001aa4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	4798      	blx	r3
 8001a64:	e01e      	b.n	8001aa4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d10f      	bne.n	8001a94 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f022 0210 	bic.w	r2, r2, #16
 8001a82:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d003      	beq.n	8001aa4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d032      	beq.n	8001b12 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ab0:	f003 0301 	and.w	r3, r3, #1
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d022      	beq.n	8001afe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2205      	movs	r2, #5
 8001abc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f022 0201 	bic.w	r2, r2, #1
 8001ace:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	60bb      	str	r3, [r7, #8]
 8001ad6:	697a      	ldr	r2, [r7, #20]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d307      	bcc.n	8001aec <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1f2      	bne.n	8001ad0 <HAL_DMA_IRQHandler+0x2cc>
 8001aea:	e000      	b.n	8001aee <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001aec:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2201      	movs	r2, #1
 8001af2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d005      	beq.n	8001b12 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	4798      	blx	r3
 8001b0e:	e000      	b.n	8001b12 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001b10:	bf00      	nop
    }
  }
}
 8001b12:	3718      	adds	r7, #24
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	607a      	str	r2, [r7, #4]
 8001b24:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b34:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	683a      	ldr	r2, [r7, #0]
 8001b3c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	2b40      	cmp	r3, #64	; 0x40
 8001b44:	d108      	bne.n	8001b58 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	68ba      	ldr	r2, [r7, #8]
 8001b54:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001b56:	e007      	b.n	8001b68 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	68ba      	ldr	r2, [r7, #8]
 8001b5e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	60da      	str	r2, [r3, #12]
}
 8001b68:	bf00      	nop
 8001b6a:	3714      	adds	r7, #20
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	3b10      	subs	r3, #16
 8001b84:	4a14      	ldr	r2, [pc, #80]	; (8001bd8 <DMA_CalcBaseAndBitshift+0x64>)
 8001b86:	fba2 2303 	umull	r2, r3, r2, r3
 8001b8a:	091b      	lsrs	r3, r3, #4
 8001b8c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001b8e:	4a13      	ldr	r2, [pc, #76]	; (8001bdc <DMA_CalcBaseAndBitshift+0x68>)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	4413      	add	r3, r2
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	461a      	mov	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2b03      	cmp	r3, #3
 8001ba0:	d909      	bls.n	8001bb6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001baa:	f023 0303 	bic.w	r3, r3, #3
 8001bae:	1d1a      	adds	r2, r3, #4
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	659a      	str	r2, [r3, #88]	; 0x58
 8001bb4:	e007      	b.n	8001bc6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001bbe:	f023 0303 	bic.w	r3, r3, #3
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3714      	adds	r7, #20
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	aaaaaaab 	.word	0xaaaaaaab
 8001bdc:	08004cc8 	.word	0x08004cc8

08001be0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001be8:	2300      	movs	r3, #0
 8001bea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d11f      	bne.n	8001c3a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	2b03      	cmp	r3, #3
 8001bfe:	d856      	bhi.n	8001cae <DMA_CheckFifoParam+0xce>
 8001c00:	a201      	add	r2, pc, #4	; (adr r2, 8001c08 <DMA_CheckFifoParam+0x28>)
 8001c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c06:	bf00      	nop
 8001c08:	08001c19 	.word	0x08001c19
 8001c0c:	08001c2b 	.word	0x08001c2b
 8001c10:	08001c19 	.word	0x08001c19
 8001c14:	08001caf 	.word	0x08001caf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d046      	beq.n	8001cb2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c28:	e043      	b.n	8001cb2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c2e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c32:	d140      	bne.n	8001cb6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c38:	e03d      	b.n	8001cb6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	699b      	ldr	r3, [r3, #24]
 8001c3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c42:	d121      	bne.n	8001c88 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	2b03      	cmp	r3, #3
 8001c48:	d837      	bhi.n	8001cba <DMA_CheckFifoParam+0xda>
 8001c4a:	a201      	add	r2, pc, #4	; (adr r2, 8001c50 <DMA_CheckFifoParam+0x70>)
 8001c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c50:	08001c61 	.word	0x08001c61
 8001c54:	08001c67 	.word	0x08001c67
 8001c58:	08001c61 	.word	0x08001c61
 8001c5c:	08001c79 	.word	0x08001c79
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	73fb      	strb	r3, [r7, #15]
      break;
 8001c64:	e030      	b.n	8001cc8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d025      	beq.n	8001cbe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c76:	e022      	b.n	8001cbe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c7c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c80:	d11f      	bne.n	8001cc2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001c86:	e01c      	b.n	8001cc2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d903      	bls.n	8001c96 <DMA_CheckFifoParam+0xb6>
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	2b03      	cmp	r3, #3
 8001c92:	d003      	beq.n	8001c9c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001c94:	e018      	b.n	8001cc8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	73fb      	strb	r3, [r7, #15]
      break;
 8001c9a:	e015      	b.n	8001cc8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d00e      	beq.n	8001cc6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	73fb      	strb	r3, [r7, #15]
      break;
 8001cac:	e00b      	b.n	8001cc6 <DMA_CheckFifoParam+0xe6>
      break;
 8001cae:	bf00      	nop
 8001cb0:	e00a      	b.n	8001cc8 <DMA_CheckFifoParam+0xe8>
      break;
 8001cb2:	bf00      	nop
 8001cb4:	e008      	b.n	8001cc8 <DMA_CheckFifoParam+0xe8>
      break;
 8001cb6:	bf00      	nop
 8001cb8:	e006      	b.n	8001cc8 <DMA_CheckFifoParam+0xe8>
      break;
 8001cba:	bf00      	nop
 8001cbc:	e004      	b.n	8001cc8 <DMA_CheckFifoParam+0xe8>
      break;
 8001cbe:	bf00      	nop
 8001cc0:	e002      	b.n	8001cc8 <DMA_CheckFifoParam+0xe8>
      break;   
 8001cc2:	bf00      	nop
 8001cc4:	e000      	b.n	8001cc8 <DMA_CheckFifoParam+0xe8>
      break;
 8001cc6:	bf00      	nop
    }
  } 
  
  return status; 
 8001cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3714      	adds	r7, #20
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop

08001cd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b089      	sub	sp, #36	; 0x24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cea:	2300      	movs	r3, #0
 8001cec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61fb      	str	r3, [r7, #28]
 8001cf2:	e165      	b.n	8001fc0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	697a      	ldr	r2, [r7, #20]
 8001d04:	4013      	ands	r3, r2
 8001d06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	f040 8154 	bne.w	8001fba <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f003 0303 	and.w	r3, r3, #3
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d005      	beq.n	8001d2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d130      	bne.n	8001d8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	2203      	movs	r2, #3
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	43db      	mvns	r3, r3
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	68da      	ldr	r2, [r3, #12]
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d60:	2201      	movs	r2, #1
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	091b      	lsrs	r3, r3, #4
 8001d76:	f003 0201 	and.w	r2, r3, #1
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f003 0303 	and.w	r3, r3, #3
 8001d94:	2b03      	cmp	r3, #3
 8001d96:	d017      	beq.n	8001dc8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	2203      	movs	r2, #3
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	43db      	mvns	r3, r3
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	4013      	ands	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	689a      	ldr	r2, [r3, #8]
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f003 0303 	and.w	r3, r3, #3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d123      	bne.n	8001e1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	08da      	lsrs	r2, r3, #3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	3208      	adds	r2, #8
 8001ddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001de0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	f003 0307 	and.w	r3, r3, #7
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	220f      	movs	r2, #15
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	43db      	mvns	r3, r3
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4013      	ands	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	691a      	ldr	r2, [r3, #16]
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	08da      	lsrs	r2, r3, #3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	3208      	adds	r2, #8
 8001e16:	69b9      	ldr	r1, [r7, #24]
 8001e18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	2203      	movs	r2, #3
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	4013      	ands	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f003 0203 	and.w	r2, r3, #3
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f000 80ae 	beq.w	8001fba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	4b5d      	ldr	r3, [pc, #372]	; (8001fd8 <HAL_GPIO_Init+0x300>)
 8001e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e66:	4a5c      	ldr	r2, [pc, #368]	; (8001fd8 <HAL_GPIO_Init+0x300>)
 8001e68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e6e:	4b5a      	ldr	r3, [pc, #360]	; (8001fd8 <HAL_GPIO_Init+0x300>)
 8001e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e7a:	4a58      	ldr	r2, [pc, #352]	; (8001fdc <HAL_GPIO_Init+0x304>)
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	089b      	lsrs	r3, r3, #2
 8001e80:	3302      	adds	r3, #2
 8001e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	f003 0303 	and.w	r3, r3, #3
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	220f      	movs	r2, #15
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	43db      	mvns	r3, r3
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a4f      	ldr	r2, [pc, #316]	; (8001fe0 <HAL_GPIO_Init+0x308>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d025      	beq.n	8001ef2 <HAL_GPIO_Init+0x21a>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a4e      	ldr	r2, [pc, #312]	; (8001fe4 <HAL_GPIO_Init+0x30c>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d01f      	beq.n	8001eee <HAL_GPIO_Init+0x216>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a4d      	ldr	r2, [pc, #308]	; (8001fe8 <HAL_GPIO_Init+0x310>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d019      	beq.n	8001eea <HAL_GPIO_Init+0x212>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a4c      	ldr	r2, [pc, #304]	; (8001fec <HAL_GPIO_Init+0x314>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d013      	beq.n	8001ee6 <HAL_GPIO_Init+0x20e>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a4b      	ldr	r2, [pc, #300]	; (8001ff0 <HAL_GPIO_Init+0x318>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d00d      	beq.n	8001ee2 <HAL_GPIO_Init+0x20a>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a4a      	ldr	r2, [pc, #296]	; (8001ff4 <HAL_GPIO_Init+0x31c>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d007      	beq.n	8001ede <HAL_GPIO_Init+0x206>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a49      	ldr	r2, [pc, #292]	; (8001ff8 <HAL_GPIO_Init+0x320>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d101      	bne.n	8001eda <HAL_GPIO_Init+0x202>
 8001ed6:	2306      	movs	r3, #6
 8001ed8:	e00c      	b.n	8001ef4 <HAL_GPIO_Init+0x21c>
 8001eda:	2307      	movs	r3, #7
 8001edc:	e00a      	b.n	8001ef4 <HAL_GPIO_Init+0x21c>
 8001ede:	2305      	movs	r3, #5
 8001ee0:	e008      	b.n	8001ef4 <HAL_GPIO_Init+0x21c>
 8001ee2:	2304      	movs	r3, #4
 8001ee4:	e006      	b.n	8001ef4 <HAL_GPIO_Init+0x21c>
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e004      	b.n	8001ef4 <HAL_GPIO_Init+0x21c>
 8001eea:	2302      	movs	r3, #2
 8001eec:	e002      	b.n	8001ef4 <HAL_GPIO_Init+0x21c>
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e000      	b.n	8001ef4 <HAL_GPIO_Init+0x21c>
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	69fa      	ldr	r2, [r7, #28]
 8001ef6:	f002 0203 	and.w	r2, r2, #3
 8001efa:	0092      	lsls	r2, r2, #2
 8001efc:	4093      	lsls	r3, r2
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f04:	4935      	ldr	r1, [pc, #212]	; (8001fdc <HAL_GPIO_Init+0x304>)
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	089b      	lsrs	r3, r3, #2
 8001f0a:	3302      	adds	r3, #2
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f12:	4b3a      	ldr	r3, [pc, #232]	; (8001ffc <HAL_GPIO_Init+0x324>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d003      	beq.n	8001f36 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f36:	4a31      	ldr	r2, [pc, #196]	; (8001ffc <HAL_GPIO_Init+0x324>)
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f3c:	4b2f      	ldr	r3, [pc, #188]	; (8001ffc <HAL_GPIO_Init+0x324>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	43db      	mvns	r3, r3
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d003      	beq.n	8001f60 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f60:	4a26      	ldr	r2, [pc, #152]	; (8001ffc <HAL_GPIO_Init+0x324>)
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f66:	4b25      	ldr	r3, [pc, #148]	; (8001ffc <HAL_GPIO_Init+0x324>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	4013      	ands	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d003      	beq.n	8001f8a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f8a:	4a1c      	ldr	r2, [pc, #112]	; (8001ffc <HAL_GPIO_Init+0x324>)
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f90:	4b1a      	ldr	r3, [pc, #104]	; (8001ffc <HAL_GPIO_Init+0x324>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d003      	beq.n	8001fb4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fb4:	4a11      	ldr	r2, [pc, #68]	; (8001ffc <HAL_GPIO_Init+0x324>)
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	61fb      	str	r3, [r7, #28]
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	2b0f      	cmp	r3, #15
 8001fc4:	f67f ae96 	bls.w	8001cf4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fc8:	bf00      	nop
 8001fca:	bf00      	nop
 8001fcc:	3724      	adds	r7, #36	; 0x24
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	40023800 	.word	0x40023800
 8001fdc:	40013800 	.word	0x40013800
 8001fe0:	40020000 	.word	0x40020000
 8001fe4:	40020400 	.word	0x40020400
 8001fe8:	40020800 	.word	0x40020800
 8001fec:	40020c00 	.word	0x40020c00
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	40021400 	.word	0x40021400
 8001ff8:	40021800 	.word	0x40021800
 8001ffc:	40013c00 	.word	0x40013c00

08002000 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	460b      	mov	r3, r1
 800200a:	807b      	strh	r3, [r7, #2]
 800200c:	4613      	mov	r3, r2
 800200e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002010:	787b      	ldrb	r3, [r7, #1]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d003      	beq.n	800201e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002016:	887a      	ldrh	r2, [r7, #2]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800201c:	e003      	b.n	8002026 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800201e:	887b      	ldrh	r3, [r7, #2]
 8002020:	041a      	lsls	r2, r3, #16
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	619a      	str	r2, [r3, #24]
}
 8002026:	bf00      	nop
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
	...

08002034 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d101      	bne.n	8002048 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e0cc      	b.n	80021e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002048:	4b68      	ldr	r3, [pc, #416]	; (80021ec <HAL_RCC_ClockConfig+0x1b8>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 030f 	and.w	r3, r3, #15
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	429a      	cmp	r2, r3
 8002054:	d90c      	bls.n	8002070 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002056:	4b65      	ldr	r3, [pc, #404]	; (80021ec <HAL_RCC_ClockConfig+0x1b8>)
 8002058:	683a      	ldr	r2, [r7, #0]
 800205a:	b2d2      	uxtb	r2, r2
 800205c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800205e:	4b63      	ldr	r3, [pc, #396]	; (80021ec <HAL_RCC_ClockConfig+0x1b8>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 030f 	and.w	r3, r3, #15
 8002066:	683a      	ldr	r2, [r7, #0]
 8002068:	429a      	cmp	r2, r3
 800206a:	d001      	beq.n	8002070 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e0b8      	b.n	80021e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d020      	beq.n	80020be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0304 	and.w	r3, r3, #4
 8002084:	2b00      	cmp	r3, #0
 8002086:	d005      	beq.n	8002094 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002088:	4b59      	ldr	r3, [pc, #356]	; (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	4a58      	ldr	r2, [pc, #352]	; (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 800208e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002092:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0308 	and.w	r3, r3, #8
 800209c:	2b00      	cmp	r3, #0
 800209e:	d005      	beq.n	80020ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020a0:	4b53      	ldr	r3, [pc, #332]	; (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	4a52      	ldr	r2, [pc, #328]	; (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 80020a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80020aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020ac:	4b50      	ldr	r3, [pc, #320]	; (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	494d      	ldr	r1, [pc, #308]	; (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d044      	beq.n	8002154 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d107      	bne.n	80020e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020d2:	4b47      	ldr	r3, [pc, #284]	; (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d119      	bne.n	8002112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e07f      	b.n	80021e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d003      	beq.n	80020f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020ee:	2b03      	cmp	r3, #3
 80020f0:	d107      	bne.n	8002102 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020f2:	4b3f      	ldr	r3, [pc, #252]	; (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d109      	bne.n	8002112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e06f      	b.n	80021e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002102:	4b3b      	ldr	r3, [pc, #236]	; (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e067      	b.n	80021e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002112:	4b37      	ldr	r3, [pc, #220]	; (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f023 0203 	bic.w	r2, r3, #3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	4934      	ldr	r1, [pc, #208]	; (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002120:	4313      	orrs	r3, r2
 8002122:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002124:	f7fe fa56 	bl	80005d4 <HAL_GetTick>
 8002128:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800212a:	e00a      	b.n	8002142 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800212c:	f7fe fa52 	bl	80005d4 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	f241 3288 	movw	r2, #5000	; 0x1388
 800213a:	4293      	cmp	r3, r2
 800213c:	d901      	bls.n	8002142 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e04f      	b.n	80021e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002142:	4b2b      	ldr	r3, [pc, #172]	; (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f003 020c 	and.w	r2, r3, #12
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	429a      	cmp	r2, r3
 8002152:	d1eb      	bne.n	800212c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002154:	4b25      	ldr	r3, [pc, #148]	; (80021ec <HAL_RCC_ClockConfig+0x1b8>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 030f 	and.w	r3, r3, #15
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	429a      	cmp	r2, r3
 8002160:	d20c      	bcs.n	800217c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002162:	4b22      	ldr	r3, [pc, #136]	; (80021ec <HAL_RCC_ClockConfig+0x1b8>)
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	b2d2      	uxtb	r2, r2
 8002168:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800216a:	4b20      	ldr	r3, [pc, #128]	; (80021ec <HAL_RCC_ClockConfig+0x1b8>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 030f 	and.w	r3, r3, #15
 8002172:	683a      	ldr	r2, [r7, #0]
 8002174:	429a      	cmp	r2, r3
 8002176:	d001      	beq.n	800217c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e032      	b.n	80021e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0304 	and.w	r3, r3, #4
 8002184:	2b00      	cmp	r3, #0
 8002186:	d008      	beq.n	800219a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002188:	4b19      	ldr	r3, [pc, #100]	; (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	4916      	ldr	r1, [pc, #88]	; (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002196:	4313      	orrs	r3, r2
 8002198:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0308 	and.w	r3, r3, #8
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d009      	beq.n	80021ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021a6:	4b12      	ldr	r3, [pc, #72]	; (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	490e      	ldr	r1, [pc, #56]	; (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021ba:	f000 f855 	bl	8002268 <HAL_RCC_GetSysClockFreq>
 80021be:	4602      	mov	r2, r0
 80021c0:	4b0b      	ldr	r3, [pc, #44]	; (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	091b      	lsrs	r3, r3, #4
 80021c6:	f003 030f 	and.w	r3, r3, #15
 80021ca:	490a      	ldr	r1, [pc, #40]	; (80021f4 <HAL_RCC_ClockConfig+0x1c0>)
 80021cc:	5ccb      	ldrb	r3, [r1, r3]
 80021ce:	fa22 f303 	lsr.w	r3, r2, r3
 80021d2:	4a09      	ldr	r2, [pc, #36]	; (80021f8 <HAL_RCC_ClockConfig+0x1c4>)
 80021d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80021d6:	4b09      	ldr	r3, [pc, #36]	; (80021fc <HAL_RCC_ClockConfig+0x1c8>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4618      	mov	r0, r3
 80021dc:	f7fe f9b6 	bl	800054c <HAL_InitTick>

  return HAL_OK;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3710      	adds	r7, #16
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40023c00 	.word	0x40023c00
 80021f0:	40023800 	.word	0x40023800
 80021f4:	08004cd0 	.word	0x08004cd0
 80021f8:	20000018 	.word	0x20000018
 80021fc:	20000000 	.word	0x20000000

08002200 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002204:	4b03      	ldr	r3, [pc, #12]	; (8002214 <HAL_RCC_GetHCLKFreq+0x14>)
 8002206:	681b      	ldr	r3, [r3, #0]
}
 8002208:	4618      	mov	r0, r3
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	20000018 	.word	0x20000018

08002218 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800221c:	f7ff fff0 	bl	8002200 <HAL_RCC_GetHCLKFreq>
 8002220:	4602      	mov	r2, r0
 8002222:	4b05      	ldr	r3, [pc, #20]	; (8002238 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	0a9b      	lsrs	r3, r3, #10
 8002228:	f003 0307 	and.w	r3, r3, #7
 800222c:	4903      	ldr	r1, [pc, #12]	; (800223c <HAL_RCC_GetPCLK1Freq+0x24>)
 800222e:	5ccb      	ldrb	r3, [r1, r3]
 8002230:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002234:	4618      	mov	r0, r3
 8002236:	bd80      	pop	{r7, pc}
 8002238:	40023800 	.word	0x40023800
 800223c:	08004ce0 	.word	0x08004ce0

08002240 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002244:	f7ff ffdc 	bl	8002200 <HAL_RCC_GetHCLKFreq>
 8002248:	4602      	mov	r2, r0
 800224a:	4b05      	ldr	r3, [pc, #20]	; (8002260 <HAL_RCC_GetPCLK2Freq+0x20>)
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	0b5b      	lsrs	r3, r3, #13
 8002250:	f003 0307 	and.w	r3, r3, #7
 8002254:	4903      	ldr	r1, [pc, #12]	; (8002264 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002256:	5ccb      	ldrb	r3, [r1, r3]
 8002258:	fa22 f303 	lsr.w	r3, r2, r3
}
 800225c:	4618      	mov	r0, r3
 800225e:	bd80      	pop	{r7, pc}
 8002260:	40023800 	.word	0x40023800
 8002264:	08004ce0 	.word	0x08004ce0

08002268 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002268:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800226c:	b0ae      	sub	sp, #184	; 0xb8
 800226e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002270:	2300      	movs	r3, #0
 8002272:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002276:	2300      	movs	r3, #0
 8002278:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800227c:	2300      	movs	r3, #0
 800227e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002282:	2300      	movs	r3, #0
 8002284:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002288:	2300      	movs	r3, #0
 800228a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800228e:	4bcb      	ldr	r3, [pc, #812]	; (80025bc <HAL_RCC_GetSysClockFreq+0x354>)
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f003 030c 	and.w	r3, r3, #12
 8002296:	2b0c      	cmp	r3, #12
 8002298:	f200 8206 	bhi.w	80026a8 <HAL_RCC_GetSysClockFreq+0x440>
 800229c:	a201      	add	r2, pc, #4	; (adr r2, 80022a4 <HAL_RCC_GetSysClockFreq+0x3c>)
 800229e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022a2:	bf00      	nop
 80022a4:	080022d9 	.word	0x080022d9
 80022a8:	080026a9 	.word	0x080026a9
 80022ac:	080026a9 	.word	0x080026a9
 80022b0:	080026a9 	.word	0x080026a9
 80022b4:	080022e1 	.word	0x080022e1
 80022b8:	080026a9 	.word	0x080026a9
 80022bc:	080026a9 	.word	0x080026a9
 80022c0:	080026a9 	.word	0x080026a9
 80022c4:	080022e9 	.word	0x080022e9
 80022c8:	080026a9 	.word	0x080026a9
 80022cc:	080026a9 	.word	0x080026a9
 80022d0:	080026a9 	.word	0x080026a9
 80022d4:	080024d9 	.word	0x080024d9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022d8:	4bb9      	ldr	r3, [pc, #740]	; (80025c0 <HAL_RCC_GetSysClockFreq+0x358>)
 80022da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80022de:	e1e7      	b.n	80026b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022e0:	4bb8      	ldr	r3, [pc, #736]	; (80025c4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80022e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80022e6:	e1e3      	b.n	80026b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022e8:	4bb4      	ldr	r3, [pc, #720]	; (80025bc <HAL_RCC_GetSysClockFreq+0x354>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022f4:	4bb1      	ldr	r3, [pc, #708]	; (80025bc <HAL_RCC_GetSysClockFreq+0x354>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d071      	beq.n	80023e4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002300:	4bae      	ldr	r3, [pc, #696]	; (80025bc <HAL_RCC_GetSysClockFreq+0x354>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	099b      	lsrs	r3, r3, #6
 8002306:	2200      	movs	r2, #0
 8002308:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800230c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002310:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002314:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002318:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800231c:	2300      	movs	r3, #0
 800231e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002322:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002326:	4622      	mov	r2, r4
 8002328:	462b      	mov	r3, r5
 800232a:	f04f 0000 	mov.w	r0, #0
 800232e:	f04f 0100 	mov.w	r1, #0
 8002332:	0159      	lsls	r1, r3, #5
 8002334:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002338:	0150      	lsls	r0, r2, #5
 800233a:	4602      	mov	r2, r0
 800233c:	460b      	mov	r3, r1
 800233e:	4621      	mov	r1, r4
 8002340:	1a51      	subs	r1, r2, r1
 8002342:	6439      	str	r1, [r7, #64]	; 0x40
 8002344:	4629      	mov	r1, r5
 8002346:	eb63 0301 	sbc.w	r3, r3, r1
 800234a:	647b      	str	r3, [r7, #68]	; 0x44
 800234c:	f04f 0200 	mov.w	r2, #0
 8002350:	f04f 0300 	mov.w	r3, #0
 8002354:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002358:	4649      	mov	r1, r9
 800235a:	018b      	lsls	r3, r1, #6
 800235c:	4641      	mov	r1, r8
 800235e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002362:	4641      	mov	r1, r8
 8002364:	018a      	lsls	r2, r1, #6
 8002366:	4641      	mov	r1, r8
 8002368:	1a51      	subs	r1, r2, r1
 800236a:	63b9      	str	r1, [r7, #56]	; 0x38
 800236c:	4649      	mov	r1, r9
 800236e:	eb63 0301 	sbc.w	r3, r3, r1
 8002372:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002374:	f04f 0200 	mov.w	r2, #0
 8002378:	f04f 0300 	mov.w	r3, #0
 800237c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002380:	4649      	mov	r1, r9
 8002382:	00cb      	lsls	r3, r1, #3
 8002384:	4641      	mov	r1, r8
 8002386:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800238a:	4641      	mov	r1, r8
 800238c:	00ca      	lsls	r2, r1, #3
 800238e:	4610      	mov	r0, r2
 8002390:	4619      	mov	r1, r3
 8002392:	4603      	mov	r3, r0
 8002394:	4622      	mov	r2, r4
 8002396:	189b      	adds	r3, r3, r2
 8002398:	633b      	str	r3, [r7, #48]	; 0x30
 800239a:	462b      	mov	r3, r5
 800239c:	460a      	mov	r2, r1
 800239e:	eb42 0303 	adc.w	r3, r2, r3
 80023a2:	637b      	str	r3, [r7, #52]	; 0x34
 80023a4:	f04f 0200 	mov.w	r2, #0
 80023a8:	f04f 0300 	mov.w	r3, #0
 80023ac:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80023b0:	4629      	mov	r1, r5
 80023b2:	024b      	lsls	r3, r1, #9
 80023b4:	4621      	mov	r1, r4
 80023b6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80023ba:	4621      	mov	r1, r4
 80023bc:	024a      	lsls	r2, r1, #9
 80023be:	4610      	mov	r0, r2
 80023c0:	4619      	mov	r1, r3
 80023c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80023c6:	2200      	movs	r2, #0
 80023c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80023cc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80023d0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80023d4:	f7fd ff16 	bl	8000204 <__aeabi_uldivmod>
 80023d8:	4602      	mov	r2, r0
 80023da:	460b      	mov	r3, r1
 80023dc:	4613      	mov	r3, r2
 80023de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80023e2:	e067      	b.n	80024b4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023e4:	4b75      	ldr	r3, [pc, #468]	; (80025bc <HAL_RCC_GetSysClockFreq+0x354>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	099b      	lsrs	r3, r3, #6
 80023ea:	2200      	movs	r2, #0
 80023ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80023f0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80023f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80023fe:	2300      	movs	r3, #0
 8002400:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002402:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002406:	4622      	mov	r2, r4
 8002408:	462b      	mov	r3, r5
 800240a:	f04f 0000 	mov.w	r0, #0
 800240e:	f04f 0100 	mov.w	r1, #0
 8002412:	0159      	lsls	r1, r3, #5
 8002414:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002418:	0150      	lsls	r0, r2, #5
 800241a:	4602      	mov	r2, r0
 800241c:	460b      	mov	r3, r1
 800241e:	4621      	mov	r1, r4
 8002420:	1a51      	subs	r1, r2, r1
 8002422:	62b9      	str	r1, [r7, #40]	; 0x28
 8002424:	4629      	mov	r1, r5
 8002426:	eb63 0301 	sbc.w	r3, r3, r1
 800242a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800242c:	f04f 0200 	mov.w	r2, #0
 8002430:	f04f 0300 	mov.w	r3, #0
 8002434:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002438:	4649      	mov	r1, r9
 800243a:	018b      	lsls	r3, r1, #6
 800243c:	4641      	mov	r1, r8
 800243e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002442:	4641      	mov	r1, r8
 8002444:	018a      	lsls	r2, r1, #6
 8002446:	4641      	mov	r1, r8
 8002448:	ebb2 0a01 	subs.w	sl, r2, r1
 800244c:	4649      	mov	r1, r9
 800244e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002452:	f04f 0200 	mov.w	r2, #0
 8002456:	f04f 0300 	mov.w	r3, #0
 800245a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800245e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002462:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002466:	4692      	mov	sl, r2
 8002468:	469b      	mov	fp, r3
 800246a:	4623      	mov	r3, r4
 800246c:	eb1a 0303 	adds.w	r3, sl, r3
 8002470:	623b      	str	r3, [r7, #32]
 8002472:	462b      	mov	r3, r5
 8002474:	eb4b 0303 	adc.w	r3, fp, r3
 8002478:	627b      	str	r3, [r7, #36]	; 0x24
 800247a:	f04f 0200 	mov.w	r2, #0
 800247e:	f04f 0300 	mov.w	r3, #0
 8002482:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002486:	4629      	mov	r1, r5
 8002488:	028b      	lsls	r3, r1, #10
 800248a:	4621      	mov	r1, r4
 800248c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002490:	4621      	mov	r1, r4
 8002492:	028a      	lsls	r2, r1, #10
 8002494:	4610      	mov	r0, r2
 8002496:	4619      	mov	r1, r3
 8002498:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800249c:	2200      	movs	r2, #0
 800249e:	673b      	str	r3, [r7, #112]	; 0x70
 80024a0:	677a      	str	r2, [r7, #116]	; 0x74
 80024a2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80024a6:	f7fd fead 	bl	8000204 <__aeabi_uldivmod>
 80024aa:	4602      	mov	r2, r0
 80024ac:	460b      	mov	r3, r1
 80024ae:	4613      	mov	r3, r2
 80024b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80024b4:	4b41      	ldr	r3, [pc, #260]	; (80025bc <HAL_RCC_GetSysClockFreq+0x354>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	0c1b      	lsrs	r3, r3, #16
 80024ba:	f003 0303 	and.w	r3, r3, #3
 80024be:	3301      	adds	r3, #1
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80024c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80024ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80024ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80024d6:	e0eb      	b.n	80026b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024d8:	4b38      	ldr	r3, [pc, #224]	; (80025bc <HAL_RCC_GetSysClockFreq+0x354>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024e4:	4b35      	ldr	r3, [pc, #212]	; (80025bc <HAL_RCC_GetSysClockFreq+0x354>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d06b      	beq.n	80025c8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024f0:	4b32      	ldr	r3, [pc, #200]	; (80025bc <HAL_RCC_GetSysClockFreq+0x354>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	099b      	lsrs	r3, r3, #6
 80024f6:	2200      	movs	r2, #0
 80024f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80024fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80024fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002502:	663b      	str	r3, [r7, #96]	; 0x60
 8002504:	2300      	movs	r3, #0
 8002506:	667b      	str	r3, [r7, #100]	; 0x64
 8002508:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800250c:	4622      	mov	r2, r4
 800250e:	462b      	mov	r3, r5
 8002510:	f04f 0000 	mov.w	r0, #0
 8002514:	f04f 0100 	mov.w	r1, #0
 8002518:	0159      	lsls	r1, r3, #5
 800251a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800251e:	0150      	lsls	r0, r2, #5
 8002520:	4602      	mov	r2, r0
 8002522:	460b      	mov	r3, r1
 8002524:	4621      	mov	r1, r4
 8002526:	1a51      	subs	r1, r2, r1
 8002528:	61b9      	str	r1, [r7, #24]
 800252a:	4629      	mov	r1, r5
 800252c:	eb63 0301 	sbc.w	r3, r3, r1
 8002530:	61fb      	str	r3, [r7, #28]
 8002532:	f04f 0200 	mov.w	r2, #0
 8002536:	f04f 0300 	mov.w	r3, #0
 800253a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800253e:	4659      	mov	r1, fp
 8002540:	018b      	lsls	r3, r1, #6
 8002542:	4651      	mov	r1, sl
 8002544:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002548:	4651      	mov	r1, sl
 800254a:	018a      	lsls	r2, r1, #6
 800254c:	4651      	mov	r1, sl
 800254e:	ebb2 0801 	subs.w	r8, r2, r1
 8002552:	4659      	mov	r1, fp
 8002554:	eb63 0901 	sbc.w	r9, r3, r1
 8002558:	f04f 0200 	mov.w	r2, #0
 800255c:	f04f 0300 	mov.w	r3, #0
 8002560:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002564:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002568:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800256c:	4690      	mov	r8, r2
 800256e:	4699      	mov	r9, r3
 8002570:	4623      	mov	r3, r4
 8002572:	eb18 0303 	adds.w	r3, r8, r3
 8002576:	613b      	str	r3, [r7, #16]
 8002578:	462b      	mov	r3, r5
 800257a:	eb49 0303 	adc.w	r3, r9, r3
 800257e:	617b      	str	r3, [r7, #20]
 8002580:	f04f 0200 	mov.w	r2, #0
 8002584:	f04f 0300 	mov.w	r3, #0
 8002588:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800258c:	4629      	mov	r1, r5
 800258e:	024b      	lsls	r3, r1, #9
 8002590:	4621      	mov	r1, r4
 8002592:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002596:	4621      	mov	r1, r4
 8002598:	024a      	lsls	r2, r1, #9
 800259a:	4610      	mov	r0, r2
 800259c:	4619      	mov	r1, r3
 800259e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80025a2:	2200      	movs	r2, #0
 80025a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80025a6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80025a8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80025ac:	f7fd fe2a 	bl	8000204 <__aeabi_uldivmod>
 80025b0:	4602      	mov	r2, r0
 80025b2:	460b      	mov	r3, r1
 80025b4:	4613      	mov	r3, r2
 80025b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80025ba:	e065      	b.n	8002688 <HAL_RCC_GetSysClockFreq+0x420>
 80025bc:	40023800 	.word	0x40023800
 80025c0:	00f42400 	.word	0x00f42400
 80025c4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025c8:	4b3d      	ldr	r3, [pc, #244]	; (80026c0 <HAL_RCC_GetSysClockFreq+0x458>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	099b      	lsrs	r3, r3, #6
 80025ce:	2200      	movs	r2, #0
 80025d0:	4618      	mov	r0, r3
 80025d2:	4611      	mov	r1, r2
 80025d4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80025d8:	653b      	str	r3, [r7, #80]	; 0x50
 80025da:	2300      	movs	r3, #0
 80025dc:	657b      	str	r3, [r7, #84]	; 0x54
 80025de:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80025e2:	4642      	mov	r2, r8
 80025e4:	464b      	mov	r3, r9
 80025e6:	f04f 0000 	mov.w	r0, #0
 80025ea:	f04f 0100 	mov.w	r1, #0
 80025ee:	0159      	lsls	r1, r3, #5
 80025f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025f4:	0150      	lsls	r0, r2, #5
 80025f6:	4602      	mov	r2, r0
 80025f8:	460b      	mov	r3, r1
 80025fa:	4641      	mov	r1, r8
 80025fc:	1a51      	subs	r1, r2, r1
 80025fe:	60b9      	str	r1, [r7, #8]
 8002600:	4649      	mov	r1, r9
 8002602:	eb63 0301 	sbc.w	r3, r3, r1
 8002606:	60fb      	str	r3, [r7, #12]
 8002608:	f04f 0200 	mov.w	r2, #0
 800260c:	f04f 0300 	mov.w	r3, #0
 8002610:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002614:	4659      	mov	r1, fp
 8002616:	018b      	lsls	r3, r1, #6
 8002618:	4651      	mov	r1, sl
 800261a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800261e:	4651      	mov	r1, sl
 8002620:	018a      	lsls	r2, r1, #6
 8002622:	4651      	mov	r1, sl
 8002624:	1a54      	subs	r4, r2, r1
 8002626:	4659      	mov	r1, fp
 8002628:	eb63 0501 	sbc.w	r5, r3, r1
 800262c:	f04f 0200 	mov.w	r2, #0
 8002630:	f04f 0300 	mov.w	r3, #0
 8002634:	00eb      	lsls	r3, r5, #3
 8002636:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800263a:	00e2      	lsls	r2, r4, #3
 800263c:	4614      	mov	r4, r2
 800263e:	461d      	mov	r5, r3
 8002640:	4643      	mov	r3, r8
 8002642:	18e3      	adds	r3, r4, r3
 8002644:	603b      	str	r3, [r7, #0]
 8002646:	464b      	mov	r3, r9
 8002648:	eb45 0303 	adc.w	r3, r5, r3
 800264c:	607b      	str	r3, [r7, #4]
 800264e:	f04f 0200 	mov.w	r2, #0
 8002652:	f04f 0300 	mov.w	r3, #0
 8002656:	e9d7 4500 	ldrd	r4, r5, [r7]
 800265a:	4629      	mov	r1, r5
 800265c:	028b      	lsls	r3, r1, #10
 800265e:	4621      	mov	r1, r4
 8002660:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002664:	4621      	mov	r1, r4
 8002666:	028a      	lsls	r2, r1, #10
 8002668:	4610      	mov	r0, r2
 800266a:	4619      	mov	r1, r3
 800266c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002670:	2200      	movs	r2, #0
 8002672:	64bb      	str	r3, [r7, #72]	; 0x48
 8002674:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002676:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800267a:	f7fd fdc3 	bl	8000204 <__aeabi_uldivmod>
 800267e:	4602      	mov	r2, r0
 8002680:	460b      	mov	r3, r1
 8002682:	4613      	mov	r3, r2
 8002684:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002688:	4b0d      	ldr	r3, [pc, #52]	; (80026c0 <HAL_RCC_GetSysClockFreq+0x458>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	0f1b      	lsrs	r3, r3, #28
 800268e:	f003 0307 	and.w	r3, r3, #7
 8002692:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002696:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800269a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800269e:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80026a6:	e003      	b.n	80026b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026a8:	4b06      	ldr	r3, [pc, #24]	; (80026c4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80026aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80026ae:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	37b8      	adds	r7, #184	; 0xb8
 80026b8:	46bd      	mov	sp, r7
 80026ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026be:	bf00      	nop
 80026c0:	40023800 	.word	0x40023800
 80026c4:	00f42400 	.word	0x00f42400

080026c8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e28d      	b.n	8002bf6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f000 8083 	beq.w	80027ee <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80026e8:	4b94      	ldr	r3, [pc, #592]	; (800293c <HAL_RCC_OscConfig+0x274>)
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f003 030c 	and.w	r3, r3, #12
 80026f0:	2b04      	cmp	r3, #4
 80026f2:	d019      	beq.n	8002728 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80026f4:	4b91      	ldr	r3, [pc, #580]	; (800293c <HAL_RCC_OscConfig+0x274>)
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80026fc:	2b08      	cmp	r3, #8
 80026fe:	d106      	bne.n	800270e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002700:	4b8e      	ldr	r3, [pc, #568]	; (800293c <HAL_RCC_OscConfig+0x274>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002708:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800270c:	d00c      	beq.n	8002728 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800270e:	4b8b      	ldr	r3, [pc, #556]	; (800293c <HAL_RCC_OscConfig+0x274>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002716:	2b0c      	cmp	r3, #12
 8002718:	d112      	bne.n	8002740 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800271a:	4b88      	ldr	r3, [pc, #544]	; (800293c <HAL_RCC_OscConfig+0x274>)
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002722:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002726:	d10b      	bne.n	8002740 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002728:	4b84      	ldr	r3, [pc, #528]	; (800293c <HAL_RCC_OscConfig+0x274>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d05b      	beq.n	80027ec <HAL_RCC_OscConfig+0x124>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d157      	bne.n	80027ec <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e25a      	b.n	8002bf6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002748:	d106      	bne.n	8002758 <HAL_RCC_OscConfig+0x90>
 800274a:	4b7c      	ldr	r3, [pc, #496]	; (800293c <HAL_RCC_OscConfig+0x274>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a7b      	ldr	r2, [pc, #492]	; (800293c <HAL_RCC_OscConfig+0x274>)
 8002750:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002754:	6013      	str	r3, [r2, #0]
 8002756:	e01d      	b.n	8002794 <HAL_RCC_OscConfig+0xcc>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002760:	d10c      	bne.n	800277c <HAL_RCC_OscConfig+0xb4>
 8002762:	4b76      	ldr	r3, [pc, #472]	; (800293c <HAL_RCC_OscConfig+0x274>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a75      	ldr	r2, [pc, #468]	; (800293c <HAL_RCC_OscConfig+0x274>)
 8002768:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800276c:	6013      	str	r3, [r2, #0]
 800276e:	4b73      	ldr	r3, [pc, #460]	; (800293c <HAL_RCC_OscConfig+0x274>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a72      	ldr	r2, [pc, #456]	; (800293c <HAL_RCC_OscConfig+0x274>)
 8002774:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002778:	6013      	str	r3, [r2, #0]
 800277a:	e00b      	b.n	8002794 <HAL_RCC_OscConfig+0xcc>
 800277c:	4b6f      	ldr	r3, [pc, #444]	; (800293c <HAL_RCC_OscConfig+0x274>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a6e      	ldr	r2, [pc, #440]	; (800293c <HAL_RCC_OscConfig+0x274>)
 8002782:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002786:	6013      	str	r3, [r2, #0]
 8002788:	4b6c      	ldr	r3, [pc, #432]	; (800293c <HAL_RCC_OscConfig+0x274>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a6b      	ldr	r2, [pc, #428]	; (800293c <HAL_RCC_OscConfig+0x274>)
 800278e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002792:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d013      	beq.n	80027c4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800279c:	f7fd ff1a 	bl	80005d4 <HAL_GetTick>
 80027a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027a2:	e008      	b.n	80027b6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027a4:	f7fd ff16 	bl	80005d4 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b64      	cmp	r3, #100	; 0x64
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e21f      	b.n	8002bf6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027b6:	4b61      	ldr	r3, [pc, #388]	; (800293c <HAL_RCC_OscConfig+0x274>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d0f0      	beq.n	80027a4 <HAL_RCC_OscConfig+0xdc>
 80027c2:	e014      	b.n	80027ee <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c4:	f7fd ff06 	bl	80005d4 <HAL_GetTick>
 80027c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ca:	e008      	b.n	80027de <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027cc:	f7fd ff02 	bl	80005d4 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b64      	cmp	r3, #100	; 0x64
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e20b      	b.n	8002bf6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027de:	4b57      	ldr	r3, [pc, #348]	; (800293c <HAL_RCC_OscConfig+0x274>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d1f0      	bne.n	80027cc <HAL_RCC_OscConfig+0x104>
 80027ea:	e000      	b.n	80027ee <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d06f      	beq.n	80028da <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80027fa:	4b50      	ldr	r3, [pc, #320]	; (800293c <HAL_RCC_OscConfig+0x274>)
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f003 030c 	and.w	r3, r3, #12
 8002802:	2b00      	cmp	r3, #0
 8002804:	d017      	beq.n	8002836 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002806:	4b4d      	ldr	r3, [pc, #308]	; (800293c <HAL_RCC_OscConfig+0x274>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800280e:	2b08      	cmp	r3, #8
 8002810:	d105      	bne.n	800281e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002812:	4b4a      	ldr	r3, [pc, #296]	; (800293c <HAL_RCC_OscConfig+0x274>)
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d00b      	beq.n	8002836 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800281e:	4b47      	ldr	r3, [pc, #284]	; (800293c <HAL_RCC_OscConfig+0x274>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002826:	2b0c      	cmp	r3, #12
 8002828:	d11c      	bne.n	8002864 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800282a:	4b44      	ldr	r3, [pc, #272]	; (800293c <HAL_RCC_OscConfig+0x274>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d116      	bne.n	8002864 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002836:	4b41      	ldr	r3, [pc, #260]	; (800293c <HAL_RCC_OscConfig+0x274>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d005      	beq.n	800284e <HAL_RCC_OscConfig+0x186>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	2b01      	cmp	r3, #1
 8002848:	d001      	beq.n	800284e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e1d3      	b.n	8002bf6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800284e:	4b3b      	ldr	r3, [pc, #236]	; (800293c <HAL_RCC_OscConfig+0x274>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	00db      	lsls	r3, r3, #3
 800285c:	4937      	ldr	r1, [pc, #220]	; (800293c <HAL_RCC_OscConfig+0x274>)
 800285e:	4313      	orrs	r3, r2
 8002860:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002862:	e03a      	b.n	80028da <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d020      	beq.n	80028ae <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800286c:	4b34      	ldr	r3, [pc, #208]	; (8002940 <HAL_RCC_OscConfig+0x278>)
 800286e:	2201      	movs	r2, #1
 8002870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002872:	f7fd feaf 	bl	80005d4 <HAL_GetTick>
 8002876:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002878:	e008      	b.n	800288c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800287a:	f7fd feab 	bl	80005d4 <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	2b02      	cmp	r3, #2
 8002886:	d901      	bls.n	800288c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e1b4      	b.n	8002bf6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800288c:	4b2b      	ldr	r3, [pc, #172]	; (800293c <HAL_RCC_OscConfig+0x274>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d0f0      	beq.n	800287a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002898:	4b28      	ldr	r3, [pc, #160]	; (800293c <HAL_RCC_OscConfig+0x274>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	00db      	lsls	r3, r3, #3
 80028a6:	4925      	ldr	r1, [pc, #148]	; (800293c <HAL_RCC_OscConfig+0x274>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	600b      	str	r3, [r1, #0]
 80028ac:	e015      	b.n	80028da <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028ae:	4b24      	ldr	r3, [pc, #144]	; (8002940 <HAL_RCC_OscConfig+0x278>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b4:	f7fd fe8e 	bl	80005d4 <HAL_GetTick>
 80028b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ba:	e008      	b.n	80028ce <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028bc:	f7fd fe8a 	bl	80005d4 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e193      	b.n	8002bf6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ce:	4b1b      	ldr	r3, [pc, #108]	; (800293c <HAL_RCC_OscConfig+0x274>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1f0      	bne.n	80028bc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0308 	and.w	r3, r3, #8
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d036      	beq.n	8002954 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d016      	beq.n	800291c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028ee:	4b15      	ldr	r3, [pc, #84]	; (8002944 <HAL_RCC_OscConfig+0x27c>)
 80028f0:	2201      	movs	r2, #1
 80028f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f4:	f7fd fe6e 	bl	80005d4 <HAL_GetTick>
 80028f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028fa:	e008      	b.n	800290e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028fc:	f7fd fe6a 	bl	80005d4 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b02      	cmp	r3, #2
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e173      	b.n	8002bf6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800290e:	4b0b      	ldr	r3, [pc, #44]	; (800293c <HAL_RCC_OscConfig+0x274>)
 8002910:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d0f0      	beq.n	80028fc <HAL_RCC_OscConfig+0x234>
 800291a:	e01b      	b.n	8002954 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800291c:	4b09      	ldr	r3, [pc, #36]	; (8002944 <HAL_RCC_OscConfig+0x27c>)
 800291e:	2200      	movs	r2, #0
 8002920:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002922:	f7fd fe57 	bl	80005d4 <HAL_GetTick>
 8002926:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002928:	e00e      	b.n	8002948 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800292a:	f7fd fe53 	bl	80005d4 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	2b02      	cmp	r3, #2
 8002936:	d907      	bls.n	8002948 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e15c      	b.n	8002bf6 <HAL_RCC_OscConfig+0x52e>
 800293c:	40023800 	.word	0x40023800
 8002940:	42470000 	.word	0x42470000
 8002944:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002948:	4b8a      	ldr	r3, [pc, #552]	; (8002b74 <HAL_RCC_OscConfig+0x4ac>)
 800294a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800294c:	f003 0302 	and.w	r3, r3, #2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d1ea      	bne.n	800292a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0304 	and.w	r3, r3, #4
 800295c:	2b00      	cmp	r3, #0
 800295e:	f000 8097 	beq.w	8002a90 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002962:	2300      	movs	r3, #0
 8002964:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002966:	4b83      	ldr	r3, [pc, #524]	; (8002b74 <HAL_RCC_OscConfig+0x4ac>)
 8002968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d10f      	bne.n	8002992 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002972:	2300      	movs	r3, #0
 8002974:	60bb      	str	r3, [r7, #8]
 8002976:	4b7f      	ldr	r3, [pc, #508]	; (8002b74 <HAL_RCC_OscConfig+0x4ac>)
 8002978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297a:	4a7e      	ldr	r2, [pc, #504]	; (8002b74 <HAL_RCC_OscConfig+0x4ac>)
 800297c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002980:	6413      	str	r3, [r2, #64]	; 0x40
 8002982:	4b7c      	ldr	r3, [pc, #496]	; (8002b74 <HAL_RCC_OscConfig+0x4ac>)
 8002984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800298a:	60bb      	str	r3, [r7, #8]
 800298c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800298e:	2301      	movs	r3, #1
 8002990:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002992:	4b79      	ldr	r3, [pc, #484]	; (8002b78 <HAL_RCC_OscConfig+0x4b0>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800299a:	2b00      	cmp	r3, #0
 800299c:	d118      	bne.n	80029d0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800299e:	4b76      	ldr	r3, [pc, #472]	; (8002b78 <HAL_RCC_OscConfig+0x4b0>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a75      	ldr	r2, [pc, #468]	; (8002b78 <HAL_RCC_OscConfig+0x4b0>)
 80029a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029aa:	f7fd fe13 	bl	80005d4 <HAL_GetTick>
 80029ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029b0:	e008      	b.n	80029c4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029b2:	f7fd fe0f 	bl	80005d4 <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d901      	bls.n	80029c4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e118      	b.n	8002bf6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c4:	4b6c      	ldr	r3, [pc, #432]	; (8002b78 <HAL_RCC_OscConfig+0x4b0>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d0f0      	beq.n	80029b2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d106      	bne.n	80029e6 <HAL_RCC_OscConfig+0x31e>
 80029d8:	4b66      	ldr	r3, [pc, #408]	; (8002b74 <HAL_RCC_OscConfig+0x4ac>)
 80029da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029dc:	4a65      	ldr	r2, [pc, #404]	; (8002b74 <HAL_RCC_OscConfig+0x4ac>)
 80029de:	f043 0301 	orr.w	r3, r3, #1
 80029e2:	6713      	str	r3, [r2, #112]	; 0x70
 80029e4:	e01c      	b.n	8002a20 <HAL_RCC_OscConfig+0x358>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	2b05      	cmp	r3, #5
 80029ec:	d10c      	bne.n	8002a08 <HAL_RCC_OscConfig+0x340>
 80029ee:	4b61      	ldr	r3, [pc, #388]	; (8002b74 <HAL_RCC_OscConfig+0x4ac>)
 80029f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f2:	4a60      	ldr	r2, [pc, #384]	; (8002b74 <HAL_RCC_OscConfig+0x4ac>)
 80029f4:	f043 0304 	orr.w	r3, r3, #4
 80029f8:	6713      	str	r3, [r2, #112]	; 0x70
 80029fa:	4b5e      	ldr	r3, [pc, #376]	; (8002b74 <HAL_RCC_OscConfig+0x4ac>)
 80029fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029fe:	4a5d      	ldr	r2, [pc, #372]	; (8002b74 <HAL_RCC_OscConfig+0x4ac>)
 8002a00:	f043 0301 	orr.w	r3, r3, #1
 8002a04:	6713      	str	r3, [r2, #112]	; 0x70
 8002a06:	e00b      	b.n	8002a20 <HAL_RCC_OscConfig+0x358>
 8002a08:	4b5a      	ldr	r3, [pc, #360]	; (8002b74 <HAL_RCC_OscConfig+0x4ac>)
 8002a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a0c:	4a59      	ldr	r2, [pc, #356]	; (8002b74 <HAL_RCC_OscConfig+0x4ac>)
 8002a0e:	f023 0301 	bic.w	r3, r3, #1
 8002a12:	6713      	str	r3, [r2, #112]	; 0x70
 8002a14:	4b57      	ldr	r3, [pc, #348]	; (8002b74 <HAL_RCC_OscConfig+0x4ac>)
 8002a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a18:	4a56      	ldr	r2, [pc, #344]	; (8002b74 <HAL_RCC_OscConfig+0x4ac>)
 8002a1a:	f023 0304 	bic.w	r3, r3, #4
 8002a1e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d015      	beq.n	8002a54 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a28:	f7fd fdd4 	bl	80005d4 <HAL_GetTick>
 8002a2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a2e:	e00a      	b.n	8002a46 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a30:	f7fd fdd0 	bl	80005d4 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e0d7      	b.n	8002bf6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a46:	4b4b      	ldr	r3, [pc, #300]	; (8002b74 <HAL_RCC_OscConfig+0x4ac>)
 8002a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d0ee      	beq.n	8002a30 <HAL_RCC_OscConfig+0x368>
 8002a52:	e014      	b.n	8002a7e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a54:	f7fd fdbe 	bl	80005d4 <HAL_GetTick>
 8002a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a5a:	e00a      	b.n	8002a72 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a5c:	f7fd fdba 	bl	80005d4 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e0c1      	b.n	8002bf6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a72:	4b40      	ldr	r3, [pc, #256]	; (8002b74 <HAL_RCC_OscConfig+0x4ac>)
 8002a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d1ee      	bne.n	8002a5c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a7e:	7dfb      	ldrb	r3, [r7, #23]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d105      	bne.n	8002a90 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a84:	4b3b      	ldr	r3, [pc, #236]	; (8002b74 <HAL_RCC_OscConfig+0x4ac>)
 8002a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a88:	4a3a      	ldr	r2, [pc, #232]	; (8002b74 <HAL_RCC_OscConfig+0x4ac>)
 8002a8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a8e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	f000 80ad 	beq.w	8002bf4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a9a:	4b36      	ldr	r3, [pc, #216]	; (8002b74 <HAL_RCC_OscConfig+0x4ac>)
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f003 030c 	and.w	r3, r3, #12
 8002aa2:	2b08      	cmp	r3, #8
 8002aa4:	d060      	beq.n	8002b68 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	699b      	ldr	r3, [r3, #24]
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d145      	bne.n	8002b3a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aae:	4b33      	ldr	r3, [pc, #204]	; (8002b7c <HAL_RCC_OscConfig+0x4b4>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab4:	f7fd fd8e 	bl	80005d4 <HAL_GetTick>
 8002ab8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aba:	e008      	b.n	8002ace <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002abc:	f7fd fd8a 	bl	80005d4 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e093      	b.n	8002bf6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ace:	4b29      	ldr	r3, [pc, #164]	; (8002b74 <HAL_RCC_OscConfig+0x4ac>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d1f0      	bne.n	8002abc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	69da      	ldr	r2, [r3, #28]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a1b      	ldr	r3, [r3, #32]
 8002ae2:	431a      	orrs	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae8:	019b      	lsls	r3, r3, #6
 8002aea:	431a      	orrs	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af0:	085b      	lsrs	r3, r3, #1
 8002af2:	3b01      	subs	r3, #1
 8002af4:	041b      	lsls	r3, r3, #16
 8002af6:	431a      	orrs	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002afc:	061b      	lsls	r3, r3, #24
 8002afe:	431a      	orrs	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b04:	071b      	lsls	r3, r3, #28
 8002b06:	491b      	ldr	r1, [pc, #108]	; (8002b74 <HAL_RCC_OscConfig+0x4ac>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b0c:	4b1b      	ldr	r3, [pc, #108]	; (8002b7c <HAL_RCC_OscConfig+0x4b4>)
 8002b0e:	2201      	movs	r2, #1
 8002b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b12:	f7fd fd5f 	bl	80005d4 <HAL_GetTick>
 8002b16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b18:	e008      	b.n	8002b2c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b1a:	f7fd fd5b 	bl	80005d4 <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d901      	bls.n	8002b2c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e064      	b.n	8002bf6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b2c:	4b11      	ldr	r3, [pc, #68]	; (8002b74 <HAL_RCC_OscConfig+0x4ac>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d0f0      	beq.n	8002b1a <HAL_RCC_OscConfig+0x452>
 8002b38:	e05c      	b.n	8002bf4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b3a:	4b10      	ldr	r3, [pc, #64]	; (8002b7c <HAL_RCC_OscConfig+0x4b4>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b40:	f7fd fd48 	bl	80005d4 <HAL_GetTick>
 8002b44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b46:	e008      	b.n	8002b5a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b48:	f7fd fd44 	bl	80005d4 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e04d      	b.n	8002bf6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b5a:	4b06      	ldr	r3, [pc, #24]	; (8002b74 <HAL_RCC_OscConfig+0x4ac>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d1f0      	bne.n	8002b48 <HAL_RCC_OscConfig+0x480>
 8002b66:	e045      	b.n	8002bf4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d107      	bne.n	8002b80 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e040      	b.n	8002bf6 <HAL_RCC_OscConfig+0x52e>
 8002b74:	40023800 	.word	0x40023800
 8002b78:	40007000 	.word	0x40007000
 8002b7c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b80:	4b1f      	ldr	r3, [pc, #124]	; (8002c00 <HAL_RCC_OscConfig+0x538>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d030      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d129      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d122      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002baa:	68fa      	ldr	r2, [r7, #12]
 8002bac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002bb6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d119      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc6:	085b      	lsrs	r3, r3, #1
 8002bc8:	3b01      	subs	r3, #1
 8002bca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d10f      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bda:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d107      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bea:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d001      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e000      	b.n	8002bf6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3718      	adds	r7, #24
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	40023800 	.word	0x40023800

08002c04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e03f      	b.n	8002c96 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d106      	bne.n	8002c30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f001 fec8 	bl	80049c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2224      	movs	r2, #36	; 0x24
 8002c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68da      	ldr	r2, [r3, #12]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f000 ff69 	bl	8003b20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	691a      	ldr	r2, [r3, #16]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	695a      	ldr	r2, [r3, #20]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	68da      	ldr	r2, [r3, #12]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2220      	movs	r2, #32
 8002c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2220      	movs	r2, #32
 8002c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b08a      	sub	sp, #40	; 0x28
 8002ca2:	af02      	add	r7, sp, #8
 8002ca4:	60f8      	str	r0, [r7, #12]
 8002ca6:	60b9      	str	r1, [r7, #8]
 8002ca8:	603b      	str	r3, [r7, #0]
 8002caa:	4613      	mov	r3, r2
 8002cac:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2b20      	cmp	r3, #32
 8002cbc:	d17c      	bne.n	8002db8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d002      	beq.n	8002cca <HAL_UART_Transmit+0x2c>
 8002cc4:	88fb      	ldrh	r3, [r7, #6]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e075      	b.n	8002dba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d101      	bne.n	8002cdc <HAL_UART_Transmit+0x3e>
 8002cd8:	2302      	movs	r3, #2
 8002cda:	e06e      	b.n	8002dba <HAL_UART_Transmit+0x11c>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2221      	movs	r2, #33	; 0x21
 8002cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002cf2:	f7fd fc6f 	bl	80005d4 <HAL_GetTick>
 8002cf6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	88fa      	ldrh	r2, [r7, #6]
 8002cfc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	88fa      	ldrh	r2, [r7, #6]
 8002d02:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d0c:	d108      	bne.n	8002d20 <HAL_UART_Transmit+0x82>
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	691b      	ldr	r3, [r3, #16]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d104      	bne.n	8002d20 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002d16:	2300      	movs	r3, #0
 8002d18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	61bb      	str	r3, [r7, #24]
 8002d1e:	e003      	b.n	8002d28 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d24:	2300      	movs	r3, #0
 8002d26:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002d30:	e02a      	b.n	8002d88 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	9300      	str	r3, [sp, #0]
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	2180      	movs	r1, #128	; 0x80
 8002d3c:	68f8      	ldr	r0, [r7, #12]
 8002d3e:	f000 fc21 	bl	8003584 <UART_WaitOnFlagUntilTimeout>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e036      	b.n	8002dba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d10b      	bne.n	8002d6a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	881b      	ldrh	r3, [r3, #0]
 8002d56:	461a      	mov	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d60:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	3302      	adds	r3, #2
 8002d66:	61bb      	str	r3, [r7, #24]
 8002d68:	e007      	b.n	8002d7a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	781a      	ldrb	r2, [r3, #0]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	3301      	adds	r3, #1
 8002d78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	3b01      	subs	r3, #1
 8002d82:	b29a      	uxth	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1cf      	bne.n	8002d32 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	9300      	str	r3, [sp, #0]
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	2140      	movs	r1, #64	; 0x40
 8002d9c:	68f8      	ldr	r0, [r7, #12]
 8002d9e:	f000 fbf1 	bl	8003584 <UART_WaitOnFlagUntilTimeout>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e006      	b.n	8002dba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2220      	movs	r2, #32
 8002db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002db4:	2300      	movs	r3, #0
 8002db6:	e000      	b.n	8002dba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002db8:	2302      	movs	r3, #2
  }
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3720      	adds	r7, #32
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b084      	sub	sp, #16
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	60f8      	str	r0, [r7, #12]
 8002dca:	60b9      	str	r1, [r7, #8]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	2b20      	cmp	r3, #32
 8002dda:	d11d      	bne.n	8002e18 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d002      	beq.n	8002de8 <HAL_UART_Receive_DMA+0x26>
 8002de2:	88fb      	ldrh	r3, [r7, #6]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d101      	bne.n	8002dec <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e016      	b.n	8002e1a <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d101      	bne.n	8002dfa <HAL_UART_Receive_DMA+0x38>
 8002df6:	2302      	movs	r3, #2
 8002df8:	e00f      	b.n	8002e1a <HAL_UART_Receive_DMA+0x58>
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2200      	movs	r2, #0
 8002e06:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002e08:	88fb      	ldrh	r3, [r7, #6]
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	68b9      	ldr	r1, [r7, #8]
 8002e0e:	68f8      	ldr	r0, [r7, #12]
 8002e10:	f000 fc26 	bl	8003660 <UART_Start_Receive_DMA>
 8002e14:	4603      	mov	r3, r0
 8002e16:	e000      	b.n	8002e1a <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002e18:	2302      	movs	r3, #2
  }
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
	...

08002e24 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b0ba      	sub	sp, #232	; 0xe8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002e50:	2300      	movs	r3, #0
 8002e52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e5a:	f003 030f 	and.w	r3, r3, #15
 8002e5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002e62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d10f      	bne.n	8002e8a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e6e:	f003 0320 	and.w	r3, r3, #32
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d009      	beq.n	8002e8a <HAL_UART_IRQHandler+0x66>
 8002e76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e7a:	f003 0320 	and.w	r3, r3, #32
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d003      	beq.n	8002e8a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 fd91 	bl	80039aa <UART_Receive_IT>
      return;
 8002e88:	e256      	b.n	8003338 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002e8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	f000 80de 	beq.w	8003050 <HAL_UART_IRQHandler+0x22c>
 8002e94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e98:	f003 0301 	and.w	r3, r3, #1
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d106      	bne.n	8002eae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002ea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ea4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	f000 80d1 	beq.w	8003050 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00b      	beq.n	8002ed2 <HAL_UART_IRQHandler+0xae>
 8002eba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d005      	beq.n	8002ed2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eca:	f043 0201 	orr.w	r2, r3, #1
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ed6:	f003 0304 	and.w	r3, r3, #4
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00b      	beq.n	8002ef6 <HAL_UART_IRQHandler+0xd2>
 8002ede:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d005      	beq.n	8002ef6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	f043 0202 	orr.w	r2, r3, #2
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00b      	beq.n	8002f1a <HAL_UART_IRQHandler+0xf6>
 8002f02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d005      	beq.n	8002f1a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f12:	f043 0204 	orr.w	r2, r3, #4
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f1e:	f003 0308 	and.w	r3, r3, #8
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d011      	beq.n	8002f4a <HAL_UART_IRQHandler+0x126>
 8002f26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f2a:	f003 0320 	and.w	r3, r3, #32
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d105      	bne.n	8002f3e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002f32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f36:	f003 0301 	and.w	r3, r3, #1
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d005      	beq.n	8002f4a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	f043 0208 	orr.w	r2, r3, #8
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	f000 81ed 	beq.w	800332e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f58:	f003 0320 	and.w	r3, r3, #32
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d008      	beq.n	8002f72 <HAL_UART_IRQHandler+0x14e>
 8002f60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f64:	f003 0320 	and.w	r3, r3, #32
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d002      	beq.n	8002f72 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f000 fd1c 	bl	80039aa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	695b      	ldr	r3, [r3, #20]
 8002f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f7c:	2b40      	cmp	r3, #64	; 0x40
 8002f7e:	bf0c      	ite	eq
 8002f80:	2301      	moveq	r3, #1
 8002f82:	2300      	movne	r3, #0
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8e:	f003 0308 	and.w	r3, r3, #8
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d103      	bne.n	8002f9e <HAL_UART_IRQHandler+0x17a>
 8002f96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d04f      	beq.n	800303e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 fc24 	bl	80037ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fae:	2b40      	cmp	r3, #64	; 0x40
 8002fb0:	d141      	bne.n	8003036 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	3314      	adds	r3, #20
 8002fb8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002fc0:	e853 3f00 	ldrex	r3, [r3]
 8002fc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002fc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002fcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fd0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	3314      	adds	r3, #20
 8002fda:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002fde:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002fe2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fe6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002fea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002fee:	e841 2300 	strex	r3, r2, [r1]
 8002ff2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002ff6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1d9      	bne.n	8002fb2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003002:	2b00      	cmp	r3, #0
 8003004:	d013      	beq.n	800302e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800300a:	4a7d      	ldr	r2, [pc, #500]	; (8003200 <HAL_UART_IRQHandler+0x3dc>)
 800300c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003012:	4618      	mov	r0, r3
 8003014:	f7fe fbd4 	bl	80017c0 <HAL_DMA_Abort_IT>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d016      	beq.n	800304c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003022:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003028:	4610      	mov	r0, r2
 800302a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800302c:	e00e      	b.n	800304c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 f99a 	bl	8003368 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003034:	e00a      	b.n	800304c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 f996 	bl	8003368 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800303c:	e006      	b.n	800304c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 f992 	bl	8003368 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800304a:	e170      	b.n	800332e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800304c:	bf00      	nop
    return;
 800304e:	e16e      	b.n	800332e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003054:	2b01      	cmp	r3, #1
 8003056:	f040 814a 	bne.w	80032ee <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800305a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800305e:	f003 0310 	and.w	r3, r3, #16
 8003062:	2b00      	cmp	r3, #0
 8003064:	f000 8143 	beq.w	80032ee <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800306c:	f003 0310 	and.w	r3, r3, #16
 8003070:	2b00      	cmp	r3, #0
 8003072:	f000 813c 	beq.w	80032ee <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003076:	2300      	movs	r3, #0
 8003078:	60bb      	str	r3, [r7, #8]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	60bb      	str	r3, [r7, #8]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	60bb      	str	r3, [r7, #8]
 800308a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003096:	2b40      	cmp	r3, #64	; 0x40
 8003098:	f040 80b4 	bne.w	8003204 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80030a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	f000 8140 	beq.w	8003332 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80030b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80030ba:	429a      	cmp	r2, r3
 80030bc:	f080 8139 	bcs.w	8003332 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80030c6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030cc:	69db      	ldr	r3, [r3, #28]
 80030ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030d2:	f000 8088 	beq.w	80031e6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	330c      	adds	r3, #12
 80030dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80030e4:	e853 3f00 	ldrex	r3, [r3]
 80030e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80030ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	330c      	adds	r3, #12
 80030fe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003102:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003106:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800310a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800310e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003112:	e841 2300 	strex	r3, r2, [r1]
 8003116:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800311a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1d9      	bne.n	80030d6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	3314      	adds	r3, #20
 8003128:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800312a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800312c:	e853 3f00 	ldrex	r3, [r3]
 8003130:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003132:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003134:	f023 0301 	bic.w	r3, r3, #1
 8003138:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	3314      	adds	r3, #20
 8003142:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003146:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800314a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800314c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800314e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003152:	e841 2300 	strex	r3, r2, [r1]
 8003156:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003158:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1e1      	bne.n	8003122 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	3314      	adds	r3, #20
 8003164:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003166:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003168:	e853 3f00 	ldrex	r3, [r3]
 800316c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800316e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003170:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003174:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	3314      	adds	r3, #20
 800317e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003182:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003184:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003186:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003188:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800318a:	e841 2300 	strex	r3, r2, [r1]
 800318e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003190:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003192:	2b00      	cmp	r3, #0
 8003194:	d1e3      	bne.n	800315e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2220      	movs	r2, #32
 800319a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	330c      	adds	r3, #12
 80031aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031ae:	e853 3f00 	ldrex	r3, [r3]
 80031b2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80031b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031b6:	f023 0310 	bic.w	r3, r3, #16
 80031ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	330c      	adds	r3, #12
 80031c4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80031c8:	65ba      	str	r2, [r7, #88]	; 0x58
 80031ca:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80031ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80031d0:	e841 2300 	strex	r3, r2, [r1]
 80031d4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80031d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d1e3      	bne.n	80031a4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7fe fa7d 	bl	80016e0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	4619      	mov	r1, r3
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 f8c0 	bl	800337c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80031fc:	e099      	b.n	8003332 <HAL_UART_IRQHandler+0x50e>
 80031fe:	bf00      	nop
 8003200:	080038b3 	.word	0x080038b3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800320c:	b29b      	uxth	r3, r3
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003218:	b29b      	uxth	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	f000 808b 	beq.w	8003336 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003220:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003224:	2b00      	cmp	r3, #0
 8003226:	f000 8086 	beq.w	8003336 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	330c      	adds	r3, #12
 8003230:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003234:	e853 3f00 	ldrex	r3, [r3]
 8003238:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800323a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800323c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003240:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	330c      	adds	r3, #12
 800324a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800324e:	647a      	str	r2, [r7, #68]	; 0x44
 8003250:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003252:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003254:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003256:	e841 2300 	strex	r3, r2, [r1]
 800325a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800325c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800325e:	2b00      	cmp	r3, #0
 8003260:	d1e3      	bne.n	800322a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	3314      	adds	r3, #20
 8003268:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800326a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326c:	e853 3f00 	ldrex	r3, [r3]
 8003270:	623b      	str	r3, [r7, #32]
   return(result);
 8003272:	6a3b      	ldr	r3, [r7, #32]
 8003274:	f023 0301 	bic.w	r3, r3, #1
 8003278:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	3314      	adds	r3, #20
 8003282:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003286:	633a      	str	r2, [r7, #48]	; 0x30
 8003288:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800328a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800328c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800328e:	e841 2300 	strex	r3, r2, [r1]
 8003292:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1e3      	bne.n	8003262 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2220      	movs	r2, #32
 800329e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	330c      	adds	r3, #12
 80032ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	e853 3f00 	ldrex	r3, [r3]
 80032b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f023 0310 	bic.w	r3, r3, #16
 80032be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	330c      	adds	r3, #12
 80032c8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80032cc:	61fa      	str	r2, [r7, #28]
 80032ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032d0:	69b9      	ldr	r1, [r7, #24]
 80032d2:	69fa      	ldr	r2, [r7, #28]
 80032d4:	e841 2300 	strex	r3, r2, [r1]
 80032d8:	617b      	str	r3, [r7, #20]
   return(result);
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1e3      	bne.n	80032a8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80032e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80032e4:	4619      	mov	r1, r3
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 f848 	bl	800337c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80032ec:	e023      	b.n	8003336 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80032ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d009      	beq.n	800330e <HAL_UART_IRQHandler+0x4ea>
 80032fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003302:	2b00      	cmp	r3, #0
 8003304:	d003      	beq.n	800330e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 fae7 	bl	80038da <UART_Transmit_IT>
    return;
 800330c:	e014      	b.n	8003338 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800330e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003316:	2b00      	cmp	r3, #0
 8003318:	d00e      	beq.n	8003338 <HAL_UART_IRQHandler+0x514>
 800331a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800331e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003322:	2b00      	cmp	r3, #0
 8003324:	d008      	beq.n	8003338 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 fb27 	bl	800397a <UART_EndTransmit_IT>
    return;
 800332c:	e004      	b.n	8003338 <HAL_UART_IRQHandler+0x514>
    return;
 800332e:	bf00      	nop
 8003330:	e002      	b.n	8003338 <HAL_UART_IRQHandler+0x514>
      return;
 8003332:	bf00      	nop
 8003334:	e000      	b.n	8003338 <HAL_UART_IRQHandler+0x514>
      return;
 8003336:	bf00      	nop
  }
}
 8003338:	37e8      	adds	r7, #232	; 0xe8
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop

08003340 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003348:	bf00      	nop
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800335c:	bf00      	nop
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	460b      	mov	r3, r1
 8003386:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003388:	bf00      	nop
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b09c      	sub	sp, #112	; 0x70
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a0:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d172      	bne.n	8003496 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80033b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033b2:	2200      	movs	r2, #0
 80033b4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	330c      	adds	r3, #12
 80033bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033c0:	e853 3f00 	ldrex	r3, [r3]
 80033c4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80033c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80033ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	330c      	adds	r3, #12
 80033d4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80033d6:	65ba      	str	r2, [r7, #88]	; 0x58
 80033d8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033da:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80033dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80033de:	e841 2300 	strex	r3, r2, [r1]
 80033e2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80033e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1e5      	bne.n	80033b6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	3314      	adds	r3, #20
 80033f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033f4:	e853 3f00 	ldrex	r3, [r3]
 80033f8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80033fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033fc:	f023 0301 	bic.w	r3, r3, #1
 8003400:	667b      	str	r3, [r7, #100]	; 0x64
 8003402:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	3314      	adds	r3, #20
 8003408:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800340a:	647a      	str	r2, [r7, #68]	; 0x44
 800340c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800340e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003410:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003412:	e841 2300 	strex	r3, r2, [r1]
 8003416:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003418:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1e5      	bne.n	80033ea <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800341e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	3314      	adds	r3, #20
 8003424:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003428:	e853 3f00 	ldrex	r3, [r3]
 800342c:	623b      	str	r3, [r7, #32]
   return(result);
 800342e:	6a3b      	ldr	r3, [r7, #32]
 8003430:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003434:	663b      	str	r3, [r7, #96]	; 0x60
 8003436:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	3314      	adds	r3, #20
 800343c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800343e:	633a      	str	r2, [r7, #48]	; 0x30
 8003440:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003442:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003444:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003446:	e841 2300 	strex	r3, r2, [r1]
 800344a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800344c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1e5      	bne.n	800341e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003452:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003454:	2220      	movs	r2, #32
 8003456:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800345a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800345c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345e:	2b01      	cmp	r3, #1
 8003460:	d119      	bne.n	8003496 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003462:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	330c      	adds	r3, #12
 8003468:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	e853 3f00 	ldrex	r3, [r3]
 8003470:	60fb      	str	r3, [r7, #12]
   return(result);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f023 0310 	bic.w	r3, r3, #16
 8003478:	65fb      	str	r3, [r7, #92]	; 0x5c
 800347a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	330c      	adds	r3, #12
 8003480:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003482:	61fa      	str	r2, [r7, #28]
 8003484:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003486:	69b9      	ldr	r1, [r7, #24]
 8003488:	69fa      	ldr	r2, [r7, #28]
 800348a:	e841 2300 	strex	r3, r2, [r1]
 800348e:	617b      	str	r3, [r7, #20]
   return(result);
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1e5      	bne.n	8003462 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003496:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349a:	2b01      	cmp	r3, #1
 800349c:	d106      	bne.n	80034ac <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800349e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80034a2:	4619      	mov	r1, r3
 80034a4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80034a6:	f7ff ff69 	bl	800337c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80034aa:	e002      	b.n	80034b2 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80034ac:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80034ae:	f001 f93d 	bl	800472c <HAL_UART_RxCpltCallback>
}
 80034b2:	bf00      	nop
 80034b4:	3770      	adds	r7, #112	; 0x70
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}

080034ba <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b084      	sub	sp, #16
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c6:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d108      	bne.n	80034e2 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80034d4:	085b      	lsrs	r3, r3, #1
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	4619      	mov	r1, r3
 80034da:	68f8      	ldr	r0, [r7, #12]
 80034dc:	f7ff ff4e 	bl	800337c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80034e0:	e002      	b.n	80034e8 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80034e2:	68f8      	ldr	r0, [r7, #12]
 80034e4:	f7ff ff36 	bl	8003354 <HAL_UART_RxHalfCpltCallback>
}
 80034e8:	bf00      	nop
 80034ea:	3710      	adds	r7, #16
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80034f8:	2300      	movs	r3, #0
 80034fa:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003500:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	695b      	ldr	r3, [r3, #20]
 8003508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800350c:	2b80      	cmp	r3, #128	; 0x80
 800350e:	bf0c      	ite	eq
 8003510:	2301      	moveq	r3, #1
 8003512:	2300      	movne	r3, #0
 8003514:	b2db      	uxtb	r3, r3
 8003516:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800351e:	b2db      	uxtb	r3, r3
 8003520:	2b21      	cmp	r3, #33	; 0x21
 8003522:	d108      	bne.n	8003536 <UART_DMAError+0x46>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d005      	beq.n	8003536 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	2200      	movs	r2, #0
 800352e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003530:	68b8      	ldr	r0, [r7, #8]
 8003532:	f000 f933 	bl	800379c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	695b      	ldr	r3, [r3, #20]
 800353c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003540:	2b40      	cmp	r3, #64	; 0x40
 8003542:	bf0c      	ite	eq
 8003544:	2301      	moveq	r3, #1
 8003546:	2300      	movne	r3, #0
 8003548:	b2db      	uxtb	r3, r3
 800354a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003552:	b2db      	uxtb	r3, r3
 8003554:	2b22      	cmp	r3, #34	; 0x22
 8003556:	d108      	bne.n	800356a <UART_DMAError+0x7a>
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d005      	beq.n	800356a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	2200      	movs	r2, #0
 8003562:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003564:	68b8      	ldr	r0, [r7, #8]
 8003566:	f000 f941 	bl	80037ec <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356e:	f043 0210 	orr.w	r2, r3, #16
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003576:	68b8      	ldr	r0, [r7, #8]
 8003578:	f7ff fef6 	bl	8003368 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800357c:	bf00      	nop
 800357e:	3710      	adds	r7, #16
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b090      	sub	sp, #64	; 0x40
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	603b      	str	r3, [r7, #0]
 8003590:	4613      	mov	r3, r2
 8003592:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003594:	e050      	b.n	8003638 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003596:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003598:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800359c:	d04c      	beq.n	8003638 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800359e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d007      	beq.n	80035b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80035a4:	f7fd f816 	bl	80005d4 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d241      	bcs.n	8003638 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	330c      	adds	r3, #12
 80035ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035be:	e853 3f00 	ldrex	r3, [r3]
 80035c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80035c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80035ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	330c      	adds	r3, #12
 80035d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035d4:	637a      	str	r2, [r7, #52]	; 0x34
 80035d6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80035da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035dc:	e841 2300 	strex	r3, r2, [r1]
 80035e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80035e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1e5      	bne.n	80035b4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	3314      	adds	r3, #20
 80035ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	e853 3f00 	ldrex	r3, [r3]
 80035f6:	613b      	str	r3, [r7, #16]
   return(result);
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	f023 0301 	bic.w	r3, r3, #1
 80035fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	3314      	adds	r3, #20
 8003606:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003608:	623a      	str	r2, [r7, #32]
 800360a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800360c:	69f9      	ldr	r1, [r7, #28]
 800360e:	6a3a      	ldr	r2, [r7, #32]
 8003610:	e841 2300 	strex	r3, r2, [r1]
 8003614:	61bb      	str	r3, [r7, #24]
   return(result);
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1e5      	bne.n	80035e8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2220      	movs	r2, #32
 8003620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2220      	movs	r2, #32
 8003628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e00f      	b.n	8003658 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	4013      	ands	r3, r2
 8003642:	68ba      	ldr	r2, [r7, #8]
 8003644:	429a      	cmp	r2, r3
 8003646:	bf0c      	ite	eq
 8003648:	2301      	moveq	r3, #1
 800364a:	2300      	movne	r3, #0
 800364c:	b2db      	uxtb	r3, r3
 800364e:	461a      	mov	r2, r3
 8003650:	79fb      	ldrb	r3, [r7, #7]
 8003652:	429a      	cmp	r2, r3
 8003654:	d09f      	beq.n	8003596 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3740      	adds	r7, #64	; 0x40
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b098      	sub	sp, #96	; 0x60
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	4613      	mov	r3, r2
 800366c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800366e:	68ba      	ldr	r2, [r7, #8]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	88fa      	ldrh	r2, [r7, #6]
 8003678:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2222      	movs	r2, #34	; 0x22
 8003684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800368c:	4a40      	ldr	r2, [pc, #256]	; (8003790 <UART_Start_Receive_DMA+0x130>)
 800368e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003694:	4a3f      	ldr	r2, [pc, #252]	; (8003794 <UART_Start_Receive_DMA+0x134>)
 8003696:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800369c:	4a3e      	ldr	r2, [pc, #248]	; (8003798 <UART_Start_Receive_DMA+0x138>)
 800369e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a4:	2200      	movs	r2, #0
 80036a6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80036a8:	f107 0308 	add.w	r3, r7, #8
 80036ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	3304      	adds	r3, #4
 80036b8:	4619      	mov	r1, r3
 80036ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	88fb      	ldrh	r3, [r7, #6]
 80036c0:	f7fd ffb6 	bl	8001630 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80036c4:	2300      	movs	r3, #0
 80036c6:	613b      	str	r3, [r7, #16]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	613b      	str	r3, [r7, #16]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	613b      	str	r3, [r7, #16]
 80036d8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d019      	beq.n	800371e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	330c      	adds	r3, #12
 80036f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036f4:	e853 3f00 	ldrex	r3, [r3]
 80036f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80036fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003700:	65bb      	str	r3, [r7, #88]	; 0x58
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	330c      	adds	r3, #12
 8003708:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800370a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800370c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800370e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003710:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003712:	e841 2300 	strex	r3, r2, [r1]
 8003716:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003718:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800371a:	2b00      	cmp	r3, #0
 800371c:	d1e5      	bne.n	80036ea <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	3314      	adds	r3, #20
 8003724:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003728:	e853 3f00 	ldrex	r3, [r3]
 800372c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800372e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003730:	f043 0301 	orr.w	r3, r3, #1
 8003734:	657b      	str	r3, [r7, #84]	; 0x54
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	3314      	adds	r3, #20
 800373c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800373e:	63ba      	str	r2, [r7, #56]	; 0x38
 8003740:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003742:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003744:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003746:	e841 2300 	strex	r3, r2, [r1]
 800374a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800374c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800374e:	2b00      	cmp	r3, #0
 8003750:	d1e5      	bne.n	800371e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	3314      	adds	r3, #20
 8003758:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	e853 3f00 	ldrex	r3, [r3]
 8003760:	617b      	str	r3, [r7, #20]
   return(result);
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003768:	653b      	str	r3, [r7, #80]	; 0x50
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	3314      	adds	r3, #20
 8003770:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003772:	627a      	str	r2, [r7, #36]	; 0x24
 8003774:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003776:	6a39      	ldr	r1, [r7, #32]
 8003778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800377a:	e841 2300 	strex	r3, r2, [r1]
 800377e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1e5      	bne.n	8003752 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	3760      	adds	r7, #96	; 0x60
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	08003395 	.word	0x08003395
 8003794:	080034bb 	.word	0x080034bb
 8003798:	080034f1 	.word	0x080034f1

0800379c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800379c:	b480      	push	{r7}
 800379e:	b089      	sub	sp, #36	; 0x24
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	330c      	adds	r3, #12
 80037aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	e853 3f00 	ldrex	r3, [r3]
 80037b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80037ba:	61fb      	str	r3, [r7, #28]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	330c      	adds	r3, #12
 80037c2:	69fa      	ldr	r2, [r7, #28]
 80037c4:	61ba      	str	r2, [r7, #24]
 80037c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c8:	6979      	ldr	r1, [r7, #20]
 80037ca:	69ba      	ldr	r2, [r7, #24]
 80037cc:	e841 2300 	strex	r3, r2, [r1]
 80037d0:	613b      	str	r3, [r7, #16]
   return(result);
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1e5      	bne.n	80037a4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2220      	movs	r2, #32
 80037dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80037e0:	bf00      	nop
 80037e2:	3724      	adds	r7, #36	; 0x24
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b095      	sub	sp, #84	; 0x54
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	330c      	adds	r3, #12
 80037fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037fe:	e853 3f00 	ldrex	r3, [r3]
 8003802:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003806:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800380a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	330c      	adds	r3, #12
 8003812:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003814:	643a      	str	r2, [r7, #64]	; 0x40
 8003816:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003818:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800381a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800381c:	e841 2300 	strex	r3, r2, [r1]
 8003820:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003824:	2b00      	cmp	r3, #0
 8003826:	d1e5      	bne.n	80037f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	3314      	adds	r3, #20
 800382e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003830:	6a3b      	ldr	r3, [r7, #32]
 8003832:	e853 3f00 	ldrex	r3, [r3]
 8003836:	61fb      	str	r3, [r7, #28]
   return(result);
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	f023 0301 	bic.w	r3, r3, #1
 800383e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	3314      	adds	r3, #20
 8003846:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003848:	62fa      	str	r2, [r7, #44]	; 0x2c
 800384a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800384c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800384e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003850:	e841 2300 	strex	r3, r2, [r1]
 8003854:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003858:	2b00      	cmp	r3, #0
 800385a:	d1e5      	bne.n	8003828 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003860:	2b01      	cmp	r3, #1
 8003862:	d119      	bne.n	8003898 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	330c      	adds	r3, #12
 800386a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	e853 3f00 	ldrex	r3, [r3]
 8003872:	60bb      	str	r3, [r7, #8]
   return(result);
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	f023 0310 	bic.w	r3, r3, #16
 800387a:	647b      	str	r3, [r7, #68]	; 0x44
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	330c      	adds	r3, #12
 8003882:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003884:	61ba      	str	r2, [r7, #24]
 8003886:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003888:	6979      	ldr	r1, [r7, #20]
 800388a:	69ba      	ldr	r2, [r7, #24]
 800388c:	e841 2300 	strex	r3, r2, [r1]
 8003890:	613b      	str	r3, [r7, #16]
   return(result);
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d1e5      	bne.n	8003864 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2220      	movs	r2, #32
 800389c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80038a6:	bf00      	nop
 80038a8:	3754      	adds	r7, #84	; 0x54
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr

080038b2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80038b2:	b580      	push	{r7, lr}
 80038b4:	b084      	sub	sp, #16
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	f7ff fd4b 	bl	8003368 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038d2:	bf00      	nop
 80038d4:	3710      	adds	r7, #16
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}

080038da <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80038da:	b480      	push	{r7}
 80038dc:	b085      	sub	sp, #20
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	2b21      	cmp	r3, #33	; 0x21
 80038ec:	d13e      	bne.n	800396c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038f6:	d114      	bne.n	8003922 <UART_Transmit_IT+0x48>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d110      	bne.n	8003922 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a1b      	ldr	r3, [r3, #32]
 8003904:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	881b      	ldrh	r3, [r3, #0]
 800390a:	461a      	mov	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003914:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a1b      	ldr	r3, [r3, #32]
 800391a:	1c9a      	adds	r2, r3, #2
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	621a      	str	r2, [r3, #32]
 8003920:	e008      	b.n	8003934 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a1b      	ldr	r3, [r3, #32]
 8003926:	1c59      	adds	r1, r3, #1
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	6211      	str	r1, [r2, #32]
 800392c:	781a      	ldrb	r2, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003938:	b29b      	uxth	r3, r3
 800393a:	3b01      	subs	r3, #1
 800393c:	b29b      	uxth	r3, r3
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	4619      	mov	r1, r3
 8003942:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003944:	2b00      	cmp	r3, #0
 8003946:	d10f      	bne.n	8003968 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68da      	ldr	r2, [r3, #12]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003956:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68da      	ldr	r2, [r3, #12]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003966:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003968:	2300      	movs	r3, #0
 800396a:	e000      	b.n	800396e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800396c:	2302      	movs	r3, #2
  }
}
 800396e:	4618      	mov	r0, r3
 8003970:	3714      	adds	r7, #20
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr

0800397a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800397a:	b580      	push	{r7, lr}
 800397c:	b082      	sub	sp, #8
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68da      	ldr	r2, [r3, #12]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003990:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2220      	movs	r2, #32
 8003996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f7ff fcd0 	bl	8003340 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3708      	adds	r7, #8
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b08c      	sub	sp, #48	; 0x30
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	2b22      	cmp	r3, #34	; 0x22
 80039bc:	f040 80ab 	bne.w	8003b16 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039c8:	d117      	bne.n	80039fa <UART_Receive_IT+0x50>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d113      	bne.n	80039fa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80039d2:	2300      	movs	r3, #0
 80039d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039da:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039e8:	b29a      	uxth	r2, r3
 80039ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f2:	1c9a      	adds	r2, r3, #2
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	629a      	str	r2, [r3, #40]	; 0x28
 80039f8:	e026      	b.n	8003a48 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003a00:	2300      	movs	r3, #0
 8003a02:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a0c:	d007      	beq.n	8003a1e <UART_Receive_IT+0x74>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d10a      	bne.n	8003a2c <UART_Receive_IT+0x82>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d106      	bne.n	8003a2c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	b2da      	uxtb	r2, r3
 8003a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a28:	701a      	strb	r2, [r3, #0]
 8003a2a:	e008      	b.n	8003a3e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a38:	b2da      	uxtb	r2, r3
 8003a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a3c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a42:	1c5a      	adds	r2, r3, #1
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	4619      	mov	r1, r3
 8003a56:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d15a      	bne.n	8003b12 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68da      	ldr	r2, [r3, #12]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f022 0220 	bic.w	r2, r2, #32
 8003a6a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68da      	ldr	r2, [r3, #12]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a7a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	695a      	ldr	r2, [r3, #20]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f022 0201 	bic.w	r2, r2, #1
 8003a8a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2220      	movs	r2, #32
 8003a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d135      	bne.n	8003b08 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	330c      	adds	r3, #12
 8003aa8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	e853 3f00 	ldrex	r3, [r3]
 8003ab0:	613b      	str	r3, [r7, #16]
   return(result);
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	f023 0310 	bic.w	r3, r3, #16
 8003ab8:	627b      	str	r3, [r7, #36]	; 0x24
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	330c      	adds	r3, #12
 8003ac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ac2:	623a      	str	r2, [r7, #32]
 8003ac4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac6:	69f9      	ldr	r1, [r7, #28]
 8003ac8:	6a3a      	ldr	r2, [r7, #32]
 8003aca:	e841 2300 	strex	r3, r2, [r1]
 8003ace:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d1e5      	bne.n	8003aa2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0310 	and.w	r3, r3, #16
 8003ae0:	2b10      	cmp	r3, #16
 8003ae2:	d10a      	bne.n	8003afa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	60fb      	str	r3, [r7, #12]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	60fb      	str	r3, [r7, #12]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	60fb      	str	r3, [r7, #12]
 8003af8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003afe:	4619      	mov	r1, r3
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f7ff fc3b 	bl	800337c <HAL_UARTEx_RxEventCallback>
 8003b06:	e002      	b.n	8003b0e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f000 fe0f 	bl	800472c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	e002      	b.n	8003b18 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003b12:	2300      	movs	r3, #0
 8003b14:	e000      	b.n	8003b18 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003b16:	2302      	movs	r3, #2
  }
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3730      	adds	r7, #48	; 0x30
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b24:	b0c0      	sub	sp, #256	; 0x100
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b3c:	68d9      	ldr	r1, [r3, #12]
 8003b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	ea40 0301 	orr.w	r3, r0, r1
 8003b48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b4e:	689a      	ldr	r2, [r3, #8]
 8003b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	431a      	orrs	r2, r3
 8003b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b64:	69db      	ldr	r3, [r3, #28]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003b78:	f021 010c 	bic.w	r1, r1, #12
 8003b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003b86:	430b      	orrs	r3, r1
 8003b88:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b9a:	6999      	ldr	r1, [r3, #24]
 8003b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	ea40 0301 	orr.w	r3, r0, r1
 8003ba6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	4b8f      	ldr	r3, [pc, #572]	; (8003dec <UART_SetConfig+0x2cc>)
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d005      	beq.n	8003bc0 <UART_SetConfig+0xa0>
 8003bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	4b8d      	ldr	r3, [pc, #564]	; (8003df0 <UART_SetConfig+0x2d0>)
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d104      	bne.n	8003bca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003bc0:	f7fe fb3e 	bl	8002240 <HAL_RCC_GetPCLK2Freq>
 8003bc4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003bc8:	e003      	b.n	8003bd2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003bca:	f7fe fb25 	bl	8002218 <HAL_RCC_GetPCLK1Freq>
 8003bce:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bd6:	69db      	ldr	r3, [r3, #28]
 8003bd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bdc:	f040 810c 	bne.w	8003df8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003be0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003be4:	2200      	movs	r2, #0
 8003be6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003bea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003bee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003bf2:	4622      	mov	r2, r4
 8003bf4:	462b      	mov	r3, r5
 8003bf6:	1891      	adds	r1, r2, r2
 8003bf8:	65b9      	str	r1, [r7, #88]	; 0x58
 8003bfa:	415b      	adcs	r3, r3
 8003bfc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bfe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003c02:	4621      	mov	r1, r4
 8003c04:	eb12 0801 	adds.w	r8, r2, r1
 8003c08:	4629      	mov	r1, r5
 8003c0a:	eb43 0901 	adc.w	r9, r3, r1
 8003c0e:	f04f 0200 	mov.w	r2, #0
 8003c12:	f04f 0300 	mov.w	r3, #0
 8003c16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c22:	4690      	mov	r8, r2
 8003c24:	4699      	mov	r9, r3
 8003c26:	4623      	mov	r3, r4
 8003c28:	eb18 0303 	adds.w	r3, r8, r3
 8003c2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003c30:	462b      	mov	r3, r5
 8003c32:	eb49 0303 	adc.w	r3, r9, r3
 8003c36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003c46:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003c4a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003c4e:	460b      	mov	r3, r1
 8003c50:	18db      	adds	r3, r3, r3
 8003c52:	653b      	str	r3, [r7, #80]	; 0x50
 8003c54:	4613      	mov	r3, r2
 8003c56:	eb42 0303 	adc.w	r3, r2, r3
 8003c5a:	657b      	str	r3, [r7, #84]	; 0x54
 8003c5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003c60:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003c64:	f7fc face 	bl	8000204 <__aeabi_uldivmod>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	460b      	mov	r3, r1
 8003c6c:	4b61      	ldr	r3, [pc, #388]	; (8003df4 <UART_SetConfig+0x2d4>)
 8003c6e:	fba3 2302 	umull	r2, r3, r3, r2
 8003c72:	095b      	lsrs	r3, r3, #5
 8003c74:	011c      	lsls	r4, r3, #4
 8003c76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c80:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003c84:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003c88:	4642      	mov	r2, r8
 8003c8a:	464b      	mov	r3, r9
 8003c8c:	1891      	adds	r1, r2, r2
 8003c8e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003c90:	415b      	adcs	r3, r3
 8003c92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c94:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003c98:	4641      	mov	r1, r8
 8003c9a:	eb12 0a01 	adds.w	sl, r2, r1
 8003c9e:	4649      	mov	r1, r9
 8003ca0:	eb43 0b01 	adc.w	fp, r3, r1
 8003ca4:	f04f 0200 	mov.w	r2, #0
 8003ca8:	f04f 0300 	mov.w	r3, #0
 8003cac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003cb0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003cb4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cb8:	4692      	mov	sl, r2
 8003cba:	469b      	mov	fp, r3
 8003cbc:	4643      	mov	r3, r8
 8003cbe:	eb1a 0303 	adds.w	r3, sl, r3
 8003cc2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003cc6:	464b      	mov	r3, r9
 8003cc8:	eb4b 0303 	adc.w	r3, fp, r3
 8003ccc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003cdc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003ce0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	18db      	adds	r3, r3, r3
 8003ce8:	643b      	str	r3, [r7, #64]	; 0x40
 8003cea:	4613      	mov	r3, r2
 8003cec:	eb42 0303 	adc.w	r3, r2, r3
 8003cf0:	647b      	str	r3, [r7, #68]	; 0x44
 8003cf2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003cf6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003cfa:	f7fc fa83 	bl	8000204 <__aeabi_uldivmod>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	460b      	mov	r3, r1
 8003d02:	4611      	mov	r1, r2
 8003d04:	4b3b      	ldr	r3, [pc, #236]	; (8003df4 <UART_SetConfig+0x2d4>)
 8003d06:	fba3 2301 	umull	r2, r3, r3, r1
 8003d0a:	095b      	lsrs	r3, r3, #5
 8003d0c:	2264      	movs	r2, #100	; 0x64
 8003d0e:	fb02 f303 	mul.w	r3, r2, r3
 8003d12:	1acb      	subs	r3, r1, r3
 8003d14:	00db      	lsls	r3, r3, #3
 8003d16:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003d1a:	4b36      	ldr	r3, [pc, #216]	; (8003df4 <UART_SetConfig+0x2d4>)
 8003d1c:	fba3 2302 	umull	r2, r3, r3, r2
 8003d20:	095b      	lsrs	r3, r3, #5
 8003d22:	005b      	lsls	r3, r3, #1
 8003d24:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d28:	441c      	add	r4, r3
 8003d2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d34:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003d38:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003d3c:	4642      	mov	r2, r8
 8003d3e:	464b      	mov	r3, r9
 8003d40:	1891      	adds	r1, r2, r2
 8003d42:	63b9      	str	r1, [r7, #56]	; 0x38
 8003d44:	415b      	adcs	r3, r3
 8003d46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003d4c:	4641      	mov	r1, r8
 8003d4e:	1851      	adds	r1, r2, r1
 8003d50:	6339      	str	r1, [r7, #48]	; 0x30
 8003d52:	4649      	mov	r1, r9
 8003d54:	414b      	adcs	r3, r1
 8003d56:	637b      	str	r3, [r7, #52]	; 0x34
 8003d58:	f04f 0200 	mov.w	r2, #0
 8003d5c:	f04f 0300 	mov.w	r3, #0
 8003d60:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003d64:	4659      	mov	r1, fp
 8003d66:	00cb      	lsls	r3, r1, #3
 8003d68:	4651      	mov	r1, sl
 8003d6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d6e:	4651      	mov	r1, sl
 8003d70:	00ca      	lsls	r2, r1, #3
 8003d72:	4610      	mov	r0, r2
 8003d74:	4619      	mov	r1, r3
 8003d76:	4603      	mov	r3, r0
 8003d78:	4642      	mov	r2, r8
 8003d7a:	189b      	adds	r3, r3, r2
 8003d7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d80:	464b      	mov	r3, r9
 8003d82:	460a      	mov	r2, r1
 8003d84:	eb42 0303 	adc.w	r3, r2, r3
 8003d88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003d98:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003d9c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003da0:	460b      	mov	r3, r1
 8003da2:	18db      	adds	r3, r3, r3
 8003da4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003da6:	4613      	mov	r3, r2
 8003da8:	eb42 0303 	adc.w	r3, r2, r3
 8003dac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003db2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003db6:	f7fc fa25 	bl	8000204 <__aeabi_uldivmod>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	460b      	mov	r3, r1
 8003dbe:	4b0d      	ldr	r3, [pc, #52]	; (8003df4 <UART_SetConfig+0x2d4>)
 8003dc0:	fba3 1302 	umull	r1, r3, r3, r2
 8003dc4:	095b      	lsrs	r3, r3, #5
 8003dc6:	2164      	movs	r1, #100	; 0x64
 8003dc8:	fb01 f303 	mul.w	r3, r1, r3
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	00db      	lsls	r3, r3, #3
 8003dd0:	3332      	adds	r3, #50	; 0x32
 8003dd2:	4a08      	ldr	r2, [pc, #32]	; (8003df4 <UART_SetConfig+0x2d4>)
 8003dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd8:	095b      	lsrs	r3, r3, #5
 8003dda:	f003 0207 	and.w	r2, r3, #7
 8003dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4422      	add	r2, r4
 8003de6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003de8:	e105      	b.n	8003ff6 <UART_SetConfig+0x4d6>
 8003dea:	bf00      	nop
 8003dec:	40011000 	.word	0x40011000
 8003df0:	40011400 	.word	0x40011400
 8003df4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003df8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003e02:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003e06:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003e0a:	4642      	mov	r2, r8
 8003e0c:	464b      	mov	r3, r9
 8003e0e:	1891      	adds	r1, r2, r2
 8003e10:	6239      	str	r1, [r7, #32]
 8003e12:	415b      	adcs	r3, r3
 8003e14:	627b      	str	r3, [r7, #36]	; 0x24
 8003e16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e1a:	4641      	mov	r1, r8
 8003e1c:	1854      	adds	r4, r2, r1
 8003e1e:	4649      	mov	r1, r9
 8003e20:	eb43 0501 	adc.w	r5, r3, r1
 8003e24:	f04f 0200 	mov.w	r2, #0
 8003e28:	f04f 0300 	mov.w	r3, #0
 8003e2c:	00eb      	lsls	r3, r5, #3
 8003e2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e32:	00e2      	lsls	r2, r4, #3
 8003e34:	4614      	mov	r4, r2
 8003e36:	461d      	mov	r5, r3
 8003e38:	4643      	mov	r3, r8
 8003e3a:	18e3      	adds	r3, r4, r3
 8003e3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003e40:	464b      	mov	r3, r9
 8003e42:	eb45 0303 	adc.w	r3, r5, r3
 8003e46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003e56:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003e5a:	f04f 0200 	mov.w	r2, #0
 8003e5e:	f04f 0300 	mov.w	r3, #0
 8003e62:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003e66:	4629      	mov	r1, r5
 8003e68:	008b      	lsls	r3, r1, #2
 8003e6a:	4621      	mov	r1, r4
 8003e6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e70:	4621      	mov	r1, r4
 8003e72:	008a      	lsls	r2, r1, #2
 8003e74:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003e78:	f7fc f9c4 	bl	8000204 <__aeabi_uldivmod>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	460b      	mov	r3, r1
 8003e80:	4b60      	ldr	r3, [pc, #384]	; (8004004 <UART_SetConfig+0x4e4>)
 8003e82:	fba3 2302 	umull	r2, r3, r3, r2
 8003e86:	095b      	lsrs	r3, r3, #5
 8003e88:	011c      	lsls	r4, r3, #4
 8003e8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003e94:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003e98:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003e9c:	4642      	mov	r2, r8
 8003e9e:	464b      	mov	r3, r9
 8003ea0:	1891      	adds	r1, r2, r2
 8003ea2:	61b9      	str	r1, [r7, #24]
 8003ea4:	415b      	adcs	r3, r3
 8003ea6:	61fb      	str	r3, [r7, #28]
 8003ea8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003eac:	4641      	mov	r1, r8
 8003eae:	1851      	adds	r1, r2, r1
 8003eb0:	6139      	str	r1, [r7, #16]
 8003eb2:	4649      	mov	r1, r9
 8003eb4:	414b      	adcs	r3, r1
 8003eb6:	617b      	str	r3, [r7, #20]
 8003eb8:	f04f 0200 	mov.w	r2, #0
 8003ebc:	f04f 0300 	mov.w	r3, #0
 8003ec0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ec4:	4659      	mov	r1, fp
 8003ec6:	00cb      	lsls	r3, r1, #3
 8003ec8:	4651      	mov	r1, sl
 8003eca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ece:	4651      	mov	r1, sl
 8003ed0:	00ca      	lsls	r2, r1, #3
 8003ed2:	4610      	mov	r0, r2
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	4642      	mov	r2, r8
 8003eda:	189b      	adds	r3, r3, r2
 8003edc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ee0:	464b      	mov	r3, r9
 8003ee2:	460a      	mov	r2, r1
 8003ee4:	eb42 0303 	adc.w	r3, r2, r3
 8003ee8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ef6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003ef8:	f04f 0200 	mov.w	r2, #0
 8003efc:	f04f 0300 	mov.w	r3, #0
 8003f00:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003f04:	4649      	mov	r1, r9
 8003f06:	008b      	lsls	r3, r1, #2
 8003f08:	4641      	mov	r1, r8
 8003f0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f0e:	4641      	mov	r1, r8
 8003f10:	008a      	lsls	r2, r1, #2
 8003f12:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003f16:	f7fc f975 	bl	8000204 <__aeabi_uldivmod>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	4b39      	ldr	r3, [pc, #228]	; (8004004 <UART_SetConfig+0x4e4>)
 8003f20:	fba3 1302 	umull	r1, r3, r3, r2
 8003f24:	095b      	lsrs	r3, r3, #5
 8003f26:	2164      	movs	r1, #100	; 0x64
 8003f28:	fb01 f303 	mul.w	r3, r1, r3
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	011b      	lsls	r3, r3, #4
 8003f30:	3332      	adds	r3, #50	; 0x32
 8003f32:	4a34      	ldr	r2, [pc, #208]	; (8004004 <UART_SetConfig+0x4e4>)
 8003f34:	fba2 2303 	umull	r2, r3, r2, r3
 8003f38:	095b      	lsrs	r3, r3, #5
 8003f3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f3e:	441c      	add	r4, r3
 8003f40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f44:	2200      	movs	r2, #0
 8003f46:	673b      	str	r3, [r7, #112]	; 0x70
 8003f48:	677a      	str	r2, [r7, #116]	; 0x74
 8003f4a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003f4e:	4642      	mov	r2, r8
 8003f50:	464b      	mov	r3, r9
 8003f52:	1891      	adds	r1, r2, r2
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	415b      	adcs	r3, r3
 8003f58:	60fb      	str	r3, [r7, #12]
 8003f5a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f5e:	4641      	mov	r1, r8
 8003f60:	1851      	adds	r1, r2, r1
 8003f62:	6039      	str	r1, [r7, #0]
 8003f64:	4649      	mov	r1, r9
 8003f66:	414b      	adcs	r3, r1
 8003f68:	607b      	str	r3, [r7, #4]
 8003f6a:	f04f 0200 	mov.w	r2, #0
 8003f6e:	f04f 0300 	mov.w	r3, #0
 8003f72:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f76:	4659      	mov	r1, fp
 8003f78:	00cb      	lsls	r3, r1, #3
 8003f7a:	4651      	mov	r1, sl
 8003f7c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f80:	4651      	mov	r1, sl
 8003f82:	00ca      	lsls	r2, r1, #3
 8003f84:	4610      	mov	r0, r2
 8003f86:	4619      	mov	r1, r3
 8003f88:	4603      	mov	r3, r0
 8003f8a:	4642      	mov	r2, r8
 8003f8c:	189b      	adds	r3, r3, r2
 8003f8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f90:	464b      	mov	r3, r9
 8003f92:	460a      	mov	r2, r1
 8003f94:	eb42 0303 	adc.w	r3, r2, r3
 8003f98:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	663b      	str	r3, [r7, #96]	; 0x60
 8003fa4:	667a      	str	r2, [r7, #100]	; 0x64
 8003fa6:	f04f 0200 	mov.w	r2, #0
 8003faa:	f04f 0300 	mov.w	r3, #0
 8003fae:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003fb2:	4649      	mov	r1, r9
 8003fb4:	008b      	lsls	r3, r1, #2
 8003fb6:	4641      	mov	r1, r8
 8003fb8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fbc:	4641      	mov	r1, r8
 8003fbe:	008a      	lsls	r2, r1, #2
 8003fc0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003fc4:	f7fc f91e 	bl	8000204 <__aeabi_uldivmod>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	460b      	mov	r3, r1
 8003fcc:	4b0d      	ldr	r3, [pc, #52]	; (8004004 <UART_SetConfig+0x4e4>)
 8003fce:	fba3 1302 	umull	r1, r3, r3, r2
 8003fd2:	095b      	lsrs	r3, r3, #5
 8003fd4:	2164      	movs	r1, #100	; 0x64
 8003fd6:	fb01 f303 	mul.w	r3, r1, r3
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	011b      	lsls	r3, r3, #4
 8003fde:	3332      	adds	r3, #50	; 0x32
 8003fe0:	4a08      	ldr	r2, [pc, #32]	; (8004004 <UART_SetConfig+0x4e4>)
 8003fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe6:	095b      	lsrs	r3, r3, #5
 8003fe8:	f003 020f 	and.w	r2, r3, #15
 8003fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4422      	add	r2, r4
 8003ff4:	609a      	str	r2, [r3, #8]
}
 8003ff6:	bf00      	nop
 8003ff8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004002:	bf00      	nop
 8004004:	51eb851f 	.word	0x51eb851f

08004008 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800400c:	f7fc fa7c 	bl	8000508 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004010:	f000 f9f6 	bl	8004400 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004014:	f000 fb1c 	bl	8004650 <MX_GPIO_Init>
  MX_DMA_Init();
 8004018:	f000 fafa 	bl	8004610 <MX_DMA_Init>
  MX_CAN1_Init();
 800401c:	f000 fa5e 	bl	80044dc <MX_CAN1_Init>
  MX_CAN2_Init();
 8004020:	f000 fa94 	bl	800454c <MX_CAN2_Init>
  MX_USART2_UART_Init();
 8004024:	f000 faca 	bl	80045bc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //CANの設定
   //can1のフィルタの設定
   sFilterConfig1.FilterBank = 0;
 8004028:	4b96      	ldr	r3, [pc, #600]	; (8004284 <main+0x27c>)
 800402a:	2200      	movs	r2, #0
 800402c:	615a      	str	r2, [r3, #20]
   sFilterConfig1.FilterMode = CAN_FILTERMODE_IDMASK;
 800402e:	4b95      	ldr	r3, [pc, #596]	; (8004284 <main+0x27c>)
 8004030:	2200      	movs	r2, #0
 8004032:	619a      	str	r2, [r3, #24]
   sFilterConfig1.FilterScale = CAN_FILTERSCALE_32BIT;
 8004034:	4b93      	ldr	r3, [pc, #588]	; (8004284 <main+0x27c>)
 8004036:	2201      	movs	r2, #1
 8004038:	61da      	str	r2, [r3, #28]
   sFilterConfig1.FilterIdHigh = 0x0000;
 800403a:	4b92      	ldr	r3, [pc, #584]	; (8004284 <main+0x27c>)
 800403c:	2200      	movs	r2, #0
 800403e:	601a      	str	r2, [r3, #0]
   sFilterConfig1.FilterIdLow = 0x0000;
 8004040:	4b90      	ldr	r3, [pc, #576]	; (8004284 <main+0x27c>)
 8004042:	2200      	movs	r2, #0
 8004044:	605a      	str	r2, [r3, #4]
   sFilterConfig1.FilterMaskIdHigh = 0x0000;
 8004046:	4b8f      	ldr	r3, [pc, #572]	; (8004284 <main+0x27c>)
 8004048:	2200      	movs	r2, #0
 800404a:	609a      	str	r2, [r3, #8]
   sFilterConfig1.FilterMaskIdLow = 0x0000;
 800404c:	4b8d      	ldr	r3, [pc, #564]	; (8004284 <main+0x27c>)
 800404e:	2200      	movs	r2, #0
 8004050:	60da      	str	r2, [r3, #12]
   sFilterConfig1.FilterFIFOAssignment = CAN_RX_FIFO0;
 8004052:	4b8c      	ldr	r3, [pc, #560]	; (8004284 <main+0x27c>)
 8004054:	2200      	movs	r2, #0
 8004056:	611a      	str	r2, [r3, #16]
   sFilterConfig1.FilterActivation=ENABLE;
 8004058:	4b8a      	ldr	r3, [pc, #552]	; (8004284 <main+0x27c>)
 800405a:	2201      	movs	r2, #1
 800405c:	621a      	str	r2, [r3, #32]
   sFilterConfig1.SlaveStartFilterBank=14;
 800405e:	4b89      	ldr	r3, [pc, #548]	; (8004284 <main+0x27c>)
 8004060:	220e      	movs	r2, #14
 8004062:	625a      	str	r2, [r3, #36]	; 0x24

   //can2フィルタ
   sFilterConfig2.FilterBank = 14;
 8004064:	4b88      	ldr	r3, [pc, #544]	; (8004288 <main+0x280>)
 8004066:	220e      	movs	r2, #14
 8004068:	615a      	str	r2, [r3, #20]
   sFilterConfig2.FilterMode = CAN_FILTERMODE_IDMASK;
 800406a:	4b87      	ldr	r3, [pc, #540]	; (8004288 <main+0x280>)
 800406c:	2200      	movs	r2, #0
 800406e:	619a      	str	r2, [r3, #24]
   sFilterConfig2.FilterScale = CAN_FILTERSCALE_32BIT;
 8004070:	4b85      	ldr	r3, [pc, #532]	; (8004288 <main+0x280>)
 8004072:	2201      	movs	r2, #1
 8004074:	61da      	str	r2, [r3, #28]
   sFilterConfig2.FilterIdHigh = 0x0000;
 8004076:	4b84      	ldr	r3, [pc, #528]	; (8004288 <main+0x280>)
 8004078:	2200      	movs	r2, #0
 800407a:	601a      	str	r2, [r3, #0]
   sFilterConfig2.FilterIdLow = 0x0000;
 800407c:	4b82      	ldr	r3, [pc, #520]	; (8004288 <main+0x280>)
 800407e:	2200      	movs	r2, #0
 8004080:	605a      	str	r2, [r3, #4]
   sFilterConfig2.FilterMaskIdHigh = 0x0000;
 8004082:	4b81      	ldr	r3, [pc, #516]	; (8004288 <main+0x280>)
 8004084:	2200      	movs	r2, #0
 8004086:	609a      	str	r2, [r3, #8]
   sFilterConfig2.FilterMaskIdLow = 0x0000;
 8004088:	4b7f      	ldr	r3, [pc, #508]	; (8004288 <main+0x280>)
 800408a:	2200      	movs	r2, #0
 800408c:	60da      	str	r2, [r3, #12]
   sFilterConfig2.FilterFIFOAssignment = CAN_RX_FIFO0;
 800408e:	4b7e      	ldr	r3, [pc, #504]	; (8004288 <main+0x280>)
 8004090:	2200      	movs	r2, #0
 8004092:	611a      	str	r2, [r3, #16]
   sFilterConfig2.FilterActivation=ENABLE;
 8004094:	4b7c      	ldr	r3, [pc, #496]	; (8004288 <main+0x280>)
 8004096:	2201      	movs	r2, #1
 8004098:	621a      	str	r2, [r3, #32]
   //sFilterConfig2.SlaveStartFilterBank=27;

   //フィルタをcan1に適用
   if(HAL_CAN_ConfigFilter(&hcan1,&sFilterConfig1) != HAL_OK)
 800409a:	497a      	ldr	r1, [pc, #488]	; (8004284 <main+0x27c>)
 800409c:	487b      	ldr	r0, [pc, #492]	; (800428c <main+0x284>)
 800409e:	f7fc fba1 	bl	80007e4 <HAL_CAN_ConfigFilter>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d001      	beq.n	80040ac <main+0xa4>
   {
     Error_Handler();
 80040a8:	f000 fb78 	bl	800479c <Error_Handler>
   }
   //フィルタをcan2に適用
   if(HAL_CAN_ConfigFilter(&hcan2,&sFilterConfig2) != HAL_OK)
 80040ac:	4976      	ldr	r1, [pc, #472]	; (8004288 <main+0x280>)
 80040ae:	4878      	ldr	r0, [pc, #480]	; (8004290 <main+0x288>)
 80040b0:	f7fc fb98 	bl	80007e4 <HAL_CAN_ConfigFilter>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d001      	beq.n	80040be <main+0xb6>
   {
     Error_Handler();
 80040ba:	f000 fb6f 	bl	800479c <Error_Handler>
   }

   //can1をスタート
   if(HAL_CAN_Start(&hcan1)!=HAL_OK)
 80040be:	4873      	ldr	r0, [pc, #460]	; (800428c <main+0x284>)
 80040c0:	f7fc fc70 	bl	80009a4 <HAL_CAN_Start>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d001      	beq.n	80040ce <main+0xc6>
   {
     Error_Handler();
 80040ca:	f000 fb67 	bl	800479c <Error_Handler>
   }
   //can2をスタート
   if(HAL_CAN_Start(&hcan2)!=HAL_OK)
 80040ce:	4870      	ldr	r0, [pc, #448]	; (8004290 <main+0x288>)
 80040d0:	f7fc fc68 	bl	80009a4 <HAL_CAN_Start>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d001      	beq.n	80040de <main+0xd6>
   {
     Error_Handler();
 80040da:	f000 fb5f 	bl	800479c <Error_Handler>
   }

   //can1の割り込みを許可
   if(HAL_CAN_ActivateNotification(&hcan1,CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 80040de:	2103      	movs	r1, #3
 80040e0:	486a      	ldr	r0, [pc, #424]	; (800428c <main+0x284>)
 80040e2:	f7fc fe90 	bl	8000e06 <HAL_CAN_ActivateNotification>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d001      	beq.n	80040f0 <main+0xe8>
   {
 	Error_Handler();
 80040ec:	f000 fb56 	bl	800479c <Error_Handler>
   }
   //can2の割り込みを許可
   if(HAL_CAN_ActivateNotification(&hcan2,CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 80040f0:	2103      	movs	r1, #3
 80040f2:	4867      	ldr	r0, [pc, #412]	; (8004290 <main+0x288>)
 80040f4:	f7fc fe87 	bl	8000e06 <HAL_CAN_ActivateNotification>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d001      	beq.n	8004102 <main+0xfa>
   {
 	Error_Handler();
 80040fe:	f000 fb4d 	bl	800479c <Error_Handler>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //受信割り込みの開始=6byte受け取ったら次の処理へ
	  get_uart_flag=0;
 8004102:	4b64      	ldr	r3, [pc, #400]	; (8004294 <main+0x28c>)
 8004104:	2200      	movs	r2, #0
 8004106:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Receive_DMA(&huart2, UART1_Data, 6);
 8004108:	2206      	movs	r2, #6
 800410a:	4963      	ldr	r1, [pc, #396]	; (8004298 <main+0x290>)
 800410c:	4863      	ldr	r0, [pc, #396]	; (800429c <main+0x294>)
 800410e:	f7fe fe58 	bl	8002dc2 <HAL_UART_Receive_DMA>
	  //受信するまで待つ
	  while(!get_uart_flag){}
 8004112:	bf00      	nop
 8004114:	4b5f      	ldr	r3, [pc, #380]	; (8004294 <main+0x28c>)
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d0fb      	beq.n	8004114 <main+0x10c>

	  //can通信の処理
	  //todo can通信を二つに対応させる=>UARTがある数より大きい=CAN2へ
	  can_id = can_id_list[UART1_Data[0]]; //uartで受け取った値の0~7bit:can_id_listのデータ
 800411c:	4b5e      	ldr	r3, [pc, #376]	; (8004298 <main+0x290>)
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	461a      	mov	r2, r3
 8004122:	4b5f      	ldr	r3, [pc, #380]	; (80042a0 <main+0x298>)
 8004124:	5c9a      	ldrb	r2, [r3, r2]
 8004126:	4b5f      	ldr	r3, [pc, #380]	; (80042a4 <main+0x29c>)
 8004128:	701a      	strb	r2, [r3, #0]
	  //can_idが0の場合は何もしない処理
	  if(can_id == 0){
 800412a:	4b5e      	ldr	r3, [pc, #376]	; (80042a4 <main+0x29c>)
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	2b00      	cmp	r3, #0
 8004130:	f000 8152 	beq.w	80043d8 <main+0x3d0>
		  continue;
	  }
	  if(can_id <= can_separator){
 8004134:	4b5b      	ldr	r3, [pc, #364]	; (80042a4 <main+0x29c>)
 8004136:	781a      	ldrb	r2, [r3, #0]
 8004138:	4b5b      	ldr	r3, [pc, #364]	; (80042a8 <main+0x2a0>)
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	429a      	cmp	r2, r3
 800413e:	d803      	bhi.n	8004148 <main+0x140>
		  can_number=0;//0;
 8004140:	4b5a      	ldr	r3, [pc, #360]	; (80042ac <main+0x2a4>)
 8004142:	2200      	movs	r2, #0
 8004144:	701a      	strb	r2, [r3, #0]
 8004146:	e002      	b.n	800414e <main+0x146>
	  }else{
		  can_number=1;//1;
 8004148:	4b58      	ldr	r3, [pc, #352]	; (80042ac <main+0x2a4>)
 800414a:	2201      	movs	r2, #1
 800414c:	701a      	strb	r2, [r3, #0]
	  }

	  cmd_data = UART1_Data[1];//uartで受け取った値の8~15bit:canのコマンド
 800414e:	4b52      	ldr	r3, [pc, #328]	; (8004298 <main+0x290>)
 8004150:	785a      	ldrb	r2, [r3, #1]
 8004152:	4b57      	ldr	r3, [pc, #348]	; (80042b0 <main+0x2a8>)
 8004154:	701a      	strb	r2, [r3, #0]
	  get_can_flag=0; //canデータ受信用のフラグを0に
 8004156:	4b57      	ldr	r3, [pc, #348]	; (80042b4 <main+0x2ac>)
 8004158:	2200      	movs	r2, #0
 800415a:	701a      	strb	r2, [r3, #0]
	  switch(cmd_data){
 800415c:	4b54      	ldr	r3, [pc, #336]	; (80042b0 <main+0x2a8>)
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	3b01      	subs	r3, #1
 8004162:	2b03      	cmp	r3, #3
 8004164:	f200 812f 	bhi.w	80043c6 <main+0x3be>
 8004168:	a201      	add	r2, pc, #4	; (adr r2, 8004170 <main+0x168>)
 800416a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800416e:	bf00      	nop
 8004170:	08004181 	.word	0x08004181
 8004174:	08004209 	.word	0x08004209
 8004178:	080042c5 	.word	0x080042c5
 800417c:	0800433f 	.word	0x0800433f

	  	  case 0x01://ポジションを送る//位置制御的な感じ
	  		  get_can_flag = 1;//canデータを受け取らないので1に
 8004180:	4b4c      	ldr	r3, [pc, #304]	; (80042b4 <main+0x2ac>)
 8004182:	2201      	movs	r2, #1
 8004184:	701a      	strb	r2, [r3, #0]
	  		  TxHeader.StdId=(can_id << 5) + (0x00C); //can_id, コントロールcmd
 8004186:	4b47      	ldr	r3, [pc, #284]	; (80042a4 <main+0x29c>)
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	015b      	lsls	r3, r3, #5
 800418c:	330c      	adds	r3, #12
 800418e:	461a      	mov	r2, r3
 8004190:	4b49      	ldr	r3, [pc, #292]	; (80042b8 <main+0x2b0>)
 8004192:	601a      	str	r2, [r3, #0]
	  		  TxHeader.RTR = 0;//CAN_RTR_DATA;
 8004194:	4b48      	ldr	r3, [pc, #288]	; (80042b8 <main+0x2b0>)
 8004196:	2200      	movs	r2, #0
 8004198:	60da      	str	r2, [r3, #12]
	  		  TxHeader.IDE = CAN_ID_STD;
 800419a:	4b47      	ldr	r3, [pc, #284]	; (80042b8 <main+0x2b0>)
 800419c:	2200      	movs	r2, #0
 800419e:	609a      	str	r2, [r3, #8]
	  		  TxHeader.DLC = 0x08;
 80041a0:	4b45      	ldr	r3, [pc, #276]	; (80042b8 <main+0x2b0>)
 80041a2:	2208      	movs	r2, #8
 80041a4:	611a      	str	r2, [r3, #16]
	  		  TxHeader.TransmitGlobalTime = DISABLE;
 80041a6:	4b44      	ldr	r3, [pc, #272]	; (80042b8 <main+0x2b0>)
 80041a8:	2200      	movs	r2, #0
 80041aa:	751a      	strb	r2, [r3, #20]
	  		  TxData[0] = UART1_Data[2];
 80041ac:	4b3a      	ldr	r3, [pc, #232]	; (8004298 <main+0x290>)
 80041ae:	789a      	ldrb	r2, [r3, #2]
 80041b0:	4b42      	ldr	r3, [pc, #264]	; (80042bc <main+0x2b4>)
 80041b2:	701a      	strb	r2, [r3, #0]
	  		  TxData[1] = UART1_Data[3];
 80041b4:	4b38      	ldr	r3, [pc, #224]	; (8004298 <main+0x290>)
 80041b6:	78da      	ldrb	r2, [r3, #3]
 80041b8:	4b40      	ldr	r3, [pc, #256]	; (80042bc <main+0x2b4>)
 80041ba:	705a      	strb	r2, [r3, #1]
	  		  TxData[2] = UART1_Data[4];
 80041bc:	4b36      	ldr	r3, [pc, #216]	; (8004298 <main+0x290>)
 80041be:	791a      	ldrb	r2, [r3, #4]
 80041c0:	4b3e      	ldr	r3, [pc, #248]	; (80042bc <main+0x2b4>)
 80041c2:	709a      	strb	r2, [r3, #2]
	  		  TxData[3] = UART1_Data[5];
 80041c4:	4b34      	ldr	r3, [pc, #208]	; (8004298 <main+0x290>)
 80041c6:	795a      	ldrb	r2, [r3, #5]
 80041c8:	4b3c      	ldr	r3, [pc, #240]	; (80042bc <main+0x2b4>)
 80041ca:	70da      	strb	r2, [r3, #3]
	  		  TxData[4] = 0;
 80041cc:	4b3b      	ldr	r3, [pc, #236]	; (80042bc <main+0x2b4>)
 80041ce:	2200      	movs	r2, #0
 80041d0:	711a      	strb	r2, [r3, #4]
	  		  TxData[5] = 0;
 80041d2:	4b3a      	ldr	r3, [pc, #232]	; (80042bc <main+0x2b4>)
 80041d4:	2200      	movs	r2, #0
 80041d6:	715a      	strb	r2, [r3, #5]
	  		  TxData[6] = 0;
 80041d8:	4b38      	ldr	r3, [pc, #224]	; (80042bc <main+0x2b4>)
 80041da:	2200      	movs	r2, #0
 80041dc:	719a      	strb	r2, [r3, #6]
	  		  TxData[7] = 0;
 80041de:	4b37      	ldr	r3, [pc, #220]	; (80042bc <main+0x2b4>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	71da      	strb	r2, [r3, #7]
	  		  if(can_number == 1){
 80041e4:	4b31      	ldr	r3, [pc, #196]	; (80042ac <main+0x2a4>)
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d106      	bne.n	80041fa <main+0x1f2>
	  			HAL_CAN_AddTxMessage(&hcan2,&TxHeader,TxData,&TxMailbox);//todo can2への対応
 80041ec:	4b34      	ldr	r3, [pc, #208]	; (80042c0 <main+0x2b8>)
 80041ee:	4a33      	ldr	r2, [pc, #204]	; (80042bc <main+0x2b4>)
 80041f0:	4931      	ldr	r1, [pc, #196]	; (80042b8 <main+0x2b0>)
 80041f2:	4827      	ldr	r0, [pc, #156]	; (8004290 <main+0x288>)
 80041f4:	f7fc fc1a 	bl	8000a2c <HAL_CAN_AddTxMessage>
	  		  }else{
	  			HAL_CAN_AddTxMessage(&hcan1,&TxHeader,TxData,&TxMailbox);//todo can2への対応
	  		  }
	  		  break;
 80041f8:	e0e8      	b.n	80043cc <main+0x3c4>
	  			HAL_CAN_AddTxMessage(&hcan1,&TxHeader,TxData,&TxMailbox);//todo can2への対応
 80041fa:	4b31      	ldr	r3, [pc, #196]	; (80042c0 <main+0x2b8>)
 80041fc:	4a2f      	ldr	r2, [pc, #188]	; (80042bc <main+0x2b4>)
 80041fe:	492e      	ldr	r1, [pc, #184]	; (80042b8 <main+0x2b0>)
 8004200:	4822      	ldr	r0, [pc, #136]	; (800428c <main+0x284>)
 8004202:	f7fc fc13 	bl	8000a2c <HAL_CAN_AddTxMessage>
	  		  break;
 8004206:	e0e1      	b.n	80043cc <main+0x3c4>

	  	  case 0x02://ポジションを受け取る
	  		  TxHeader.StdId=(can_id << 5) + (0x009); //can_id, コントロールcmd
 8004208:	4b26      	ldr	r3, [pc, #152]	; (80042a4 <main+0x29c>)
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	015b      	lsls	r3, r3, #5
 800420e:	3309      	adds	r3, #9
 8004210:	461a      	mov	r2, r3
 8004212:	4b29      	ldr	r3, [pc, #164]	; (80042b8 <main+0x2b0>)
 8004214:	601a      	str	r2, [r3, #0]
	  		  TxHeader.RTR = 2;//CAN_RTR_DATA_;
 8004216:	4b28      	ldr	r3, [pc, #160]	; (80042b8 <main+0x2b0>)
 8004218:	2202      	movs	r2, #2
 800421a:	60da      	str	r2, [r3, #12]
	  		  TxHeader.IDE = CAN_ID_STD;
 800421c:	4b26      	ldr	r3, [pc, #152]	; (80042b8 <main+0x2b0>)
 800421e:	2200      	movs	r2, #0
 8004220:	609a      	str	r2, [r3, #8]
	  		  TxHeader.DLC = 0x08;
 8004222:	4b25      	ldr	r3, [pc, #148]	; (80042b8 <main+0x2b0>)
 8004224:	2208      	movs	r2, #8
 8004226:	611a      	str	r2, [r3, #16]
	  		  TxHeader.TransmitGlobalTime = DISABLE;
 8004228:	4b23      	ldr	r3, [pc, #140]	; (80042b8 <main+0x2b0>)
 800422a:	2200      	movs	r2, #0
 800422c:	751a      	strb	r2, [r3, #20]
	  		  TxData[0] = 0;
 800422e:	4b23      	ldr	r3, [pc, #140]	; (80042bc <main+0x2b4>)
 8004230:	2200      	movs	r2, #0
 8004232:	701a      	strb	r2, [r3, #0]
	  		  TxData[1] = 0;
 8004234:	4b21      	ldr	r3, [pc, #132]	; (80042bc <main+0x2b4>)
 8004236:	2200      	movs	r2, #0
 8004238:	705a      	strb	r2, [r3, #1]
	  		  TxData[2] = 0;
 800423a:	4b20      	ldr	r3, [pc, #128]	; (80042bc <main+0x2b4>)
 800423c:	2200      	movs	r2, #0
 800423e:	709a      	strb	r2, [r3, #2]
	  		  TxData[3] = 0;
 8004240:	4b1e      	ldr	r3, [pc, #120]	; (80042bc <main+0x2b4>)
 8004242:	2200      	movs	r2, #0
 8004244:	70da      	strb	r2, [r3, #3]
	  		  TxData[4] = 0;
 8004246:	4b1d      	ldr	r3, [pc, #116]	; (80042bc <main+0x2b4>)
 8004248:	2200      	movs	r2, #0
 800424a:	711a      	strb	r2, [r3, #4]
	  		  TxData[5] = 0;
 800424c:	4b1b      	ldr	r3, [pc, #108]	; (80042bc <main+0x2b4>)
 800424e:	2200      	movs	r2, #0
 8004250:	715a      	strb	r2, [r3, #5]
	  		  TxData[6] = 0;
 8004252:	4b1a      	ldr	r3, [pc, #104]	; (80042bc <main+0x2b4>)
 8004254:	2200      	movs	r2, #0
 8004256:	719a      	strb	r2, [r3, #6]
	  		  TxData[7] = 0;
 8004258:	4b18      	ldr	r3, [pc, #96]	; (80042bc <main+0x2b4>)
 800425a:	2200      	movs	r2, #0
 800425c:	71da      	strb	r2, [r3, #7]
	  		  if(can_number == 1){
 800425e:	4b13      	ldr	r3, [pc, #76]	; (80042ac <main+0x2a4>)
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	2b01      	cmp	r3, #1
 8004264:	d106      	bne.n	8004274 <main+0x26c>
	  			HAL_CAN_AddTxMessage(&hcan2,&TxHeader,TxData,&TxMailbox);//todo can2への対応
 8004266:	4b16      	ldr	r3, [pc, #88]	; (80042c0 <main+0x2b8>)
 8004268:	4a14      	ldr	r2, [pc, #80]	; (80042bc <main+0x2b4>)
 800426a:	4913      	ldr	r1, [pc, #76]	; (80042b8 <main+0x2b0>)
 800426c:	4808      	ldr	r0, [pc, #32]	; (8004290 <main+0x288>)
 800426e:	f7fc fbdd 	bl	8000a2c <HAL_CAN_AddTxMessage>
	  		  }else{
	  			HAL_CAN_AddTxMessage(&hcan1,&TxHeader,TxData,&TxMailbox);//todo can2への対応
	  		  }
	  		  break;
 8004272:	e0ab      	b.n	80043cc <main+0x3c4>
	  			HAL_CAN_AddTxMessage(&hcan1,&TxHeader,TxData,&TxMailbox);//todo can2への対応
 8004274:	4b12      	ldr	r3, [pc, #72]	; (80042c0 <main+0x2b8>)
 8004276:	4a11      	ldr	r2, [pc, #68]	; (80042bc <main+0x2b4>)
 8004278:	490f      	ldr	r1, [pc, #60]	; (80042b8 <main+0x2b0>)
 800427a:	4804      	ldr	r0, [pc, #16]	; (800428c <main+0x284>)
 800427c:	f7fc fbd6 	bl	8000a2c <HAL_CAN_AddTxMessage>
	  		  break;
 8004280:	e0a4      	b.n	80043cc <main+0x3c4>
 8004282:	bf00      	nop
 8004284:	20000130 	.word	0x20000130
 8004288:	20000158 	.word	0x20000158
 800428c:	2000003c 	.word	0x2000003c
 8004290:	20000064 	.word	0x20000064
 8004294:	200001d2 	.word	0x200001d2
 8004298:	200001cc 	.word	0x200001cc
 800429c:	2000008c 	.word	0x2000008c
 80042a0:	20000008 	.word	0x20000008
 80042a4:	200001c9 	.word	0x200001c9
 80042a8:	20000015 	.word	0x20000015
 80042ac:	200001c8 	.word	0x200001c8
 80042b0:	200001ca 	.word	0x200001ca
 80042b4:	200001cb 	.word	0x200001cb
 80042b8:	20000180 	.word	0x20000180
 80042bc:	200001b4 	.word	0x200001b4
 80042c0:	200001c4 	.word	0x200001c4

	  	  case 0x03://電圧を受け取る
	  		  TxHeader.StdId=(can_id << 5) + (0x017); //can_id, コントロールcmd
 80042c4:	4b45      	ldr	r3, [pc, #276]	; (80043dc <main+0x3d4>)
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	015b      	lsls	r3, r3, #5
 80042ca:	3317      	adds	r3, #23
 80042cc:	461a      	mov	r2, r3
 80042ce:	4b44      	ldr	r3, [pc, #272]	; (80043e0 <main+0x3d8>)
 80042d0:	601a      	str	r2, [r3, #0]
	  		  TxHeader.RTR = 2;//CAN_RTR_DATA;
 80042d2:	4b43      	ldr	r3, [pc, #268]	; (80043e0 <main+0x3d8>)
 80042d4:	2202      	movs	r2, #2
 80042d6:	60da      	str	r2, [r3, #12]
	  		  TxHeader.IDE = CAN_ID_STD;
 80042d8:	4b41      	ldr	r3, [pc, #260]	; (80043e0 <main+0x3d8>)
 80042da:	2200      	movs	r2, #0
 80042dc:	609a      	str	r2, [r3, #8]
	  		  TxHeader.DLC = 0x08;
 80042de:	4b40      	ldr	r3, [pc, #256]	; (80043e0 <main+0x3d8>)
 80042e0:	2208      	movs	r2, #8
 80042e2:	611a      	str	r2, [r3, #16]
	  		  TxHeader.TransmitGlobalTime = DISABLE;
 80042e4:	4b3e      	ldr	r3, [pc, #248]	; (80043e0 <main+0x3d8>)
 80042e6:	2200      	movs	r2, #0
 80042e8:	751a      	strb	r2, [r3, #20]
	  		  TxData[0] = 0;
 80042ea:	4b3e      	ldr	r3, [pc, #248]	; (80043e4 <main+0x3dc>)
 80042ec:	2200      	movs	r2, #0
 80042ee:	701a      	strb	r2, [r3, #0]
	  		  TxData[1] = 0;
 80042f0:	4b3c      	ldr	r3, [pc, #240]	; (80043e4 <main+0x3dc>)
 80042f2:	2200      	movs	r2, #0
 80042f4:	705a      	strb	r2, [r3, #1]
	  		  TxData[2] = 0;
 80042f6:	4b3b      	ldr	r3, [pc, #236]	; (80043e4 <main+0x3dc>)
 80042f8:	2200      	movs	r2, #0
 80042fa:	709a      	strb	r2, [r3, #2]
	  		  TxData[3] = 0;
 80042fc:	4b39      	ldr	r3, [pc, #228]	; (80043e4 <main+0x3dc>)
 80042fe:	2200      	movs	r2, #0
 8004300:	70da      	strb	r2, [r3, #3]
	  		  TxData[4] = 0;
 8004302:	4b38      	ldr	r3, [pc, #224]	; (80043e4 <main+0x3dc>)
 8004304:	2200      	movs	r2, #0
 8004306:	711a      	strb	r2, [r3, #4]
	  		  TxData[5] = 0;
 8004308:	4b36      	ldr	r3, [pc, #216]	; (80043e4 <main+0x3dc>)
 800430a:	2200      	movs	r2, #0
 800430c:	715a      	strb	r2, [r3, #5]
	  		  TxData[6] = 0;
 800430e:	4b35      	ldr	r3, [pc, #212]	; (80043e4 <main+0x3dc>)
 8004310:	2200      	movs	r2, #0
 8004312:	719a      	strb	r2, [r3, #6]
	  		  TxData[7] = 0;
 8004314:	4b33      	ldr	r3, [pc, #204]	; (80043e4 <main+0x3dc>)
 8004316:	2200      	movs	r2, #0
 8004318:	71da      	strb	r2, [r3, #7]
	  		  if(can_number == 1){
 800431a:	4b33      	ldr	r3, [pc, #204]	; (80043e8 <main+0x3e0>)
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	2b01      	cmp	r3, #1
 8004320:	d106      	bne.n	8004330 <main+0x328>
	  			HAL_CAN_AddTxMessage(&hcan2,&TxHeader,TxData,&TxMailbox);//todo can2への対応
 8004322:	4b32      	ldr	r3, [pc, #200]	; (80043ec <main+0x3e4>)
 8004324:	4a2f      	ldr	r2, [pc, #188]	; (80043e4 <main+0x3dc>)
 8004326:	492e      	ldr	r1, [pc, #184]	; (80043e0 <main+0x3d8>)
 8004328:	4831      	ldr	r0, [pc, #196]	; (80043f0 <main+0x3e8>)
 800432a:	f7fc fb7f 	bl	8000a2c <HAL_CAN_AddTxMessage>
	  		  }else{
	  			HAL_CAN_AddTxMessage(&hcan1,&TxHeader,TxData,&TxMailbox);//todo can2への対応
	  		  }
	  		  break;
 800432e:	e04d      	b.n	80043cc <main+0x3c4>
	  			HAL_CAN_AddTxMessage(&hcan1,&TxHeader,TxData,&TxMailbox);//todo can2への対応
 8004330:	4b2e      	ldr	r3, [pc, #184]	; (80043ec <main+0x3e4>)
 8004332:	4a2c      	ldr	r2, [pc, #176]	; (80043e4 <main+0x3dc>)
 8004334:	492a      	ldr	r1, [pc, #168]	; (80043e0 <main+0x3d8>)
 8004336:	482f      	ldr	r0, [pc, #188]	; (80043f4 <main+0x3ec>)
 8004338:	f7fc fb78 	bl	8000a2c <HAL_CAN_AddTxMessage>
	  		  break;
 800433c:	e046      	b.n	80043cc <main+0x3c4>

	  	  case 0x04: //モードを変更する (0x00:IDLEモード )
	  		  get_can_flag = 1;//canデータを受け取らないので1に
 800433e:	4b2e      	ldr	r3, [pc, #184]	; (80043f8 <main+0x3f0>)
 8004340:	2201      	movs	r2, #1
 8004342:	701a      	strb	r2, [r3, #0]
	  		  TxHeader.StdId=(can_id << 5) + (0x007); //can_id, コントロールcmd
 8004344:	4b25      	ldr	r3, [pc, #148]	; (80043dc <main+0x3d4>)
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	015b      	lsls	r3, r3, #5
 800434a:	3307      	adds	r3, #7
 800434c:	461a      	mov	r2, r3
 800434e:	4b24      	ldr	r3, [pc, #144]	; (80043e0 <main+0x3d8>)
 8004350:	601a      	str	r2, [r3, #0]
	  		  TxHeader.RTR = 2;//CAN_RTR_DATA;
 8004352:	4b23      	ldr	r3, [pc, #140]	; (80043e0 <main+0x3d8>)
 8004354:	2202      	movs	r2, #2
 8004356:	60da      	str	r2, [r3, #12]
	  		  TxHeader.IDE = CAN_ID_STD;
 8004358:	4b21      	ldr	r3, [pc, #132]	; (80043e0 <main+0x3d8>)
 800435a:	2200      	movs	r2, #0
 800435c:	609a      	str	r2, [r3, #8]
	  		  TxHeader.DLC = 0x08;
 800435e:	4b20      	ldr	r3, [pc, #128]	; (80043e0 <main+0x3d8>)
 8004360:	2208      	movs	r2, #8
 8004362:	611a      	str	r2, [r3, #16]
	  		  TxHeader.TransmitGlobalTime = DISABLE;
 8004364:	4b1e      	ldr	r3, [pc, #120]	; (80043e0 <main+0x3d8>)
 8004366:	2200      	movs	r2, #0
 8004368:	751a      	strb	r2, [r3, #20]
	  		  TxData[0] = UART1_Data[2];
 800436a:	4b24      	ldr	r3, [pc, #144]	; (80043fc <main+0x3f4>)
 800436c:	789a      	ldrb	r2, [r3, #2]
 800436e:	4b1d      	ldr	r3, [pc, #116]	; (80043e4 <main+0x3dc>)
 8004370:	701a      	strb	r2, [r3, #0]
	  		  TxData[1] = UART1_Data[3];
 8004372:	4b22      	ldr	r3, [pc, #136]	; (80043fc <main+0x3f4>)
 8004374:	78da      	ldrb	r2, [r3, #3]
 8004376:	4b1b      	ldr	r3, [pc, #108]	; (80043e4 <main+0x3dc>)
 8004378:	705a      	strb	r2, [r3, #1]
	  		  TxData[2] = UART1_Data[4];
 800437a:	4b20      	ldr	r3, [pc, #128]	; (80043fc <main+0x3f4>)
 800437c:	791a      	ldrb	r2, [r3, #4]
 800437e:	4b19      	ldr	r3, [pc, #100]	; (80043e4 <main+0x3dc>)
 8004380:	709a      	strb	r2, [r3, #2]
	  		  TxData[3] = UART1_Data[5];
 8004382:	4b1e      	ldr	r3, [pc, #120]	; (80043fc <main+0x3f4>)
 8004384:	795a      	ldrb	r2, [r3, #5]
 8004386:	4b17      	ldr	r3, [pc, #92]	; (80043e4 <main+0x3dc>)
 8004388:	70da      	strb	r2, [r3, #3]
	  		  TxData[4] = 0;
 800438a:	4b16      	ldr	r3, [pc, #88]	; (80043e4 <main+0x3dc>)
 800438c:	2200      	movs	r2, #0
 800438e:	711a      	strb	r2, [r3, #4]
	  		  TxData[5] = 0;
 8004390:	4b14      	ldr	r3, [pc, #80]	; (80043e4 <main+0x3dc>)
 8004392:	2200      	movs	r2, #0
 8004394:	715a      	strb	r2, [r3, #5]
	  		  TxData[6] = 0;
 8004396:	4b13      	ldr	r3, [pc, #76]	; (80043e4 <main+0x3dc>)
 8004398:	2200      	movs	r2, #0
 800439a:	719a      	strb	r2, [r3, #6]
	  		  TxData[7] = 0;
 800439c:	4b11      	ldr	r3, [pc, #68]	; (80043e4 <main+0x3dc>)
 800439e:	2200      	movs	r2, #0
 80043a0:	71da      	strb	r2, [r3, #7]
	  		  if(can_number == 1){
 80043a2:	4b11      	ldr	r3, [pc, #68]	; (80043e8 <main+0x3e0>)
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d106      	bne.n	80043b8 <main+0x3b0>
	  			HAL_CAN_AddTxMessage(&hcan2,&TxHeader,TxData,&TxMailbox);
 80043aa:	4b10      	ldr	r3, [pc, #64]	; (80043ec <main+0x3e4>)
 80043ac:	4a0d      	ldr	r2, [pc, #52]	; (80043e4 <main+0x3dc>)
 80043ae:	490c      	ldr	r1, [pc, #48]	; (80043e0 <main+0x3d8>)
 80043b0:	480f      	ldr	r0, [pc, #60]	; (80043f0 <main+0x3e8>)
 80043b2:	f7fc fb3b 	bl	8000a2c <HAL_CAN_AddTxMessage>
	  		  }else{
	  			HAL_CAN_AddTxMessage(&hcan1,&TxHeader,TxData,&TxMailbox);
	  		  }
	  		  break;
 80043b6:	e009      	b.n	80043cc <main+0x3c4>
	  			HAL_CAN_AddTxMessage(&hcan1,&TxHeader,TxData,&TxMailbox);
 80043b8:	4b0c      	ldr	r3, [pc, #48]	; (80043ec <main+0x3e4>)
 80043ba:	4a0a      	ldr	r2, [pc, #40]	; (80043e4 <main+0x3dc>)
 80043bc:	4908      	ldr	r1, [pc, #32]	; (80043e0 <main+0x3d8>)
 80043be:	480d      	ldr	r0, [pc, #52]	; (80043f4 <main+0x3ec>)
 80043c0:	f7fc fb34 	bl	8000a2c <HAL_CAN_AddTxMessage>
	  		  break;
 80043c4:	e002      	b.n	80043cc <main+0x3c4>

	  	  default:
	  		 get_can_flag=1;
 80043c6:	4b0c      	ldr	r3, [pc, #48]	; (80043f8 <main+0x3f0>)
 80043c8:	2201      	movs	r2, #1
 80043ca:	701a      	strb	r2, [r3, #0]
	  }
	  while(!get_can_flag){}
 80043cc:	bf00      	nop
 80043ce:	4b0a      	ldr	r3, [pc, #40]	; (80043f8 <main+0x3f0>)
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d0fb      	beq.n	80043ce <main+0x3c6>
 80043d6:	e694      	b.n	8004102 <main+0xfa>
		  continue;
 80043d8:	bf00      	nop
	  get_uart_flag=0;
 80043da:	e692      	b.n	8004102 <main+0xfa>
 80043dc:	200001c9 	.word	0x200001c9
 80043e0:	20000180 	.word	0x20000180
 80043e4:	200001b4 	.word	0x200001b4
 80043e8:	200001c8 	.word	0x200001c8
 80043ec:	200001c4 	.word	0x200001c4
 80043f0:	20000064 	.word	0x20000064
 80043f4:	2000003c 	.word	0x2000003c
 80043f8:	200001cb 	.word	0x200001cb
 80043fc:	200001cc 	.word	0x200001cc

08004400 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b094      	sub	sp, #80	; 0x50
 8004404:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004406:	f107 031c 	add.w	r3, r7, #28
 800440a:	2234      	movs	r2, #52	; 0x34
 800440c:	2100      	movs	r1, #0
 800440e:	4618      	mov	r0, r3
 8004410:	f000 fc46 	bl	8004ca0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004414:	f107 0308 	add.w	r3, r7, #8
 8004418:	2200      	movs	r2, #0
 800441a:	601a      	str	r2, [r3, #0]
 800441c:	605a      	str	r2, [r3, #4]
 800441e:	609a      	str	r2, [r3, #8]
 8004420:	60da      	str	r2, [r3, #12]
 8004422:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004424:	2300      	movs	r3, #0
 8004426:	607b      	str	r3, [r7, #4]
 8004428:	4b2a      	ldr	r3, [pc, #168]	; (80044d4 <SystemClock_Config+0xd4>)
 800442a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442c:	4a29      	ldr	r2, [pc, #164]	; (80044d4 <SystemClock_Config+0xd4>)
 800442e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004432:	6413      	str	r3, [r2, #64]	; 0x40
 8004434:	4b27      	ldr	r3, [pc, #156]	; (80044d4 <SystemClock_Config+0xd4>)
 8004436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004438:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800443c:	607b      	str	r3, [r7, #4]
 800443e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8004440:	2300      	movs	r3, #0
 8004442:	603b      	str	r3, [r7, #0]
 8004444:	4b24      	ldr	r3, [pc, #144]	; (80044d8 <SystemClock_Config+0xd8>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800444c:	4a22      	ldr	r2, [pc, #136]	; (80044d8 <SystemClock_Config+0xd8>)
 800444e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004452:	6013      	str	r3, [r2, #0]
 8004454:	4b20      	ldr	r3, [pc, #128]	; (80044d8 <SystemClock_Config+0xd8>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800445c:	603b      	str	r3, [r7, #0]
 800445e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004460:	2302      	movs	r3, #2
 8004462:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004464:	2301      	movs	r3, #1
 8004466:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004468:	2310      	movs	r3, #16
 800446a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800446c:	2302      	movs	r3, #2
 800446e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004470:	2300      	movs	r3, #0
 8004472:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8004474:	2310      	movs	r3, #16
 8004476:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8004478:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800447c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800447e:	2304      	movs	r3, #4
 8004480:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8004482:	2302      	movs	r3, #2
 8004484:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004486:	2302      	movs	r3, #2
 8004488:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800448a:	f107 031c 	add.w	r3, r7, #28
 800448e:	4618      	mov	r0, r3
 8004490:	f7fe f91a 	bl	80026c8 <HAL_RCC_OscConfig>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d001      	beq.n	800449e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800449a:	f000 f97f 	bl	800479c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800449e:	230f      	movs	r3, #15
 80044a0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80044a2:	2302      	movs	r3, #2
 80044a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80044a6:	2300      	movs	r3, #0
 80044a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80044aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80044b0:	2300      	movs	r3, #0
 80044b2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80044b4:	f107 0308 	add.w	r3, r7, #8
 80044b8:	2102      	movs	r1, #2
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7fd fdba 	bl	8002034 <HAL_RCC_ClockConfig>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d001      	beq.n	80044ca <SystemClock_Config+0xca>
  {
    Error_Handler();
 80044c6:	f000 f969 	bl	800479c <Error_Handler>
  }
}
 80044ca:	bf00      	nop
 80044cc:	3750      	adds	r7, #80	; 0x50
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	40023800 	.word	0x40023800
 80044d8:	40007000 	.word	0x40007000

080044dc <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80044e0:	4b18      	ldr	r3, [pc, #96]	; (8004544 <MX_CAN1_Init+0x68>)
 80044e2:	4a19      	ldr	r2, [pc, #100]	; (8004548 <MX_CAN1_Init+0x6c>)
 80044e4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 8;
 80044e6:	4b17      	ldr	r3, [pc, #92]	; (8004544 <MX_CAN1_Init+0x68>)
 80044e8:	2208      	movs	r2, #8
 80044ea:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80044ec:	4b15      	ldr	r3, [pc, #84]	; (8004544 <MX_CAN1_Init+0x68>)
 80044ee:	2200      	movs	r2, #0
 80044f0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_4TQ;
 80044f2:	4b14      	ldr	r3, [pc, #80]	; (8004544 <MX_CAN1_Init+0x68>)
 80044f4:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 80044f8:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_16TQ;
 80044fa:	4b12      	ldr	r3, [pc, #72]	; (8004544 <MX_CAN1_Init+0x68>)
 80044fc:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 8004500:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8004502:	4b10      	ldr	r3, [pc, #64]	; (8004544 <MX_CAN1_Init+0x68>)
 8004504:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8004508:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800450a:	4b0e      	ldr	r3, [pc, #56]	; (8004544 <MX_CAN1_Init+0x68>)
 800450c:	2200      	movs	r2, #0
 800450e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8004510:	4b0c      	ldr	r3, [pc, #48]	; (8004544 <MX_CAN1_Init+0x68>)
 8004512:	2200      	movs	r2, #0
 8004514:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8004516:	4b0b      	ldr	r3, [pc, #44]	; (8004544 <MX_CAN1_Init+0x68>)
 8004518:	2200      	movs	r2, #0
 800451a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800451c:	4b09      	ldr	r3, [pc, #36]	; (8004544 <MX_CAN1_Init+0x68>)
 800451e:	2200      	movs	r2, #0
 8004520:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8004522:	4b08      	ldr	r3, [pc, #32]	; (8004544 <MX_CAN1_Init+0x68>)
 8004524:	2200      	movs	r2, #0
 8004526:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8004528:	4b06      	ldr	r3, [pc, #24]	; (8004544 <MX_CAN1_Init+0x68>)
 800452a:	2200      	movs	r2, #0
 800452c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800452e:	4805      	ldr	r0, [pc, #20]	; (8004544 <MX_CAN1_Init+0x68>)
 8004530:	f7fc f85c 	bl	80005ec <HAL_CAN_Init>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d001      	beq.n	800453e <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800453a:	f000 f92f 	bl	800479c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800453e:	bf00      	nop
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	2000003c 	.word	0x2000003c
 8004548:	40006400 	.word	0x40006400

0800454c <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8004550:	4b18      	ldr	r3, [pc, #96]	; (80045b4 <MX_CAN2_Init+0x68>)
 8004552:	4a19      	ldr	r2, [pc, #100]	; (80045b8 <MX_CAN2_Init+0x6c>)
 8004554:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 8;
 8004556:	4b17      	ldr	r3, [pc, #92]	; (80045b4 <MX_CAN2_Init+0x68>)
 8004558:	2208      	movs	r2, #8
 800455a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 800455c:	4b15      	ldr	r3, [pc, #84]	; (80045b4 <MX_CAN2_Init+0x68>)
 800455e:	2200      	movs	r2, #0
 8004560:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_4TQ;
 8004562:	4b14      	ldr	r3, [pc, #80]	; (80045b4 <MX_CAN2_Init+0x68>)
 8004564:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 8004568:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_16TQ;
 800456a:	4b12      	ldr	r3, [pc, #72]	; (80045b4 <MX_CAN2_Init+0x68>)
 800456c:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 8004570:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 8004572:	4b10      	ldr	r3, [pc, #64]	; (80045b4 <MX_CAN2_Init+0x68>)
 8004574:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8004578:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 800457a:	4b0e      	ldr	r3, [pc, #56]	; (80045b4 <MX_CAN2_Init+0x68>)
 800457c:	2200      	movs	r2, #0
 800457e:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8004580:	4b0c      	ldr	r3, [pc, #48]	; (80045b4 <MX_CAN2_Init+0x68>)
 8004582:	2200      	movs	r2, #0
 8004584:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8004586:	4b0b      	ldr	r3, [pc, #44]	; (80045b4 <MX_CAN2_Init+0x68>)
 8004588:	2200      	movs	r2, #0
 800458a:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800458c:	4b09      	ldr	r3, [pc, #36]	; (80045b4 <MX_CAN2_Init+0x68>)
 800458e:	2200      	movs	r2, #0
 8004590:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8004592:	4b08      	ldr	r3, [pc, #32]	; (80045b4 <MX_CAN2_Init+0x68>)
 8004594:	2200      	movs	r2, #0
 8004596:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8004598:	4b06      	ldr	r3, [pc, #24]	; (80045b4 <MX_CAN2_Init+0x68>)
 800459a:	2200      	movs	r2, #0
 800459c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800459e:	4805      	ldr	r0, [pc, #20]	; (80045b4 <MX_CAN2_Init+0x68>)
 80045a0:	f7fc f824 	bl	80005ec <HAL_CAN_Init>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d001      	beq.n	80045ae <MX_CAN2_Init+0x62>
  {
    Error_Handler();
 80045aa:	f000 f8f7 	bl	800479c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80045ae:	bf00      	nop
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	20000064 	.word	0x20000064
 80045b8:	40006800 	.word	0x40006800

080045bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80045c0:	4b11      	ldr	r3, [pc, #68]	; (8004608 <MX_USART2_UART_Init+0x4c>)
 80045c2:	4a12      	ldr	r2, [pc, #72]	; (800460c <MX_USART2_UART_Init+0x50>)
 80045c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80045c6:	4b10      	ldr	r3, [pc, #64]	; (8004608 <MX_USART2_UART_Init+0x4c>)
 80045c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80045cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80045ce:	4b0e      	ldr	r3, [pc, #56]	; (8004608 <MX_USART2_UART_Init+0x4c>)
 80045d0:	2200      	movs	r2, #0
 80045d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80045d4:	4b0c      	ldr	r3, [pc, #48]	; (8004608 <MX_USART2_UART_Init+0x4c>)
 80045d6:	2200      	movs	r2, #0
 80045d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80045da:	4b0b      	ldr	r3, [pc, #44]	; (8004608 <MX_USART2_UART_Init+0x4c>)
 80045dc:	2200      	movs	r2, #0
 80045de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80045e0:	4b09      	ldr	r3, [pc, #36]	; (8004608 <MX_USART2_UART_Init+0x4c>)
 80045e2:	220c      	movs	r2, #12
 80045e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80045e6:	4b08      	ldr	r3, [pc, #32]	; (8004608 <MX_USART2_UART_Init+0x4c>)
 80045e8:	2200      	movs	r2, #0
 80045ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80045ec:	4b06      	ldr	r3, [pc, #24]	; (8004608 <MX_USART2_UART_Init+0x4c>)
 80045ee:	2200      	movs	r2, #0
 80045f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80045f2:	4805      	ldr	r0, [pc, #20]	; (8004608 <MX_USART2_UART_Init+0x4c>)
 80045f4:	f7fe fb06 	bl	8002c04 <HAL_UART_Init>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d001      	beq.n	8004602 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80045fe:	f000 f8cd 	bl	800479c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004602:	bf00      	nop
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	2000008c 	.word	0x2000008c
 800460c:	40004400 	.word	0x40004400

08004610 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004616:	2300      	movs	r3, #0
 8004618:	607b      	str	r3, [r7, #4]
 800461a:	4b0c      	ldr	r3, [pc, #48]	; (800464c <MX_DMA_Init+0x3c>)
 800461c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461e:	4a0b      	ldr	r2, [pc, #44]	; (800464c <MX_DMA_Init+0x3c>)
 8004620:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004624:	6313      	str	r3, [r2, #48]	; 0x30
 8004626:	4b09      	ldr	r3, [pc, #36]	; (800464c <MX_DMA_Init+0x3c>)
 8004628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800462e:	607b      	str	r3, [r7, #4]
 8004630:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8004632:	2200      	movs	r2, #0
 8004634:	2100      	movs	r1, #0
 8004636:	2010      	movs	r0, #16
 8004638:	f7fc ff15 	bl	8001466 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800463c:	2010      	movs	r0, #16
 800463e:	f7fc ff2e 	bl	800149e <HAL_NVIC_EnableIRQ>

}
 8004642:	bf00      	nop
 8004644:	3708      	adds	r7, #8
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	40023800 	.word	0x40023800

08004650 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b08a      	sub	sp, #40	; 0x28
 8004654:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004656:	f107 0314 	add.w	r3, r7, #20
 800465a:	2200      	movs	r2, #0
 800465c:	601a      	str	r2, [r3, #0]
 800465e:	605a      	str	r2, [r3, #4]
 8004660:	609a      	str	r2, [r3, #8]
 8004662:	60da      	str	r2, [r3, #12]
 8004664:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004666:	2300      	movs	r3, #0
 8004668:	613b      	str	r3, [r7, #16]
 800466a:	4b2d      	ldr	r3, [pc, #180]	; (8004720 <MX_GPIO_Init+0xd0>)
 800466c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466e:	4a2c      	ldr	r2, [pc, #176]	; (8004720 <MX_GPIO_Init+0xd0>)
 8004670:	f043 0304 	orr.w	r3, r3, #4
 8004674:	6313      	str	r3, [r2, #48]	; 0x30
 8004676:	4b2a      	ldr	r3, [pc, #168]	; (8004720 <MX_GPIO_Init+0xd0>)
 8004678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800467a:	f003 0304 	and.w	r3, r3, #4
 800467e:	613b      	str	r3, [r7, #16]
 8004680:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004682:	2300      	movs	r3, #0
 8004684:	60fb      	str	r3, [r7, #12]
 8004686:	4b26      	ldr	r3, [pc, #152]	; (8004720 <MX_GPIO_Init+0xd0>)
 8004688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468a:	4a25      	ldr	r2, [pc, #148]	; (8004720 <MX_GPIO_Init+0xd0>)
 800468c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004690:	6313      	str	r3, [r2, #48]	; 0x30
 8004692:	4b23      	ldr	r3, [pc, #140]	; (8004720 <MX_GPIO_Init+0xd0>)
 8004694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800469a:	60fb      	str	r3, [r7, #12]
 800469c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800469e:	2300      	movs	r3, #0
 80046a0:	60bb      	str	r3, [r7, #8]
 80046a2:	4b1f      	ldr	r3, [pc, #124]	; (8004720 <MX_GPIO_Init+0xd0>)
 80046a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a6:	4a1e      	ldr	r2, [pc, #120]	; (8004720 <MX_GPIO_Init+0xd0>)
 80046a8:	f043 0301 	orr.w	r3, r3, #1
 80046ac:	6313      	str	r3, [r2, #48]	; 0x30
 80046ae:	4b1c      	ldr	r3, [pc, #112]	; (8004720 <MX_GPIO_Init+0xd0>)
 80046b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b2:	f003 0301 	and.w	r3, r3, #1
 80046b6:	60bb      	str	r3, [r7, #8]
 80046b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80046ba:	2300      	movs	r3, #0
 80046bc:	607b      	str	r3, [r7, #4]
 80046be:	4b18      	ldr	r3, [pc, #96]	; (8004720 <MX_GPIO_Init+0xd0>)
 80046c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c2:	4a17      	ldr	r2, [pc, #92]	; (8004720 <MX_GPIO_Init+0xd0>)
 80046c4:	f043 0302 	orr.w	r3, r3, #2
 80046c8:	6313      	str	r3, [r2, #48]	; 0x30
 80046ca:	4b15      	ldr	r3, [pc, #84]	; (8004720 <MX_GPIO_Init+0xd0>)
 80046cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ce:	f003 0302 	and.w	r3, r3, #2
 80046d2:	607b      	str	r3, [r7, #4]
 80046d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80046d6:	2200      	movs	r2, #0
 80046d8:	2120      	movs	r1, #32
 80046da:	4812      	ldr	r0, [pc, #72]	; (8004724 <MX_GPIO_Init+0xd4>)
 80046dc:	f7fd fc90 	bl	8002000 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80046e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80046e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80046e6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80046ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ec:	2300      	movs	r3, #0
 80046ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80046f0:	f107 0314 	add.w	r3, r7, #20
 80046f4:	4619      	mov	r1, r3
 80046f6:	480c      	ldr	r0, [pc, #48]	; (8004728 <MX_GPIO_Init+0xd8>)
 80046f8:	f7fd faee 	bl	8001cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80046fc:	2320      	movs	r3, #32
 80046fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004700:	2301      	movs	r3, #1
 8004702:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004704:	2300      	movs	r3, #0
 8004706:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004708:	2300      	movs	r3, #0
 800470a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800470c:	f107 0314 	add.w	r3, r7, #20
 8004710:	4619      	mov	r1, r3
 8004712:	4804      	ldr	r0, [pc, #16]	; (8004724 <MX_GPIO_Init+0xd4>)
 8004714:	f7fd fae0 	bl	8001cd8 <HAL_GPIO_Init>

}
 8004718:	bf00      	nop
 800471a:	3728      	adds	r7, #40	; 0x28
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}
 8004720:	40023800 	.word	0x40023800
 8004724:	40020000 	.word	0x40020000
 8004728:	40020800 	.word	0x40020800

0800472c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef*UartHandle)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2,UART1_Data,6,1000);
 8004734:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004738:	2206      	movs	r2, #6
 800473a:	4905      	ldr	r1, [pc, #20]	; (8004750 <HAL_UART_RxCpltCallback+0x24>)
 800473c:	4805      	ldr	r0, [pc, #20]	; (8004754 <HAL_UART_RxCpltCallback+0x28>)
 800473e:	f7fe faae 	bl	8002c9e <HAL_UART_Transmit>
	get_uart_flag=1;
 8004742:	4b05      	ldr	r3, [pc, #20]	; (8004758 <HAL_UART_RxCpltCallback+0x2c>)
 8004744:	2201      	movs	r2, #1
 8004746:	701a      	strb	r2, [r3, #0]
}
 8004748:	bf00      	nop
 800474a:	3708      	adds	r7, #8
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}
 8004750:	200001cc 	.word	0x200001cc
 8004754:	2000008c 	.word	0x2000008c
 8004758:	200001d2 	.word	0x200001d2

0800475c <HAL_CAN_RxFifo0MsgPendingCallback>:
	  //HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,1);
}

//CAN通信の受信割り込み
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan_)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan_,CAN_RX_FIFO0,&RxHeader,RxData);
 8004764:	4b09      	ldr	r3, [pc, #36]	; (800478c <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8004766:	4a0a      	ldr	r2, [pc, #40]	; (8004790 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8004768:	2100      	movs	r1, #0
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f7fc fa39 	bl	8000be2 <HAL_CAN_GetRxMessage>
	HAL_UART_Transmit(&huart2,RxData,sizeof(RxData),1000);//受け取ったデータを送信
 8004770:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004774:	2208      	movs	r2, #8
 8004776:	4905      	ldr	r1, [pc, #20]	; (800478c <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8004778:	4806      	ldr	r0, [pc, #24]	; (8004794 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 800477a:	f7fe fa90 	bl	8002c9e <HAL_UART_Transmit>
	//HAL_UART_Transmit(&huart2,&RxHeader,4);
	get_can_flag=1;
 800477e:	4b06      	ldr	r3, [pc, #24]	; (8004798 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8004780:	2201      	movs	r2, #1
 8004782:	701a      	strb	r2, [r3, #0]
}
 8004784:	bf00      	nop
 8004786:	3708      	adds	r7, #8
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	200001bc 	.word	0x200001bc
 8004790:	20000198 	.word	0x20000198
 8004794:	2000008c 	.word	0x2000008c
 8004798:	200001cb 	.word	0x200001cb

0800479c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800479c:	b480      	push	{r7}
 800479e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80047a0:	b672      	cpsid	i
}
 80047a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	 __disable_irq();
		  while (1)
 80047a4:	e7fe      	b.n	80047a4 <Error_Handler+0x8>
	...

080047a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047ae:	2300      	movs	r3, #0
 80047b0:	607b      	str	r3, [r7, #4]
 80047b2:	4b10      	ldr	r3, [pc, #64]	; (80047f4 <HAL_MspInit+0x4c>)
 80047b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047b6:	4a0f      	ldr	r2, [pc, #60]	; (80047f4 <HAL_MspInit+0x4c>)
 80047b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047bc:	6453      	str	r3, [r2, #68]	; 0x44
 80047be:	4b0d      	ldr	r3, [pc, #52]	; (80047f4 <HAL_MspInit+0x4c>)
 80047c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047c6:	607b      	str	r3, [r7, #4]
 80047c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80047ca:	2300      	movs	r3, #0
 80047cc:	603b      	str	r3, [r7, #0]
 80047ce:	4b09      	ldr	r3, [pc, #36]	; (80047f4 <HAL_MspInit+0x4c>)
 80047d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d2:	4a08      	ldr	r2, [pc, #32]	; (80047f4 <HAL_MspInit+0x4c>)
 80047d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047d8:	6413      	str	r3, [r2, #64]	; 0x40
 80047da:	4b06      	ldr	r3, [pc, #24]	; (80047f4 <HAL_MspInit+0x4c>)
 80047dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047e2:	603b      	str	r3, [r7, #0]
 80047e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80047e6:	2007      	movs	r0, #7
 80047e8:	f7fc fe32 	bl	8001450 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80047ec:	bf00      	nop
 80047ee:	3708      	adds	r7, #8
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	40023800 	.word	0x40023800

080047f8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b08c      	sub	sp, #48	; 0x30
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004800:	f107 031c 	add.w	r3, r7, #28
 8004804:	2200      	movs	r2, #0
 8004806:	601a      	str	r2, [r3, #0]
 8004808:	605a      	str	r2, [r3, #4]
 800480a:	609a      	str	r2, [r3, #8]
 800480c:	60da      	str	r2, [r3, #12]
 800480e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a64      	ldr	r2, [pc, #400]	; (80049a8 <HAL_CAN_MspInit+0x1b0>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d157      	bne.n	80048ca <HAL_CAN_MspInit+0xd2>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800481a:	4b64      	ldr	r3, [pc, #400]	; (80049ac <HAL_CAN_MspInit+0x1b4>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	3301      	adds	r3, #1
 8004820:	4a62      	ldr	r2, [pc, #392]	; (80049ac <HAL_CAN_MspInit+0x1b4>)
 8004822:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8004824:	4b61      	ldr	r3, [pc, #388]	; (80049ac <HAL_CAN_MspInit+0x1b4>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2b01      	cmp	r3, #1
 800482a:	d10d      	bne.n	8004848 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800482c:	2300      	movs	r3, #0
 800482e:	61bb      	str	r3, [r7, #24]
 8004830:	4b5f      	ldr	r3, [pc, #380]	; (80049b0 <HAL_CAN_MspInit+0x1b8>)
 8004832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004834:	4a5e      	ldr	r2, [pc, #376]	; (80049b0 <HAL_CAN_MspInit+0x1b8>)
 8004836:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800483a:	6413      	str	r3, [r2, #64]	; 0x40
 800483c:	4b5c      	ldr	r3, [pc, #368]	; (80049b0 <HAL_CAN_MspInit+0x1b8>)
 800483e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004840:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004844:	61bb      	str	r3, [r7, #24]
 8004846:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004848:	2300      	movs	r3, #0
 800484a:	617b      	str	r3, [r7, #20]
 800484c:	4b58      	ldr	r3, [pc, #352]	; (80049b0 <HAL_CAN_MspInit+0x1b8>)
 800484e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004850:	4a57      	ldr	r2, [pc, #348]	; (80049b0 <HAL_CAN_MspInit+0x1b8>)
 8004852:	f043 0301 	orr.w	r3, r3, #1
 8004856:	6313      	str	r3, [r2, #48]	; 0x30
 8004858:	4b55      	ldr	r3, [pc, #340]	; (80049b0 <HAL_CAN_MspInit+0x1b8>)
 800485a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800485c:	f003 0301 	and.w	r3, r3, #1
 8004860:	617b      	str	r3, [r7, #20]
 8004862:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004864:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004868:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800486a:	2302      	movs	r3, #2
 800486c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800486e:	2300      	movs	r3, #0
 8004870:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004872:	2303      	movs	r3, #3
 8004874:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8004876:	2309      	movs	r3, #9
 8004878:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800487a:	f107 031c 	add.w	r3, r7, #28
 800487e:	4619      	mov	r1, r3
 8004880:	484c      	ldr	r0, [pc, #304]	; (80049b4 <HAL_CAN_MspInit+0x1bc>)
 8004882:	f7fd fa29 	bl	8001cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004886:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800488a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800488c:	2302      	movs	r3, #2
 800488e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004890:	2301      	movs	r3, #1
 8004892:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004894:	2303      	movs	r3, #3
 8004896:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8004898:	2309      	movs	r3, #9
 800489a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800489c:	f107 031c 	add.w	r3, r7, #28
 80048a0:	4619      	mov	r1, r3
 80048a2:	4844      	ldr	r0, [pc, #272]	; (80049b4 <HAL_CAN_MspInit+0x1bc>)
 80048a4:	f7fd fa18 	bl	8001cd8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 80048a8:	2200      	movs	r2, #0
 80048aa:	2100      	movs	r1, #0
 80048ac:	2013      	movs	r0, #19
 80048ae:	f7fc fdda 	bl	8001466 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80048b2:	2013      	movs	r0, #19
 80048b4:	f7fc fdf3 	bl	800149e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80048b8:	2200      	movs	r2, #0
 80048ba:	2100      	movs	r1, #0
 80048bc:	2014      	movs	r0, #20
 80048be:	f7fc fdd2 	bl	8001466 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80048c2:	2014      	movs	r0, #20
 80048c4:	f7fc fdeb 	bl	800149e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 80048c8:	e069      	b.n	800499e <HAL_CAN_MspInit+0x1a6>
  else if(hcan->Instance==CAN2)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a3a      	ldr	r2, [pc, #232]	; (80049b8 <HAL_CAN_MspInit+0x1c0>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d164      	bne.n	800499e <HAL_CAN_MspInit+0x1a6>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80048d4:	2300      	movs	r3, #0
 80048d6:	613b      	str	r3, [r7, #16]
 80048d8:	4b35      	ldr	r3, [pc, #212]	; (80049b0 <HAL_CAN_MspInit+0x1b8>)
 80048da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048dc:	4a34      	ldr	r2, [pc, #208]	; (80049b0 <HAL_CAN_MspInit+0x1b8>)
 80048de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80048e2:	6413      	str	r3, [r2, #64]	; 0x40
 80048e4:	4b32      	ldr	r3, [pc, #200]	; (80049b0 <HAL_CAN_MspInit+0x1b8>)
 80048e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80048ec:	613b      	str	r3, [r7, #16]
 80048ee:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80048f0:	4b2e      	ldr	r3, [pc, #184]	; (80049ac <HAL_CAN_MspInit+0x1b4>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	3301      	adds	r3, #1
 80048f6:	4a2d      	ldr	r2, [pc, #180]	; (80049ac <HAL_CAN_MspInit+0x1b4>)
 80048f8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80048fa:	4b2c      	ldr	r3, [pc, #176]	; (80049ac <HAL_CAN_MspInit+0x1b4>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d10d      	bne.n	800491e <HAL_CAN_MspInit+0x126>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8004902:	2300      	movs	r3, #0
 8004904:	60fb      	str	r3, [r7, #12]
 8004906:	4b2a      	ldr	r3, [pc, #168]	; (80049b0 <HAL_CAN_MspInit+0x1b8>)
 8004908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490a:	4a29      	ldr	r2, [pc, #164]	; (80049b0 <HAL_CAN_MspInit+0x1b8>)
 800490c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004910:	6413      	str	r3, [r2, #64]	; 0x40
 8004912:	4b27      	ldr	r3, [pc, #156]	; (80049b0 <HAL_CAN_MspInit+0x1b8>)
 8004914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800491a:	60fb      	str	r3, [r7, #12]
 800491c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800491e:	2300      	movs	r3, #0
 8004920:	60bb      	str	r3, [r7, #8]
 8004922:	4b23      	ldr	r3, [pc, #140]	; (80049b0 <HAL_CAN_MspInit+0x1b8>)
 8004924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004926:	4a22      	ldr	r2, [pc, #136]	; (80049b0 <HAL_CAN_MspInit+0x1b8>)
 8004928:	f043 0302 	orr.w	r3, r3, #2
 800492c:	6313      	str	r3, [r2, #48]	; 0x30
 800492e:	4b20      	ldr	r3, [pc, #128]	; (80049b0 <HAL_CAN_MspInit+0x1b8>)
 8004930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004932:	f003 0302 	and.w	r3, r3, #2
 8004936:	60bb      	str	r3, [r7, #8]
 8004938:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800493a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800493e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004940:	2302      	movs	r3, #2
 8004942:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004944:	2300      	movs	r3, #0
 8004946:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004948:	2303      	movs	r3, #3
 800494a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800494c:	2309      	movs	r3, #9
 800494e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004950:	f107 031c 	add.w	r3, r7, #28
 8004954:	4619      	mov	r1, r3
 8004956:	4819      	ldr	r0, [pc, #100]	; (80049bc <HAL_CAN_MspInit+0x1c4>)
 8004958:	f7fd f9be 	bl	8001cd8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800495c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004960:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004962:	2302      	movs	r3, #2
 8004964:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004966:	2301      	movs	r3, #1
 8004968:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800496a:	2303      	movs	r3, #3
 800496c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800496e:	2309      	movs	r3, #9
 8004970:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004972:	f107 031c 	add.w	r3, r7, #28
 8004976:	4619      	mov	r1, r3
 8004978:	4810      	ldr	r0, [pc, #64]	; (80049bc <HAL_CAN_MspInit+0x1c4>)
 800497a:	f7fd f9ad 	bl	8001cd8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 800497e:	2200      	movs	r2, #0
 8004980:	2100      	movs	r1, #0
 8004982:	203f      	movs	r0, #63	; 0x3f
 8004984:	f7fc fd6f 	bl	8001466 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 8004988:	203f      	movs	r0, #63	; 0x3f
 800498a:	f7fc fd88 	bl	800149e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 800498e:	2200      	movs	r2, #0
 8004990:	2100      	movs	r1, #0
 8004992:	2040      	movs	r0, #64	; 0x40
 8004994:	f7fc fd67 	bl	8001466 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8004998:	2040      	movs	r0, #64	; 0x40
 800499a:	f7fc fd80 	bl	800149e <HAL_NVIC_EnableIRQ>
}
 800499e:	bf00      	nop
 80049a0:	3730      	adds	r7, #48	; 0x30
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	40006400 	.word	0x40006400
 80049ac:	200001d4 	.word	0x200001d4
 80049b0:	40023800 	.word	0x40023800
 80049b4:	40020000 	.word	0x40020000
 80049b8:	40006800 	.word	0x40006800
 80049bc:	40020400 	.word	0x40020400

080049c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b08a      	sub	sp, #40	; 0x28
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049c8:	f107 0314 	add.w	r3, r7, #20
 80049cc:	2200      	movs	r2, #0
 80049ce:	601a      	str	r2, [r3, #0]
 80049d0:	605a      	str	r2, [r3, #4]
 80049d2:	609a      	str	r2, [r3, #8]
 80049d4:	60da      	str	r2, [r3, #12]
 80049d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a34      	ldr	r2, [pc, #208]	; (8004ab0 <HAL_UART_MspInit+0xf0>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d162      	bne.n	8004aa8 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80049e2:	2300      	movs	r3, #0
 80049e4:	613b      	str	r3, [r7, #16]
 80049e6:	4b33      	ldr	r3, [pc, #204]	; (8004ab4 <HAL_UART_MspInit+0xf4>)
 80049e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ea:	4a32      	ldr	r2, [pc, #200]	; (8004ab4 <HAL_UART_MspInit+0xf4>)
 80049ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049f0:	6413      	str	r3, [r2, #64]	; 0x40
 80049f2:	4b30      	ldr	r3, [pc, #192]	; (8004ab4 <HAL_UART_MspInit+0xf4>)
 80049f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049fa:	613b      	str	r3, [r7, #16]
 80049fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049fe:	2300      	movs	r3, #0
 8004a00:	60fb      	str	r3, [r7, #12]
 8004a02:	4b2c      	ldr	r3, [pc, #176]	; (8004ab4 <HAL_UART_MspInit+0xf4>)
 8004a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a06:	4a2b      	ldr	r2, [pc, #172]	; (8004ab4 <HAL_UART_MspInit+0xf4>)
 8004a08:	f043 0301 	orr.w	r3, r3, #1
 8004a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8004a0e:	4b29      	ldr	r3, [pc, #164]	; (8004ab4 <HAL_UART_MspInit+0xf4>)
 8004a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a12:	f003 0301 	and.w	r3, r3, #1
 8004a16:	60fb      	str	r3, [r7, #12]
 8004a18:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004a1a:	230c      	movs	r3, #12
 8004a1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a1e:	2302      	movs	r3, #2
 8004a20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a22:	2300      	movs	r3, #0
 8004a24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a26:	2303      	movs	r3, #3
 8004a28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004a2a:	2307      	movs	r3, #7
 8004a2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a2e:	f107 0314 	add.w	r3, r7, #20
 8004a32:	4619      	mov	r1, r3
 8004a34:	4820      	ldr	r0, [pc, #128]	; (8004ab8 <HAL_UART_MspInit+0xf8>)
 8004a36:	f7fd f94f 	bl	8001cd8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8004a3a:	4b20      	ldr	r3, [pc, #128]	; (8004abc <HAL_UART_MspInit+0xfc>)
 8004a3c:	4a20      	ldr	r2, [pc, #128]	; (8004ac0 <HAL_UART_MspInit+0x100>)
 8004a3e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8004a40:	4b1e      	ldr	r3, [pc, #120]	; (8004abc <HAL_UART_MspInit+0xfc>)
 8004a42:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004a46:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004a48:	4b1c      	ldr	r3, [pc, #112]	; (8004abc <HAL_UART_MspInit+0xfc>)
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a4e:	4b1b      	ldr	r3, [pc, #108]	; (8004abc <HAL_UART_MspInit+0xfc>)
 8004a50:	2200      	movs	r2, #0
 8004a52:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004a54:	4b19      	ldr	r3, [pc, #100]	; (8004abc <HAL_UART_MspInit+0xfc>)
 8004a56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a5a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004a5c:	4b17      	ldr	r3, [pc, #92]	; (8004abc <HAL_UART_MspInit+0xfc>)
 8004a5e:	2200      	movs	r2, #0
 8004a60:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004a62:	4b16      	ldr	r3, [pc, #88]	; (8004abc <HAL_UART_MspInit+0xfc>)
 8004a64:	2200      	movs	r2, #0
 8004a66:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004a68:	4b14      	ldr	r3, [pc, #80]	; (8004abc <HAL_UART_MspInit+0xfc>)
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004a6e:	4b13      	ldr	r3, [pc, #76]	; (8004abc <HAL_UART_MspInit+0xfc>)
 8004a70:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004a74:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004a76:	4b11      	ldr	r3, [pc, #68]	; (8004abc <HAL_UART_MspInit+0xfc>)
 8004a78:	2200      	movs	r2, #0
 8004a7a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004a7c:	480f      	ldr	r0, [pc, #60]	; (8004abc <HAL_UART_MspInit+0xfc>)
 8004a7e:	f7fc fd29 	bl	80014d4 <HAL_DMA_Init>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d001      	beq.n	8004a8c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8004a88:	f7ff fe88 	bl	800479c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4a0b      	ldr	r2, [pc, #44]	; (8004abc <HAL_UART_MspInit+0xfc>)
 8004a90:	639a      	str	r2, [r3, #56]	; 0x38
 8004a92:	4a0a      	ldr	r2, [pc, #40]	; (8004abc <HAL_UART_MspInit+0xfc>)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004a98:	2200      	movs	r2, #0
 8004a9a:	2100      	movs	r1, #0
 8004a9c:	2026      	movs	r0, #38	; 0x26
 8004a9e:	f7fc fce2 	bl	8001466 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004aa2:	2026      	movs	r0, #38	; 0x26
 8004aa4:	f7fc fcfb 	bl	800149e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004aa8:	bf00      	nop
 8004aaa:	3728      	adds	r7, #40	; 0x28
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	40004400 	.word	0x40004400
 8004ab4:	40023800 	.word	0x40023800
 8004ab8:	40020000 	.word	0x40020000
 8004abc:	200000d0 	.word	0x200000d0
 8004ac0:	40026088 	.word	0x40026088

08004ac4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004ac8:	bf00      	nop
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr

08004ad2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004ad2:	b480      	push	{r7}
 8004ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004ad6:	e7fe      	b.n	8004ad6 <HardFault_Handler+0x4>

08004ad8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004adc:	e7fe      	b.n	8004adc <MemManage_Handler+0x4>

08004ade <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004ade:	b480      	push	{r7}
 8004ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004ae2:	e7fe      	b.n	8004ae2 <BusFault_Handler+0x4>

08004ae4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004ae8:	e7fe      	b.n	8004ae8 <UsageFault_Handler+0x4>

08004aea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004aea:	b480      	push	{r7}
 8004aec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004aee:	bf00      	nop
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004af8:	b480      	push	{r7}
 8004afa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004afc:	bf00      	nop
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr

08004b06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004b06:	b480      	push	{r7}
 8004b08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004b0a:	bf00      	nop
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004b18:	f7fb fd48 	bl	80005ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004b1c:	bf00      	nop
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004b24:	4802      	ldr	r0, [pc, #8]	; (8004b30 <DMA1_Stream5_IRQHandler+0x10>)
 8004b26:	f7fc fe6d 	bl	8001804 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004b2a:	bf00      	nop
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	200000d0 	.word	0x200000d0

08004b34 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004b38:	4802      	ldr	r0, [pc, #8]	; (8004b44 <CAN1_TX_IRQHandler+0x10>)
 8004b3a:	f7fc f98a 	bl	8000e52 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8004b3e:	bf00      	nop
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop
 8004b44:	2000003c 	.word	0x2000003c

08004b48 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004b4c:	4802      	ldr	r0, [pc, #8]	; (8004b58 <CAN1_RX0_IRQHandler+0x10>)
 8004b4e:	f7fc f980 	bl	8000e52 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8004b52:	bf00      	nop
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	2000003c 	.word	0x2000003c

08004b5c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004b60:	4802      	ldr	r0, [pc, #8]	; (8004b6c <USART2_IRQHandler+0x10>)
 8004b62:	f7fe f95f 	bl	8002e24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004b66:	bf00      	nop
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	2000008c 	.word	0x2000008c

08004b70 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupt.
  */
void CAN2_TX_IRQHandler(void)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8004b74:	4802      	ldr	r0, [pc, #8]	; (8004b80 <CAN2_TX_IRQHandler+0x10>)
 8004b76:	f7fc f96c 	bl	8000e52 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 8004b7a:	bf00      	nop
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	20000064 	.word	0x20000064

08004b84 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupt.
  */
void CAN2_RX0_IRQHandler(void)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8004b88:	4802      	ldr	r0, [pc, #8]	; (8004b94 <CAN2_RX0_IRQHandler+0x10>)
 8004b8a:	f7fc f962 	bl	8000e52 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8004b8e:	bf00      	nop
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	20000064 	.word	0x20000064

08004b98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004b9c:	4b16      	ldr	r3, [pc, #88]	; (8004bf8 <SystemInit+0x60>)
 8004b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ba2:	4a15      	ldr	r2, [pc, #84]	; (8004bf8 <SystemInit+0x60>)
 8004ba4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ba8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004bac:	4b13      	ldr	r3, [pc, #76]	; (8004bfc <SystemInit+0x64>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a12      	ldr	r2, [pc, #72]	; (8004bfc <SystemInit+0x64>)
 8004bb2:	f043 0301 	orr.w	r3, r3, #1
 8004bb6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004bb8:	4b10      	ldr	r3, [pc, #64]	; (8004bfc <SystemInit+0x64>)
 8004bba:	2200      	movs	r2, #0
 8004bbc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004bbe:	4b0f      	ldr	r3, [pc, #60]	; (8004bfc <SystemInit+0x64>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a0e      	ldr	r2, [pc, #56]	; (8004bfc <SystemInit+0x64>)
 8004bc4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004bc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bcc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004bce:	4b0b      	ldr	r3, [pc, #44]	; (8004bfc <SystemInit+0x64>)
 8004bd0:	4a0b      	ldr	r2, [pc, #44]	; (8004c00 <SystemInit+0x68>)
 8004bd2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004bd4:	4b09      	ldr	r3, [pc, #36]	; (8004bfc <SystemInit+0x64>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a08      	ldr	r2, [pc, #32]	; (8004bfc <SystemInit+0x64>)
 8004bda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bde:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004be0:	4b06      	ldr	r3, [pc, #24]	; (8004bfc <SystemInit+0x64>)
 8004be2:	2200      	movs	r2, #0
 8004be4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004be6:	4b04      	ldr	r3, [pc, #16]	; (8004bf8 <SystemInit+0x60>)
 8004be8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004bec:	609a      	str	r2, [r3, #8]
#endif
}
 8004bee:	bf00      	nop
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr
 8004bf8:	e000ed00 	.word	0xe000ed00
 8004bfc:	40023800 	.word	0x40023800
 8004c00:	24003010 	.word	0x24003010

08004c04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004c04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004c3c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004c08:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004c0a:	e003      	b.n	8004c14 <LoopCopyDataInit>

08004c0c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004c0c:	4b0c      	ldr	r3, [pc, #48]	; (8004c40 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004c0e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004c10:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004c12:	3104      	adds	r1, #4

08004c14 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004c14:	480b      	ldr	r0, [pc, #44]	; (8004c44 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004c16:	4b0c      	ldr	r3, [pc, #48]	; (8004c48 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004c18:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004c1a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004c1c:	d3f6      	bcc.n	8004c0c <CopyDataInit>
  ldr  r2, =_sbss
 8004c1e:	4a0b      	ldr	r2, [pc, #44]	; (8004c4c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004c20:	e002      	b.n	8004c28 <LoopFillZerobss>

08004c22 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004c22:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004c24:	f842 3b04 	str.w	r3, [r2], #4

08004c28 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004c28:	4b09      	ldr	r3, [pc, #36]	; (8004c50 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004c2a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004c2c:	d3f9      	bcc.n	8004c22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004c2e:	f7ff ffb3 	bl	8004b98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004c32:	f000 f811 	bl	8004c58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004c36:	f7ff f9e7 	bl	8004008 <main>
  bx  lr    
 8004c3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004c3c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004c40:	08004cf8 	.word	0x08004cf8
  ldr  r0, =_sdata
 8004c44:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004c48:	2000001c 	.word	0x2000001c
  ldr  r2, =_sbss
 8004c4c:	2000001c 	.word	0x2000001c
  ldr  r3, = _ebss
 8004c50:	200001d8 	.word	0x200001d8

08004c54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004c54:	e7fe      	b.n	8004c54 <ADC_IRQHandler>
	...

08004c58 <__libc_init_array>:
 8004c58:	b570      	push	{r4, r5, r6, lr}
 8004c5a:	4d0d      	ldr	r5, [pc, #52]	; (8004c90 <__libc_init_array+0x38>)
 8004c5c:	4c0d      	ldr	r4, [pc, #52]	; (8004c94 <__libc_init_array+0x3c>)
 8004c5e:	1b64      	subs	r4, r4, r5
 8004c60:	10a4      	asrs	r4, r4, #2
 8004c62:	2600      	movs	r6, #0
 8004c64:	42a6      	cmp	r6, r4
 8004c66:	d109      	bne.n	8004c7c <__libc_init_array+0x24>
 8004c68:	4d0b      	ldr	r5, [pc, #44]	; (8004c98 <__libc_init_array+0x40>)
 8004c6a:	4c0c      	ldr	r4, [pc, #48]	; (8004c9c <__libc_init_array+0x44>)
 8004c6c:	f000 f820 	bl	8004cb0 <_init>
 8004c70:	1b64      	subs	r4, r4, r5
 8004c72:	10a4      	asrs	r4, r4, #2
 8004c74:	2600      	movs	r6, #0
 8004c76:	42a6      	cmp	r6, r4
 8004c78:	d105      	bne.n	8004c86 <__libc_init_array+0x2e>
 8004c7a:	bd70      	pop	{r4, r5, r6, pc}
 8004c7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c80:	4798      	blx	r3
 8004c82:	3601      	adds	r6, #1
 8004c84:	e7ee      	b.n	8004c64 <__libc_init_array+0xc>
 8004c86:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c8a:	4798      	blx	r3
 8004c8c:	3601      	adds	r6, #1
 8004c8e:	e7f2      	b.n	8004c76 <__libc_init_array+0x1e>
 8004c90:	08004cf0 	.word	0x08004cf0
 8004c94:	08004cf0 	.word	0x08004cf0
 8004c98:	08004cf0 	.word	0x08004cf0
 8004c9c:	08004cf4 	.word	0x08004cf4

08004ca0 <memset>:
 8004ca0:	4402      	add	r2, r0
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d100      	bne.n	8004caa <memset+0xa>
 8004ca8:	4770      	bx	lr
 8004caa:	f803 1b01 	strb.w	r1, [r3], #1
 8004cae:	e7f9      	b.n	8004ca4 <memset+0x4>

08004cb0 <_init>:
 8004cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cb2:	bf00      	nop
 8004cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cb6:	bc08      	pop	{r3}
 8004cb8:	469e      	mov	lr, r3
 8004cba:	4770      	bx	lr

08004cbc <_fini>:
 8004cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cbe:	bf00      	nop
 8004cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cc2:	bc08      	pop	{r3}
 8004cc4:	469e      	mov	lr, r3
 8004cc6:	4770      	bx	lr
