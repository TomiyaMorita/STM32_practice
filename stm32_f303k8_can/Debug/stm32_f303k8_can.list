
stm32_f303k8_can.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f94  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800411c  0800411c  0001411c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004154  08004154  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08004154  08004154  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004154  08004154  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004154  08004154  00014154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004158  08004158  00014158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  0800415c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  2000001c  08004178  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  08004178  0002019c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c1dd  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a8b  00000000  00000000  0002c229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000888  00000000  00000000  0002dcb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007f0  00000000  00000000  0002e540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a033  00000000  00000000  0002ed30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ad34  00000000  00000000  00048d63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099642  00000000  00000000  00053a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ed0d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000223c  00000000  00000000  000ed12c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000001c 	.word	0x2000001c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004104 	.word	0x08004104

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000020 	.word	0x20000020
 80001c4:	08004104 	.word	0x08004104

080001c8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001cc:	4b08      	ldr	r3, [pc, #32]	; (80001f0 <HAL_Init+0x28>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	4a07      	ldr	r2, [pc, #28]	; (80001f0 <HAL_Init+0x28>)
 80001d2:	f043 0310 	orr.w	r3, r3, #16
 80001d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001d8:	2003      	movs	r0, #3
 80001da:	f000 fe9b 	bl	8000f14 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80001de:	2000      	movs	r0, #0
 80001e0:	f000 f808 	bl	80001f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80001e4:	f003 fd98 	bl	8003d18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80001e8:	2300      	movs	r3, #0
}
 80001ea:	4618      	mov	r0, r3
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	40022000 	.word	0x40022000

080001f4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b082      	sub	sp, #8
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001fc:	4b12      	ldr	r3, [pc, #72]	; (8000248 <HAL_InitTick+0x54>)
 80001fe:	681a      	ldr	r2, [r3, #0]
 8000200:	4b12      	ldr	r3, [pc, #72]	; (800024c <HAL_InitTick+0x58>)
 8000202:	781b      	ldrb	r3, [r3, #0]
 8000204:	4619      	mov	r1, r3
 8000206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800020a:	fbb3 f3f1 	udiv	r3, r3, r1
 800020e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000212:	4618      	mov	r0, r3
 8000214:	f000 feb3 	bl	8000f7e <HAL_SYSTICK_Config>
 8000218:	4603      	mov	r3, r0
 800021a:	2b00      	cmp	r3, #0
 800021c:	d001      	beq.n	8000222 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800021e:	2301      	movs	r3, #1
 8000220:	e00e      	b.n	8000240 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	2b0f      	cmp	r3, #15
 8000226:	d80a      	bhi.n	800023e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000228:	2200      	movs	r2, #0
 800022a:	6879      	ldr	r1, [r7, #4]
 800022c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000230:	f000 fe7b 	bl	8000f2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000234:	4a06      	ldr	r2, [pc, #24]	; (8000250 <HAL_InitTick+0x5c>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800023a:	2300      	movs	r3, #0
 800023c:	e000      	b.n	8000240 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800023e:	2301      	movs	r3, #1
}
 8000240:	4618      	mov	r0, r3
 8000242:	3708      	adds	r7, #8
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}
 8000248:	20000018 	.word	0x20000018
 800024c:	20000004 	.word	0x20000004
 8000250:	20000000 	.word	0x20000000

08000254 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000254:	b480      	push	{r7}
 8000256:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000258:	4b06      	ldr	r3, [pc, #24]	; (8000274 <HAL_IncTick+0x20>)
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	461a      	mov	r2, r3
 800025e:	4b06      	ldr	r3, [pc, #24]	; (8000278 <HAL_IncTick+0x24>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	4413      	add	r3, r2
 8000264:	4a04      	ldr	r2, [pc, #16]	; (8000278 <HAL_IncTick+0x24>)
 8000266:	6013      	str	r3, [r2, #0]
}
 8000268:	bf00      	nop
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	20000004 	.word	0x20000004
 8000278:	20000038 	.word	0x20000038

0800027c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000280:	4b03      	ldr	r3, [pc, #12]	; (8000290 <HAL_GetTick+0x14>)
 8000282:	681b      	ldr	r3, [r3, #0]
}
 8000284:	4618      	mov	r0, r3
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	20000038 	.word	0x20000038

08000294 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b084      	sub	sp, #16
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d101      	bne.n	80002a6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80002a2:	2301      	movs	r3, #1
 80002a4:	e0ed      	b.n	8000482 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80002ac:	b2db      	uxtb	r3, r3
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d102      	bne.n	80002b8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80002b2:	6878      	ldr	r0, [r7, #4]
 80002b4:	f003 fd54 	bl	8003d60 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	681a      	ldr	r2, [r3, #0]
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	f042 0201 	orr.w	r2, r2, #1
 80002c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80002c8:	f7ff ffd8 	bl	800027c <HAL_GetTick>
 80002cc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80002ce:	e012      	b.n	80002f6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80002d0:	f7ff ffd4 	bl	800027c <HAL_GetTick>
 80002d4:	4602      	mov	r2, r0
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	1ad3      	subs	r3, r2, r3
 80002da:	2b0a      	cmp	r3, #10
 80002dc:	d90b      	bls.n	80002f6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002e2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	2205      	movs	r2, #5
 80002ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80002f2:	2301      	movs	r3, #1
 80002f4:	e0c5      	b.n	8000482 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	685b      	ldr	r3, [r3, #4]
 80002fc:	f003 0301 	and.w	r3, r3, #1
 8000300:	2b00      	cmp	r3, #0
 8000302:	d0e5      	beq.n	80002d0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	681a      	ldr	r2, [r3, #0]
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	f022 0202 	bic.w	r2, r2, #2
 8000312:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000314:	f7ff ffb2 	bl	800027c <HAL_GetTick>
 8000318:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800031a:	e012      	b.n	8000342 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800031c:	f7ff ffae 	bl	800027c <HAL_GetTick>
 8000320:	4602      	mov	r2, r0
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	1ad3      	subs	r3, r2, r3
 8000326:	2b0a      	cmp	r3, #10
 8000328:	d90b      	bls.n	8000342 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800032e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	2205      	movs	r2, #5
 800033a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800033e:	2301      	movs	r3, #1
 8000340:	e09f      	b.n	8000482 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	685b      	ldr	r3, [r3, #4]
 8000348:	f003 0302 	and.w	r3, r3, #2
 800034c:	2b00      	cmp	r3, #0
 800034e:	d1e5      	bne.n	800031c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	7e1b      	ldrb	r3, [r3, #24]
 8000354:	2b01      	cmp	r3, #1
 8000356:	d108      	bne.n	800036a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	681a      	ldr	r2, [r3, #0]
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000366:	601a      	str	r2, [r3, #0]
 8000368:	e007      	b.n	800037a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	681a      	ldr	r2, [r3, #0]
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000378:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	7e5b      	ldrb	r3, [r3, #25]
 800037e:	2b01      	cmp	r3, #1
 8000380:	d108      	bne.n	8000394 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	681a      	ldr	r2, [r3, #0]
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000390:	601a      	str	r2, [r3, #0]
 8000392:	e007      	b.n	80003a4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	681a      	ldr	r2, [r3, #0]
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80003a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	7e9b      	ldrb	r3, [r3, #26]
 80003a8:	2b01      	cmp	r3, #1
 80003aa:	d108      	bne.n	80003be <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	f042 0220 	orr.w	r2, r2, #32
 80003ba:	601a      	str	r2, [r3, #0]
 80003bc:	e007      	b.n	80003ce <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	681a      	ldr	r2, [r3, #0]
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	f022 0220 	bic.w	r2, r2, #32
 80003cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	7edb      	ldrb	r3, [r3, #27]
 80003d2:	2b01      	cmp	r3, #1
 80003d4:	d108      	bne.n	80003e8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	681a      	ldr	r2, [r3, #0]
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	f022 0210 	bic.w	r2, r2, #16
 80003e4:	601a      	str	r2, [r3, #0]
 80003e6:	e007      	b.n	80003f8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	681a      	ldr	r2, [r3, #0]
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	f042 0210 	orr.w	r2, r2, #16
 80003f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	7f1b      	ldrb	r3, [r3, #28]
 80003fc:	2b01      	cmp	r3, #1
 80003fe:	d108      	bne.n	8000412 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	681a      	ldr	r2, [r3, #0]
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	f042 0208 	orr.w	r2, r2, #8
 800040e:	601a      	str	r2, [r3, #0]
 8000410:	e007      	b.n	8000422 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	681a      	ldr	r2, [r3, #0]
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	f022 0208 	bic.w	r2, r2, #8
 8000420:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	7f5b      	ldrb	r3, [r3, #29]
 8000426:	2b01      	cmp	r3, #1
 8000428:	d108      	bne.n	800043c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	681a      	ldr	r2, [r3, #0]
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	f042 0204 	orr.w	r2, r2, #4
 8000438:	601a      	str	r2, [r3, #0]
 800043a:	e007      	b.n	800044c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	681a      	ldr	r2, [r3, #0]
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	f022 0204 	bic.w	r2, r2, #4
 800044a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	689a      	ldr	r2, [r3, #8]
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	68db      	ldr	r3, [r3, #12]
 8000454:	431a      	orrs	r2, r3
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	691b      	ldr	r3, [r3, #16]
 800045a:	431a      	orrs	r2, r3
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	695b      	ldr	r3, [r3, #20]
 8000460:	ea42 0103 	orr.w	r1, r2, r3
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	685b      	ldr	r3, [r3, #4]
 8000468:	1e5a      	subs	r2, r3, #1
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	430a      	orrs	r2, r1
 8000470:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	2200      	movs	r2, #0
 8000476:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	2201      	movs	r2, #1
 800047c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000480:	2300      	movs	r3, #0
}
 8000482:	4618      	mov	r0, r3
 8000484:	3710      	adds	r7, #16
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}

0800048a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800048a:	b480      	push	{r7}
 800048c:	b087      	sub	sp, #28
 800048e:	af00      	add	r7, sp, #0
 8000490:	6078      	str	r0, [r7, #4]
 8000492:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80004a0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80004a2:	7cfb      	ldrb	r3, [r7, #19]
 80004a4:	2b01      	cmp	r3, #1
 80004a6:	d003      	beq.n	80004b0 <HAL_CAN_ConfigFilter+0x26>
 80004a8:	7cfb      	ldrb	r3, [r7, #19]
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	f040 80aa 	bne.w	8000604 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80004b0:	697b      	ldr	r3, [r7, #20]
 80004b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80004b6:	f043 0201 	orr.w	r2, r3, #1
 80004ba:	697b      	ldr	r3, [r7, #20]
 80004bc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80004c0:	683b      	ldr	r3, [r7, #0]
 80004c2:	695b      	ldr	r3, [r3, #20]
 80004c4:	f003 031f 	and.w	r3, r3, #31
 80004c8:	2201      	movs	r2, #1
 80004ca:	fa02 f303 	lsl.w	r3, r2, r3
 80004ce:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80004d0:	697b      	ldr	r3, [r7, #20]
 80004d2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	43db      	mvns	r3, r3
 80004da:	401a      	ands	r2, r3
 80004dc:	697b      	ldr	r3, [r7, #20]
 80004de:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80004e2:	683b      	ldr	r3, [r7, #0]
 80004e4:	69db      	ldr	r3, [r3, #28]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d123      	bne.n	8000532 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80004ea:	697b      	ldr	r3, [r7, #20]
 80004ec:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	43db      	mvns	r3, r3
 80004f4:	401a      	ands	r2, r3
 80004f6:	697b      	ldr	r3, [r7, #20]
 80004f8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80004fc:	683b      	ldr	r3, [r7, #0]
 80004fe:	68db      	ldr	r3, [r3, #12]
 8000500:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	685b      	ldr	r3, [r3, #4]
 8000506:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000508:	683a      	ldr	r2, [r7, #0]
 800050a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800050c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800050e:	697b      	ldr	r3, [r7, #20]
 8000510:	3248      	adds	r2, #72	; 0x48
 8000512:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	689b      	ldr	r3, [r3, #8]
 800051a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000526:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000528:	6979      	ldr	r1, [r7, #20]
 800052a:	3348      	adds	r3, #72	; 0x48
 800052c:	00db      	lsls	r3, r3, #3
 800052e:	440b      	add	r3, r1
 8000530:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	69db      	ldr	r3, [r3, #28]
 8000536:	2b01      	cmp	r3, #1
 8000538:	d122      	bne.n	8000580 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800053a:	697b      	ldr	r3, [r7, #20]
 800053c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	431a      	orrs	r2, r3
 8000544:	697b      	ldr	r3, [r7, #20]
 8000546:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	685b      	ldr	r3, [r3, #4]
 8000554:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000556:	683a      	ldr	r2, [r7, #0]
 8000558:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800055a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800055c:	697b      	ldr	r3, [r7, #20]
 800055e:	3248      	adds	r2, #72	; 0x48
 8000560:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000564:	683b      	ldr	r3, [r7, #0]
 8000566:	689b      	ldr	r3, [r3, #8]
 8000568:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800056a:	683b      	ldr	r3, [r7, #0]
 800056c:	68db      	ldr	r3, [r3, #12]
 800056e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000574:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000576:	6979      	ldr	r1, [r7, #20]
 8000578:	3348      	adds	r3, #72	; 0x48
 800057a:	00db      	lsls	r3, r3, #3
 800057c:	440b      	add	r3, r1
 800057e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	699b      	ldr	r3, [r3, #24]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d109      	bne.n	800059c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000588:	697b      	ldr	r3, [r7, #20]
 800058a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	43db      	mvns	r3, r3
 8000592:	401a      	ands	r2, r3
 8000594:	697b      	ldr	r3, [r7, #20]
 8000596:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800059a:	e007      	b.n	80005ac <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800059c:	697b      	ldr	r3, [r7, #20]
 800059e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	431a      	orrs	r2, r3
 80005a6:	697b      	ldr	r3, [r7, #20]
 80005a8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	691b      	ldr	r3, [r3, #16]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d109      	bne.n	80005c8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80005b4:	697b      	ldr	r3, [r7, #20]
 80005b6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	43db      	mvns	r3, r3
 80005be:	401a      	ands	r2, r3
 80005c0:	697b      	ldr	r3, [r7, #20]
 80005c2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80005c6:	e007      	b.n	80005d8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80005c8:	697b      	ldr	r3, [r7, #20]
 80005ca:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	431a      	orrs	r2, r3
 80005d2:	697b      	ldr	r3, [r7, #20]
 80005d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	6a1b      	ldr	r3, [r3, #32]
 80005dc:	2b01      	cmp	r3, #1
 80005de:	d107      	bne.n	80005f0 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80005e0:	697b      	ldr	r3, [r7, #20]
 80005e2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	431a      	orrs	r2, r3
 80005ea:	697b      	ldr	r3, [r7, #20]
 80005ec:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80005f0:	697b      	ldr	r3, [r7, #20]
 80005f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80005f6:	f023 0201 	bic.w	r2, r3, #1
 80005fa:	697b      	ldr	r3, [r7, #20]
 80005fc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000600:	2300      	movs	r3, #0
 8000602:	e006      	b.n	8000612 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000608:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000610:	2301      	movs	r3, #1
  }
}
 8000612:	4618      	mov	r0, r3
 8000614:	371c      	adds	r7, #28
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr

0800061e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800061e:	b580      	push	{r7, lr}
 8000620:	b084      	sub	sp, #16
 8000622:	af00      	add	r7, sp, #0
 8000624:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	f893 3020 	ldrb.w	r3, [r3, #32]
 800062c:	b2db      	uxtb	r3, r3
 800062e:	2b01      	cmp	r3, #1
 8000630:	d12e      	bne.n	8000690 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	2202      	movs	r2, #2
 8000636:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	681a      	ldr	r2, [r3, #0]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f022 0201 	bic.w	r2, r2, #1
 8000648:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800064a:	f7ff fe17 	bl	800027c <HAL_GetTick>
 800064e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000650:	e012      	b.n	8000678 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000652:	f7ff fe13 	bl	800027c <HAL_GetTick>
 8000656:	4602      	mov	r2, r0
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	1ad3      	subs	r3, r2, r3
 800065c:	2b0a      	cmp	r3, #10
 800065e:	d90b      	bls.n	8000678 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000664:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	2205      	movs	r2, #5
 8000670:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000674:	2301      	movs	r3, #1
 8000676:	e012      	b.n	800069e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	685b      	ldr	r3, [r3, #4]
 800067e:	f003 0301 	and.w	r3, r3, #1
 8000682:	2b00      	cmp	r3, #0
 8000684:	d1e5      	bne.n	8000652 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	2200      	movs	r2, #0
 800068a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800068c:	2300      	movs	r3, #0
 800068e:	e006      	b.n	800069e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000694:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800069c:	2301      	movs	r3, #1
  }
}
 800069e:	4618      	mov	r0, r3
 80006a0:	3710      	adds	r7, #16
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80006a6:	b480      	push	{r7}
 80006a8:	b087      	sub	sp, #28
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	60f8      	str	r0, [r7, #12]
 80006ae:	60b9      	str	r1, [r7, #8]
 80006b0:	607a      	str	r2, [r7, #4]
 80006b2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80006ba:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80006bc:	7dfb      	ldrb	r3, [r7, #23]
 80006be:	2b01      	cmp	r3, #1
 80006c0:	d003      	beq.n	80006ca <HAL_CAN_GetRxMessage+0x24>
 80006c2:	7dfb      	ldrb	r3, [r7, #23]
 80006c4:	2b02      	cmp	r3, #2
 80006c6:	f040 80f3 	bne.w	80008b0 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80006ca:	68bb      	ldr	r3, [r7, #8]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d10e      	bne.n	80006ee <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	68db      	ldr	r3, [r3, #12]
 80006d6:	f003 0303 	and.w	r3, r3, #3
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d116      	bne.n	800070c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006e2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80006ea:	2301      	movs	r3, #1
 80006ec:	e0e7      	b.n	80008be <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	691b      	ldr	r3, [r3, #16]
 80006f4:	f003 0303 	and.w	r3, r3, #3
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d107      	bne.n	800070c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000700:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000708:	2301      	movs	r3, #1
 800070a:	e0d8      	b.n	80008be <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	681a      	ldr	r2, [r3, #0]
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	331b      	adds	r3, #27
 8000714:	011b      	lsls	r3, r3, #4
 8000716:	4413      	add	r3, r2
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f003 0204 	and.w	r2, r3, #4
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	689b      	ldr	r3, [r3, #8]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d10c      	bne.n	8000744 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	681a      	ldr	r2, [r3, #0]
 800072e:	68bb      	ldr	r3, [r7, #8]
 8000730:	331b      	adds	r3, #27
 8000732:	011b      	lsls	r3, r3, #4
 8000734:	4413      	add	r3, r2
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	0d5b      	lsrs	r3, r3, #21
 800073a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	e00b      	b.n	800075c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	681a      	ldr	r2, [r3, #0]
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	331b      	adds	r3, #27
 800074c:	011b      	lsls	r3, r3, #4
 800074e:	4413      	add	r3, r2
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	08db      	lsrs	r3, r3, #3
 8000754:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	681a      	ldr	r2, [r3, #0]
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	331b      	adds	r3, #27
 8000764:	011b      	lsls	r3, r3, #4
 8000766:	4413      	add	r3, r2
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	f003 0202 	and.w	r2, r3, #2
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	681a      	ldr	r2, [r3, #0]
 8000776:	68bb      	ldr	r3, [r7, #8]
 8000778:	331b      	adds	r3, #27
 800077a:	011b      	lsls	r3, r3, #4
 800077c:	4413      	add	r3, r2
 800077e:	3304      	adds	r3, #4
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	f003 020f 	and.w	r2, r3, #15
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	681a      	ldr	r2, [r3, #0]
 800078e:	68bb      	ldr	r3, [r7, #8]
 8000790:	331b      	adds	r3, #27
 8000792:	011b      	lsls	r3, r3, #4
 8000794:	4413      	add	r3, r2
 8000796:	3304      	adds	r3, #4
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	0a1b      	lsrs	r3, r3, #8
 800079c:	b2da      	uxtb	r2, r3
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	681a      	ldr	r2, [r3, #0]
 80007a6:	68bb      	ldr	r3, [r7, #8]
 80007a8:	331b      	adds	r3, #27
 80007aa:	011b      	lsls	r3, r3, #4
 80007ac:	4413      	add	r3, r2
 80007ae:	3304      	adds	r3, #4
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	0c1b      	lsrs	r3, r3, #16
 80007b4:	b29a      	uxth	r2, r3
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	681a      	ldr	r2, [r3, #0]
 80007be:	68bb      	ldr	r3, [r7, #8]
 80007c0:	011b      	lsls	r3, r3, #4
 80007c2:	4413      	add	r3, r2
 80007c4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	b2da      	uxtb	r2, r3
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	681a      	ldr	r2, [r3, #0]
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	011b      	lsls	r3, r3, #4
 80007d8:	4413      	add	r3, r2
 80007da:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	0a1a      	lsrs	r2, r3, #8
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	3301      	adds	r3, #1
 80007e6:	b2d2      	uxtb	r2, r2
 80007e8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	681a      	ldr	r2, [r3, #0]
 80007ee:	68bb      	ldr	r3, [r7, #8]
 80007f0:	011b      	lsls	r3, r3, #4
 80007f2:	4413      	add	r3, r2
 80007f4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	0c1a      	lsrs	r2, r3, #16
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	3302      	adds	r3, #2
 8000800:	b2d2      	uxtb	r2, r2
 8000802:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	681a      	ldr	r2, [r3, #0]
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	011b      	lsls	r3, r3, #4
 800080c:	4413      	add	r3, r2
 800080e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	0e1a      	lsrs	r2, r3, #24
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	3303      	adds	r3, #3
 800081a:	b2d2      	uxtb	r2, r2
 800081c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	681a      	ldr	r2, [r3, #0]
 8000822:	68bb      	ldr	r3, [r7, #8]
 8000824:	011b      	lsls	r3, r3, #4
 8000826:	4413      	add	r3, r2
 8000828:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800082c:	681a      	ldr	r2, [r3, #0]
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	3304      	adds	r3, #4
 8000832:	b2d2      	uxtb	r2, r2
 8000834:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	681a      	ldr	r2, [r3, #0]
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	011b      	lsls	r3, r3, #4
 800083e:	4413      	add	r3, r2
 8000840:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	0a1a      	lsrs	r2, r3, #8
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	3305      	adds	r3, #5
 800084c:	b2d2      	uxtb	r2, r2
 800084e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	681a      	ldr	r2, [r3, #0]
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	011b      	lsls	r3, r3, #4
 8000858:	4413      	add	r3, r2
 800085a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	0c1a      	lsrs	r2, r3, #16
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	3306      	adds	r3, #6
 8000866:	b2d2      	uxtb	r2, r2
 8000868:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	681a      	ldr	r2, [r3, #0]
 800086e:	68bb      	ldr	r3, [r7, #8]
 8000870:	011b      	lsls	r3, r3, #4
 8000872:	4413      	add	r3, r2
 8000874:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	0e1a      	lsrs	r2, r3, #24
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	3307      	adds	r3, #7
 8000880:	b2d2      	uxtb	r2, r2
 8000882:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d108      	bne.n	800089c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	68da      	ldr	r2, [r3, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	f042 0220 	orr.w	r2, r2, #32
 8000898:	60da      	str	r2, [r3, #12]
 800089a:	e007      	b.n	80008ac <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	691a      	ldr	r2, [r3, #16]
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	f042 0220 	orr.w	r2, r2, #32
 80008aa:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80008ac:	2300      	movs	r3, #0
 80008ae:	e006      	b.n	80008be <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008b4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80008bc:	2301      	movs	r3, #1
  }
}
 80008be:	4618      	mov	r0, r3
 80008c0:	371c      	adds	r7, #28
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr

080008ca <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80008ca:	b480      	push	{r7}
 80008cc:	b085      	sub	sp, #20
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	6078      	str	r0, [r7, #4]
 80008d2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80008da:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80008dc:	7bfb      	ldrb	r3, [r7, #15]
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d002      	beq.n	80008e8 <HAL_CAN_ActivateNotification+0x1e>
 80008e2:	7bfb      	ldrb	r3, [r7, #15]
 80008e4:	2b02      	cmp	r3, #2
 80008e6:	d109      	bne.n	80008fc <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	6959      	ldr	r1, [r3, #20]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	683a      	ldr	r2, [r7, #0]
 80008f4:	430a      	orrs	r2, r1
 80008f6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80008f8:	2300      	movs	r3, #0
 80008fa:	e006      	b.n	800090a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000900:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000908:	2301      	movs	r3, #1
  }
}
 800090a:	4618      	mov	r0, r3
 800090c:	3714      	adds	r7, #20
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr

08000916 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000916:	b580      	push	{r7, lr}
 8000918:	b08a      	sub	sp, #40	; 0x28
 800091a:	af00      	add	r7, sp, #0
 800091c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	695b      	ldr	r3, [r3, #20]
 8000928:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	689b      	ldr	r3, [r3, #8]
 8000938:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	68db      	ldr	r3, [r3, #12]
 8000940:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	691b      	ldr	r3, [r3, #16]
 8000948:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000952:	6a3b      	ldr	r3, [r7, #32]
 8000954:	f003 0301 	and.w	r3, r3, #1
 8000958:	2b00      	cmp	r3, #0
 800095a:	d07c      	beq.n	8000a56 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800095c:	69bb      	ldr	r3, [r7, #24]
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	2b00      	cmp	r3, #0
 8000964:	d023      	beq.n	80009ae <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	2201      	movs	r2, #1
 800096c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800096e:	69bb      	ldr	r3, [r7, #24]
 8000970:	f003 0302 	and.w	r3, r3, #2
 8000974:	2b00      	cmp	r3, #0
 8000976:	d003      	beq.n	8000980 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000978:	6878      	ldr	r0, [r7, #4]
 800097a:	f000 f983 	bl	8000c84 <HAL_CAN_TxMailbox0CompleteCallback>
 800097e:	e016      	b.n	80009ae <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000980:	69bb      	ldr	r3, [r7, #24]
 8000982:	f003 0304 	and.w	r3, r3, #4
 8000986:	2b00      	cmp	r3, #0
 8000988:	d004      	beq.n	8000994 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800098a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800098c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
 8000992:	e00c      	b.n	80009ae <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000994:	69bb      	ldr	r3, [r7, #24]
 8000996:	f003 0308 	and.w	r3, r3, #8
 800099a:	2b00      	cmp	r3, #0
 800099c:	d004      	beq.n	80009a8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800099e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
 80009a6:	e002      	b.n	80009ae <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80009a8:	6878      	ldr	r0, [r7, #4]
 80009aa:	f000 f989 	bl	8000cc0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80009ae:	69bb      	ldr	r3, [r7, #24]
 80009b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d024      	beq.n	8000a02 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009c0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80009c2:	69bb      	ldr	r3, [r7, #24]
 80009c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d003      	beq.n	80009d4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80009cc:	6878      	ldr	r0, [r7, #4]
 80009ce:	f000 f963 	bl	8000c98 <HAL_CAN_TxMailbox1CompleteCallback>
 80009d2:	e016      	b.n	8000a02 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80009d4:	69bb      	ldr	r3, [r7, #24]
 80009d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d004      	beq.n	80009e8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80009de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009e4:	627b      	str	r3, [r7, #36]	; 0x24
 80009e6:	e00c      	b.n	8000a02 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80009e8:	69bb      	ldr	r3, [r7, #24]
 80009ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d004      	beq.n	80009fc <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80009f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
 80009fa:	e002      	b.n	8000a02 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f000 f969 	bl	8000cd4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000a02:	69bb      	ldr	r3, [r7, #24]
 8000a04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d024      	beq.n	8000a56 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a14:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000a16:	69bb      	ldr	r3, [r7, #24]
 8000a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d003      	beq.n	8000a28 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000a20:	6878      	ldr	r0, [r7, #4]
 8000a22:	f000 f943 	bl	8000cac <HAL_CAN_TxMailbox2CompleteCallback>
 8000a26:	e016      	b.n	8000a56 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000a28:	69bb      	ldr	r3, [r7, #24]
 8000a2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d004      	beq.n	8000a3c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a38:	627b      	str	r3, [r7, #36]	; 0x24
 8000a3a:	e00c      	b.n	8000a56 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000a3c:	69bb      	ldr	r3, [r7, #24]
 8000a3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d004      	beq.n	8000a50 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24
 8000a4e:	e002      	b.n	8000a56 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000a50:	6878      	ldr	r0, [r7, #4]
 8000a52:	f000 f949 	bl	8000ce8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000a56:	6a3b      	ldr	r3, [r7, #32]
 8000a58:	f003 0308 	and.w	r3, r3, #8
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d00c      	beq.n	8000a7a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	f003 0310 	and.w	r3, r3, #16
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d007      	beq.n	8000a7a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a70:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	2210      	movs	r2, #16
 8000a78:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000a7a:	6a3b      	ldr	r3, [r7, #32]
 8000a7c:	f003 0304 	and.w	r3, r3, #4
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d00b      	beq.n	8000a9c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	f003 0308 	and.w	r3, r3, #8
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d006      	beq.n	8000a9c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	2208      	movs	r2, #8
 8000a94:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000a96:	6878      	ldr	r0, [r7, #4]
 8000a98:	f000 f930 	bl	8000cfc <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000a9c:	6a3b      	ldr	r3, [r7, #32]
 8000a9e:	f003 0302 	and.w	r3, r3, #2
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d009      	beq.n	8000aba <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	f003 0303 	and.w	r3, r3, #3
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d002      	beq.n	8000aba <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000ab4:	6878      	ldr	r0, [r7, #4]
 8000ab6:	f003 f8e9 	bl	8003c8c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000aba:	6a3b      	ldr	r3, [r7, #32]
 8000abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d00c      	beq.n	8000ade <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000ac4:	693b      	ldr	r3, [r7, #16]
 8000ac6:	f003 0310 	and.w	r3, r3, #16
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d007      	beq.n	8000ade <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	2210      	movs	r2, #16
 8000adc:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000ade:	6a3b      	ldr	r3, [r7, #32]
 8000ae0:	f003 0320 	and.w	r3, r3, #32
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d00b      	beq.n	8000b00 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000ae8:	693b      	ldr	r3, [r7, #16]
 8000aea:	f003 0308 	and.w	r3, r3, #8
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d006      	beq.n	8000b00 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	2208      	movs	r2, #8
 8000af8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000afa:	6878      	ldr	r0, [r7, #4]
 8000afc:	f000 f912 	bl	8000d24 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000b00:	6a3b      	ldr	r3, [r7, #32]
 8000b02:	f003 0310 	and.w	r3, r3, #16
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d009      	beq.n	8000b1e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	691b      	ldr	r3, [r3, #16]
 8000b10:	f003 0303 	and.w	r3, r3, #3
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d002      	beq.n	8000b1e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000b18:	6878      	ldr	r0, [r7, #4]
 8000b1a:	f000 f8f9 	bl	8000d10 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000b1e:	6a3b      	ldr	r3, [r7, #32]
 8000b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d00b      	beq.n	8000b40 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000b28:	69fb      	ldr	r3, [r7, #28]
 8000b2a:	f003 0310 	and.w	r3, r3, #16
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d006      	beq.n	8000b40 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	2210      	movs	r2, #16
 8000b38:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8000b3a:	6878      	ldr	r0, [r7, #4]
 8000b3c:	f000 f8fc 	bl	8000d38 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000b40:	6a3b      	ldr	r3, [r7, #32]
 8000b42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d00b      	beq.n	8000b62 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000b4a:	69fb      	ldr	r3, [r7, #28]
 8000b4c:	f003 0308 	and.w	r3, r3, #8
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d006      	beq.n	8000b62 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2208      	movs	r2, #8
 8000b5a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	f000 f8f5 	bl	8000d4c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000b62:	6a3b      	ldr	r3, [r7, #32]
 8000b64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d07b      	beq.n	8000c64 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000b6c:	69fb      	ldr	r3, [r7, #28]
 8000b6e:	f003 0304 	and.w	r3, r3, #4
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d072      	beq.n	8000c5c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000b76:	6a3b      	ldr	r3, [r7, #32]
 8000b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d008      	beq.n	8000b92 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d003      	beq.n	8000b92 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8000b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b8c:	f043 0301 	orr.w	r3, r3, #1
 8000b90:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000b92:	6a3b      	ldr	r3, [r7, #32]
 8000b94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d008      	beq.n	8000bae <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d003      	beq.n	8000bae <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8000ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba8:	f043 0302 	orr.w	r3, r3, #2
 8000bac:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000bae:	6a3b      	ldr	r3, [r7, #32]
 8000bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d008      	beq.n	8000bca <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d003      	beq.n	8000bca <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8000bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc4:	f043 0304 	orr.w	r3, r3, #4
 8000bc8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000bca:	6a3b      	ldr	r3, [r7, #32]
 8000bcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d043      	beq.n	8000c5c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d03e      	beq.n	8000c5c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000be4:	2b60      	cmp	r3, #96	; 0x60
 8000be6:	d02b      	beq.n	8000c40 <HAL_CAN_IRQHandler+0x32a>
 8000be8:	2b60      	cmp	r3, #96	; 0x60
 8000bea:	d82e      	bhi.n	8000c4a <HAL_CAN_IRQHandler+0x334>
 8000bec:	2b50      	cmp	r3, #80	; 0x50
 8000bee:	d022      	beq.n	8000c36 <HAL_CAN_IRQHandler+0x320>
 8000bf0:	2b50      	cmp	r3, #80	; 0x50
 8000bf2:	d82a      	bhi.n	8000c4a <HAL_CAN_IRQHandler+0x334>
 8000bf4:	2b40      	cmp	r3, #64	; 0x40
 8000bf6:	d019      	beq.n	8000c2c <HAL_CAN_IRQHandler+0x316>
 8000bf8:	2b40      	cmp	r3, #64	; 0x40
 8000bfa:	d826      	bhi.n	8000c4a <HAL_CAN_IRQHandler+0x334>
 8000bfc:	2b30      	cmp	r3, #48	; 0x30
 8000bfe:	d010      	beq.n	8000c22 <HAL_CAN_IRQHandler+0x30c>
 8000c00:	2b30      	cmp	r3, #48	; 0x30
 8000c02:	d822      	bhi.n	8000c4a <HAL_CAN_IRQHandler+0x334>
 8000c04:	2b10      	cmp	r3, #16
 8000c06:	d002      	beq.n	8000c0e <HAL_CAN_IRQHandler+0x2f8>
 8000c08:	2b20      	cmp	r3, #32
 8000c0a:	d005      	beq.n	8000c18 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8000c0c:	e01d      	b.n	8000c4a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8000c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c10:	f043 0308 	orr.w	r3, r3, #8
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000c16:	e019      	b.n	8000c4c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c1a:	f043 0310 	orr.w	r3, r3, #16
 8000c1e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000c20:	e014      	b.n	8000c4c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c24:	f043 0320 	orr.w	r3, r3, #32
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000c2a:	e00f      	b.n	8000c4c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8000c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c32:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000c34:	e00a      	b.n	8000c4c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8000c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000c3e:	e005      	b.n	8000c4c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c46:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000c48:	e000      	b.n	8000c4c <HAL_CAN_IRQHandler+0x336>
            break;
 8000c4a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	699a      	ldr	r2, [r3, #24]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000c5a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	2204      	movs	r2, #4
 8000c62:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d008      	beq.n	8000c7c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c70:	431a      	orrs	r2, r3
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f000 f872 	bl	8000d60 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8000c7c:	bf00      	nop
 8000c7e:	3728      	adds	r7, #40	; 0x28
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8000c8c:	bf00      	nop
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8000ca0:	bf00      	nop
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8000cb4:	bf00      	nop
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8000cc8:	bf00      	nop
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8000cdc:	bf00      	nop
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr

08000ce8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8000cf0:	bf00      	nop
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8000d04:	bf00      	nop
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8000d18:	bf00      	nop
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8000d2c:	bf00      	nop
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8000d54:	bf00      	nop
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8000d68:	bf00      	nop
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr

08000d74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f003 0307 	and.w	r3, r3, #7
 8000d82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d84:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d8a:	68ba      	ldr	r2, [r7, #8]
 8000d8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d90:	4013      	ands	r3, r2
 8000d92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000da0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000da6:	4a04      	ldr	r2, [pc, #16]	; (8000db8 <__NVIC_SetPriorityGrouping+0x44>)
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	60d3      	str	r3, [r2, #12]
}
 8000dac:	bf00      	nop
 8000dae:	3714      	adds	r7, #20
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dc0:	4b04      	ldr	r3, [pc, #16]	; (8000dd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	0a1b      	lsrs	r3, r3, #8
 8000dc6:	f003 0307 	and.w	r3, r3, #7
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	db0b      	blt.n	8000e02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	f003 021f 	and.w	r2, r3, #31
 8000df0:	4907      	ldr	r1, [pc, #28]	; (8000e10 <__NVIC_EnableIRQ+0x38>)
 8000df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df6:	095b      	lsrs	r3, r3, #5
 8000df8:	2001      	movs	r0, #1
 8000dfa:	fa00 f202 	lsl.w	r2, r0, r2
 8000dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e02:	bf00      	nop
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	e000e100 	.word	0xe000e100

08000e14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	6039      	str	r1, [r7, #0]
 8000e1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	db0a      	blt.n	8000e3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	b2da      	uxtb	r2, r3
 8000e2c:	490c      	ldr	r1, [pc, #48]	; (8000e60 <__NVIC_SetPriority+0x4c>)
 8000e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e32:	0112      	lsls	r2, r2, #4
 8000e34:	b2d2      	uxtb	r2, r2
 8000e36:	440b      	add	r3, r1
 8000e38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e3c:	e00a      	b.n	8000e54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	b2da      	uxtb	r2, r3
 8000e42:	4908      	ldr	r1, [pc, #32]	; (8000e64 <__NVIC_SetPriority+0x50>)
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	f003 030f 	and.w	r3, r3, #15
 8000e4a:	3b04      	subs	r3, #4
 8000e4c:	0112      	lsls	r2, r2, #4
 8000e4e:	b2d2      	uxtb	r2, r2
 8000e50:	440b      	add	r3, r1
 8000e52:	761a      	strb	r2, [r3, #24]
}
 8000e54:	bf00      	nop
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	e000e100 	.word	0xe000e100
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b089      	sub	sp, #36	; 0x24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	f003 0307 	and.w	r3, r3, #7
 8000e7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	f1c3 0307 	rsb	r3, r3, #7
 8000e82:	2b04      	cmp	r3, #4
 8000e84:	bf28      	it	cs
 8000e86:	2304      	movcs	r3, #4
 8000e88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	3304      	adds	r3, #4
 8000e8e:	2b06      	cmp	r3, #6
 8000e90:	d902      	bls.n	8000e98 <NVIC_EncodePriority+0x30>
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	3b03      	subs	r3, #3
 8000e96:	e000      	b.n	8000e9a <NVIC_EncodePriority+0x32>
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	43da      	mvns	r2, r3
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	401a      	ands	r2, r3
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eb0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eba:	43d9      	mvns	r1, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec0:	4313      	orrs	r3, r2
         );
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3724      	adds	r7, #36	; 0x24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
	...

08000ed0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	3b01      	subs	r3, #1
 8000edc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ee0:	d301      	bcc.n	8000ee6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e00f      	b.n	8000f06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ee6:	4a0a      	ldr	r2, [pc, #40]	; (8000f10 <SysTick_Config+0x40>)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	3b01      	subs	r3, #1
 8000eec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eee:	210f      	movs	r1, #15
 8000ef0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ef4:	f7ff ff8e 	bl	8000e14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ef8:	4b05      	ldr	r3, [pc, #20]	; (8000f10 <SysTick_Config+0x40>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000efe:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <SysTick_Config+0x40>)
 8000f00:	2207      	movs	r2, #7
 8000f02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f04:	2300      	movs	r3, #0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	e000e010 	.word	0xe000e010

08000f14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f7ff ff29 	bl	8000d74 <__NVIC_SetPriorityGrouping>
}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b086      	sub	sp, #24
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	4603      	mov	r3, r0
 8000f32:	60b9      	str	r1, [r7, #8]
 8000f34:	607a      	str	r2, [r7, #4]
 8000f36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f3c:	f7ff ff3e 	bl	8000dbc <__NVIC_GetPriorityGrouping>
 8000f40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f42:	687a      	ldr	r2, [r7, #4]
 8000f44:	68b9      	ldr	r1, [r7, #8]
 8000f46:	6978      	ldr	r0, [r7, #20]
 8000f48:	f7ff ff8e 	bl	8000e68 <NVIC_EncodePriority>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f52:	4611      	mov	r1, r2
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff ff5d 	bl	8000e14 <__NVIC_SetPriority>
}
 8000f5a:	bf00      	nop
 8000f5c:	3718      	adds	r7, #24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b082      	sub	sp, #8
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	4603      	mov	r3, r0
 8000f6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff ff31 	bl	8000dd8 <__NVIC_EnableIRQ>
}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b082      	sub	sp, #8
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f7ff ffa2 	bl	8000ed0 <SysTick_Config>
 8000f8c:	4603      	mov	r3, r0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b084      	sub	sp, #16
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d101      	bne.n	8000fac <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	e037      	b.n	800101c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2202      	movs	r2, #2
 8000fb0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000fc2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000fc6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000fd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	68db      	ldr	r3, [r3, #12]
 8000fd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fdc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	695b      	ldr	r3, [r3, #20]
 8000fe2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fe8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	69db      	ldr	r3, [r3, #28]
 8000fee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000ff0:	68fa      	ldr	r2, [r7, #12]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	68fa      	ldr	r2, [r7, #12]
 8000ffc:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f000 f92a 	bl	8001258 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2200      	movs	r2, #0
 8001008:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2201      	movs	r2, #1
 800100e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2200      	movs	r2, #0
 8001016:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800101a:	2300      	movs	r3, #0
}  
 800101c:	4618      	mov	r0, r3
 800101e:	3710      	adds	r7, #16
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001032:	2b02      	cmp	r3, #2
 8001034:	d008      	beq.n	8001048 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2204      	movs	r2, #4
 800103a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2200      	movs	r2, #0
 8001040:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001044:	2301      	movs	r3, #1
 8001046:	e020      	b.n	800108a <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f022 020e 	bic.w	r2, r2, #14
 8001056:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f022 0201 	bic.w	r2, r2, #1
 8001066:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001070:	2101      	movs	r1, #1
 8001072:	fa01 f202 	lsl.w	r2, r1, r2
 8001076:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2201      	movs	r2, #1
 800107c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2200      	movs	r2, #0
 8001084:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001096:	b580      	push	{r7, lr}
 8001098:	b084      	sub	sp, #16
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800109e:	2300      	movs	r3, #0
 80010a0:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d005      	beq.n	80010b8 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2204      	movs	r2, #4
 80010b0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	73fb      	strb	r3, [r7, #15]
 80010b6:	e027      	b.n	8001108 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f022 020e 	bic.w	r2, r2, #14
 80010c6:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f022 0201 	bic.w	r2, r2, #1
 80010d6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010e0:	2101      	movs	r1, #1
 80010e2:	fa01 f202 	lsl.w	r2, r1, r2
 80010e6:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2201      	movs	r2, #1
 80010ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2200      	movs	r2, #0
 80010f4:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d003      	beq.n	8001108 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	4798      	blx	r3
    } 
  }
  return status;
 8001108:	7bfb      	ldrb	r3, [r7, #15]
}
 800110a:	4618      	mov	r0, r3
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b084      	sub	sp, #16
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112e:	2204      	movs	r2, #4
 8001130:	409a      	lsls	r2, r3
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	4013      	ands	r3, r2
 8001136:	2b00      	cmp	r3, #0
 8001138:	d024      	beq.n	8001184 <HAL_DMA_IRQHandler+0x72>
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	f003 0304 	and.w	r3, r3, #4
 8001140:	2b00      	cmp	r3, #0
 8001142:	d01f      	beq.n	8001184 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 0320 	and.w	r3, r3, #32
 800114e:	2b00      	cmp	r3, #0
 8001150:	d107      	bne.n	8001162 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f022 0204 	bic.w	r2, r2, #4
 8001160:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800116a:	2104      	movs	r1, #4
 800116c:	fa01 f202 	lsl.w	r2, r1, r2
 8001170:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001176:	2b00      	cmp	r3, #0
 8001178:	d06a      	beq.n	8001250 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001182:	e065      	b.n	8001250 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001188:	2202      	movs	r2, #2
 800118a:	409a      	lsls	r2, r3
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	4013      	ands	r3, r2
 8001190:	2b00      	cmp	r3, #0
 8001192:	d02c      	beq.n	80011ee <HAL_DMA_IRQHandler+0xdc>
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	2b00      	cmp	r3, #0
 800119c:	d027      	beq.n	80011ee <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f003 0320 	and.w	r3, r3, #32
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d10b      	bne.n	80011c4 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f022 020a 	bic.w	r2, r2, #10
 80011ba:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2201      	movs	r2, #1
 80011c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011cc:	2102      	movs	r1, #2
 80011ce:	fa01 f202 	lsl.w	r2, r1, r2
 80011d2:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2200      	movs	r2, #0
 80011d8:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d035      	beq.n	8001250 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80011ec:	e030      	b.n	8001250 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	2208      	movs	r2, #8
 80011f4:	409a      	lsls	r2, r3
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	4013      	ands	r3, r2
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d028      	beq.n	8001250 <HAL_DMA_IRQHandler+0x13e>
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	f003 0308 	and.w	r3, r3, #8
 8001204:	2b00      	cmp	r3, #0
 8001206:	d023      	beq.n	8001250 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f022 020e 	bic.w	r2, r2, #14
 8001216:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001220:	2101      	movs	r1, #1
 8001222:	fa01 f202 	lsl.w	r2, r1, r2
 8001226:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2201      	movs	r2, #1
 800122c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2201      	movs	r2, #1
 8001232:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2200      	movs	r2, #0
 800123a:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	2b00      	cmp	r3, #0
 8001244:	d004      	beq.n	8001250 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	4798      	blx	r3
    }
  }
}  
 800124e:	e7ff      	b.n	8001250 <HAL_DMA_IRQHandler+0x13e>
 8001250:	bf00      	nop
 8001252:	3710      	adds	r7, #16
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	461a      	mov	r2, r3
 8001266:	4b09      	ldr	r3, [pc, #36]	; (800128c <DMA_CalcBaseAndBitshift+0x34>)
 8001268:	4413      	add	r3, r2
 800126a:	4a09      	ldr	r2, [pc, #36]	; (8001290 <DMA_CalcBaseAndBitshift+0x38>)
 800126c:	fba2 2303 	umull	r2, r3, r2, r3
 8001270:	091b      	lsrs	r3, r3, #4
 8001272:	009a      	lsls	r2, r3, #2
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	4a06      	ldr	r2, [pc, #24]	; (8001294 <DMA_CalcBaseAndBitshift+0x3c>)
 800127c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 800127e:	bf00      	nop
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	bffdfff8 	.word	0xbffdfff8
 8001290:	cccccccd 	.word	0xcccccccd
 8001294:	40020000 	.word	0x40020000

08001298 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001298:	b480      	push	{r7}
 800129a:	b087      	sub	sp, #28
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012a2:	2300      	movs	r3, #0
 80012a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012a6:	e14e      	b.n	8001546 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	2101      	movs	r1, #1
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	fa01 f303 	lsl.w	r3, r1, r3
 80012b4:	4013      	ands	r3, r2
 80012b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	f000 8140 	beq.w	8001540 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f003 0303 	and.w	r3, r3, #3
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d005      	beq.n	80012d8 <HAL_GPIO_Init+0x40>
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f003 0303 	and.w	r3, r3, #3
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d130      	bne.n	800133a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	2203      	movs	r2, #3
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	43db      	mvns	r3, r3
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	4013      	ands	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	68da      	ldr	r2, [r3, #12]
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	693a      	ldr	r2, [r7, #16]
 80012fe:	4313      	orrs	r3, r2
 8001300:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800130e:	2201      	movs	r2, #1
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	43db      	mvns	r3, r3
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	4013      	ands	r3, r2
 800131c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	091b      	lsrs	r3, r3, #4
 8001324:	f003 0201 	and.w	r2, r3, #1
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	4313      	orrs	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f003 0303 	and.w	r3, r3, #3
 8001342:	2b03      	cmp	r3, #3
 8001344:	d017      	beq.n	8001376 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	68db      	ldr	r3, [r3, #12]
 800134a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	2203      	movs	r2, #3
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	43db      	mvns	r3, r3
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	4013      	ands	r3, r2
 800135c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	689a      	ldr	r2, [r3, #8]
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	4313      	orrs	r3, r2
 800136e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f003 0303 	and.w	r3, r3, #3
 800137e:	2b02      	cmp	r3, #2
 8001380:	d123      	bne.n	80013ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	08da      	lsrs	r2, r3, #3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	3208      	adds	r2, #8
 800138a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800138e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	f003 0307 	and.w	r3, r3, #7
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	220f      	movs	r2, #15
 800139a:	fa02 f303 	lsl.w	r3, r2, r3
 800139e:	43db      	mvns	r3, r3
 80013a0:	693a      	ldr	r2, [r7, #16]
 80013a2:	4013      	ands	r3, r2
 80013a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	691a      	ldr	r2, [r3, #16]
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	f003 0307 	and.w	r3, r3, #7
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	08da      	lsrs	r2, r3, #3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3208      	adds	r2, #8
 80013c4:	6939      	ldr	r1, [r7, #16]
 80013c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	2203      	movs	r2, #3
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	43db      	mvns	r3, r3
 80013dc:	693a      	ldr	r2, [r7, #16]
 80013de:	4013      	ands	r3, r2
 80013e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f003 0203 	and.w	r2, r3, #3
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001406:	2b00      	cmp	r3, #0
 8001408:	f000 809a 	beq.w	8001540 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800140c:	4b55      	ldr	r3, [pc, #340]	; (8001564 <HAL_GPIO_Init+0x2cc>)
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	4a54      	ldr	r2, [pc, #336]	; (8001564 <HAL_GPIO_Init+0x2cc>)
 8001412:	f043 0301 	orr.w	r3, r3, #1
 8001416:	6193      	str	r3, [r2, #24]
 8001418:	4b52      	ldr	r3, [pc, #328]	; (8001564 <HAL_GPIO_Init+0x2cc>)
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	f003 0301 	and.w	r3, r3, #1
 8001420:	60bb      	str	r3, [r7, #8]
 8001422:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001424:	4a50      	ldr	r2, [pc, #320]	; (8001568 <HAL_GPIO_Init+0x2d0>)
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	089b      	lsrs	r3, r3, #2
 800142a:	3302      	adds	r3, #2
 800142c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001430:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	f003 0303 	and.w	r3, r3, #3
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	220f      	movs	r2, #15
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	43db      	mvns	r3, r3
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	4013      	ands	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800144e:	d013      	beq.n	8001478 <HAL_GPIO_Init+0x1e0>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4a46      	ldr	r2, [pc, #280]	; (800156c <HAL_GPIO_Init+0x2d4>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d00d      	beq.n	8001474 <HAL_GPIO_Init+0x1dc>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4a45      	ldr	r2, [pc, #276]	; (8001570 <HAL_GPIO_Init+0x2d8>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d007      	beq.n	8001470 <HAL_GPIO_Init+0x1d8>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	4a44      	ldr	r2, [pc, #272]	; (8001574 <HAL_GPIO_Init+0x2dc>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d101      	bne.n	800146c <HAL_GPIO_Init+0x1d4>
 8001468:	2303      	movs	r3, #3
 800146a:	e006      	b.n	800147a <HAL_GPIO_Init+0x1e2>
 800146c:	2305      	movs	r3, #5
 800146e:	e004      	b.n	800147a <HAL_GPIO_Init+0x1e2>
 8001470:	2302      	movs	r3, #2
 8001472:	e002      	b.n	800147a <HAL_GPIO_Init+0x1e2>
 8001474:	2301      	movs	r3, #1
 8001476:	e000      	b.n	800147a <HAL_GPIO_Init+0x1e2>
 8001478:	2300      	movs	r3, #0
 800147a:	697a      	ldr	r2, [r7, #20]
 800147c:	f002 0203 	and.w	r2, r2, #3
 8001480:	0092      	lsls	r2, r2, #2
 8001482:	4093      	lsls	r3, r2
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	4313      	orrs	r3, r2
 8001488:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800148a:	4937      	ldr	r1, [pc, #220]	; (8001568 <HAL_GPIO_Init+0x2d0>)
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	089b      	lsrs	r3, r3, #2
 8001490:	3302      	adds	r3, #2
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001498:	4b37      	ldr	r3, [pc, #220]	; (8001578 <HAL_GPIO_Init+0x2e0>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	43db      	mvns	r3, r3
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	4013      	ands	r3, r2
 80014a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d003      	beq.n	80014bc <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80014bc:	4a2e      	ldr	r2, [pc, #184]	; (8001578 <HAL_GPIO_Init+0x2e0>)
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80014c2:	4b2d      	ldr	r3, [pc, #180]	; (8001578 <HAL_GPIO_Init+0x2e0>)
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	43db      	mvns	r3, r3
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	4013      	ands	r3, r2
 80014d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d003      	beq.n	80014e6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80014e6:	4a24      	ldr	r2, [pc, #144]	; (8001578 <HAL_GPIO_Init+0x2e0>)
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014ec:	4b22      	ldr	r3, [pc, #136]	; (8001578 <HAL_GPIO_Init+0x2e0>)
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	43db      	mvns	r3, r3
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	4013      	ands	r3, r2
 80014fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d003      	beq.n	8001510 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	4313      	orrs	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001510:	4a19      	ldr	r2, [pc, #100]	; (8001578 <HAL_GPIO_Init+0x2e0>)
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001516:	4b18      	ldr	r3, [pc, #96]	; (8001578 <HAL_GPIO_Init+0x2e0>)
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	43db      	mvns	r3, r3
 8001520:	693a      	ldr	r2, [r7, #16]
 8001522:	4013      	ands	r3, r2
 8001524:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d003      	beq.n	800153a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	4313      	orrs	r3, r2
 8001538:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800153a:	4a0f      	ldr	r2, [pc, #60]	; (8001578 <HAL_GPIO_Init+0x2e0>)
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	3301      	adds	r3, #1
 8001544:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	fa22 f303 	lsr.w	r3, r2, r3
 8001550:	2b00      	cmp	r3, #0
 8001552:	f47f aea9 	bne.w	80012a8 <HAL_GPIO_Init+0x10>
  }
}
 8001556:	bf00      	nop
 8001558:	bf00      	nop
 800155a:	371c      	adds	r7, #28
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	40021000 	.word	0x40021000
 8001568:	40010000 	.word	0x40010000
 800156c:	48000400 	.word	0x48000400
 8001570:	48000800 	.word	0x48000800
 8001574:	48000c00 	.word	0x48000c00
 8001578:	40010400 	.word	0x40010400

0800157c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	460b      	mov	r3, r1
 8001586:	807b      	strh	r3, [r7, #2]
 8001588:	4613      	mov	r3, r2
 800158a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800158c:	787b      	ldrb	r3, [r7, #1]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d003      	beq.n	800159a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001592:	887a      	ldrh	r2, [r7, #2]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001598:	e002      	b.n	80015a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800159a:	887a      	ldrh	r2, [r7, #2]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015a0:	bf00      	nop
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015bc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d102      	bne.n	80015d2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	f001 b823 	b.w	8002618 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	f000 817d 	beq.w	80018e2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80015e8:	4bbc      	ldr	r3, [pc, #752]	; (80018dc <HAL_RCC_OscConfig+0x330>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f003 030c 	and.w	r3, r3, #12
 80015f0:	2b04      	cmp	r3, #4
 80015f2:	d00c      	beq.n	800160e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015f4:	4bb9      	ldr	r3, [pc, #740]	; (80018dc <HAL_RCC_OscConfig+0x330>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f003 030c 	and.w	r3, r3, #12
 80015fc:	2b08      	cmp	r3, #8
 80015fe:	d15c      	bne.n	80016ba <HAL_RCC_OscConfig+0x10e>
 8001600:	4bb6      	ldr	r3, [pc, #728]	; (80018dc <HAL_RCC_OscConfig+0x330>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001608:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800160c:	d155      	bne.n	80016ba <HAL_RCC_OscConfig+0x10e>
 800160e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001612:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001616:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800161a:	fa93 f3a3 	rbit	r3, r3
 800161e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001622:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001626:	fab3 f383 	clz	r3, r3
 800162a:	b2db      	uxtb	r3, r3
 800162c:	095b      	lsrs	r3, r3, #5
 800162e:	b2db      	uxtb	r3, r3
 8001630:	f043 0301 	orr.w	r3, r3, #1
 8001634:	b2db      	uxtb	r3, r3
 8001636:	2b01      	cmp	r3, #1
 8001638:	d102      	bne.n	8001640 <HAL_RCC_OscConfig+0x94>
 800163a:	4ba8      	ldr	r3, [pc, #672]	; (80018dc <HAL_RCC_OscConfig+0x330>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	e015      	b.n	800166c <HAL_RCC_OscConfig+0xc0>
 8001640:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001644:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001648:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800164c:	fa93 f3a3 	rbit	r3, r3
 8001650:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001654:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001658:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800165c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001660:	fa93 f3a3 	rbit	r3, r3
 8001664:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001668:	4b9c      	ldr	r3, [pc, #624]	; (80018dc <HAL_RCC_OscConfig+0x330>)
 800166a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001670:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001674:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001678:	fa92 f2a2 	rbit	r2, r2
 800167c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001680:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001684:	fab2 f282 	clz	r2, r2
 8001688:	b2d2      	uxtb	r2, r2
 800168a:	f042 0220 	orr.w	r2, r2, #32
 800168e:	b2d2      	uxtb	r2, r2
 8001690:	f002 021f 	and.w	r2, r2, #31
 8001694:	2101      	movs	r1, #1
 8001696:	fa01 f202 	lsl.w	r2, r1, r2
 800169a:	4013      	ands	r3, r2
 800169c:	2b00      	cmp	r3, #0
 800169e:	f000 811f 	beq.w	80018e0 <HAL_RCC_OscConfig+0x334>
 80016a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	f040 8116 	bne.w	80018e0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	f000 bfaf 	b.w	8002618 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016ca:	d106      	bne.n	80016da <HAL_RCC_OscConfig+0x12e>
 80016cc:	4b83      	ldr	r3, [pc, #524]	; (80018dc <HAL_RCC_OscConfig+0x330>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a82      	ldr	r2, [pc, #520]	; (80018dc <HAL_RCC_OscConfig+0x330>)
 80016d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016d6:	6013      	str	r3, [r2, #0]
 80016d8:	e036      	b.n	8001748 <HAL_RCC_OscConfig+0x19c>
 80016da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d10c      	bne.n	8001704 <HAL_RCC_OscConfig+0x158>
 80016ea:	4b7c      	ldr	r3, [pc, #496]	; (80018dc <HAL_RCC_OscConfig+0x330>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a7b      	ldr	r2, [pc, #492]	; (80018dc <HAL_RCC_OscConfig+0x330>)
 80016f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016f4:	6013      	str	r3, [r2, #0]
 80016f6:	4b79      	ldr	r3, [pc, #484]	; (80018dc <HAL_RCC_OscConfig+0x330>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a78      	ldr	r2, [pc, #480]	; (80018dc <HAL_RCC_OscConfig+0x330>)
 80016fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001700:	6013      	str	r3, [r2, #0]
 8001702:	e021      	b.n	8001748 <HAL_RCC_OscConfig+0x19c>
 8001704:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001708:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001714:	d10c      	bne.n	8001730 <HAL_RCC_OscConfig+0x184>
 8001716:	4b71      	ldr	r3, [pc, #452]	; (80018dc <HAL_RCC_OscConfig+0x330>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a70      	ldr	r2, [pc, #448]	; (80018dc <HAL_RCC_OscConfig+0x330>)
 800171c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001720:	6013      	str	r3, [r2, #0]
 8001722:	4b6e      	ldr	r3, [pc, #440]	; (80018dc <HAL_RCC_OscConfig+0x330>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a6d      	ldr	r2, [pc, #436]	; (80018dc <HAL_RCC_OscConfig+0x330>)
 8001728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800172c:	6013      	str	r3, [r2, #0]
 800172e:	e00b      	b.n	8001748 <HAL_RCC_OscConfig+0x19c>
 8001730:	4b6a      	ldr	r3, [pc, #424]	; (80018dc <HAL_RCC_OscConfig+0x330>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a69      	ldr	r2, [pc, #420]	; (80018dc <HAL_RCC_OscConfig+0x330>)
 8001736:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800173a:	6013      	str	r3, [r2, #0]
 800173c:	4b67      	ldr	r3, [pc, #412]	; (80018dc <HAL_RCC_OscConfig+0x330>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a66      	ldr	r2, [pc, #408]	; (80018dc <HAL_RCC_OscConfig+0x330>)
 8001742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001746:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001748:	4b64      	ldr	r3, [pc, #400]	; (80018dc <HAL_RCC_OscConfig+0x330>)
 800174a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800174c:	f023 020f 	bic.w	r2, r3, #15
 8001750:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001754:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	495f      	ldr	r1, [pc, #380]	; (80018dc <HAL_RCC_OscConfig+0x330>)
 800175e:	4313      	orrs	r3, r2
 8001760:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001762:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001766:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d059      	beq.n	8001826 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001772:	f7fe fd83 	bl	800027c <HAL_GetTick>
 8001776:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800177a:	e00a      	b.n	8001792 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800177c:	f7fe fd7e 	bl	800027c <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	2b64      	cmp	r3, #100	; 0x64
 800178a:	d902      	bls.n	8001792 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	f000 bf43 	b.w	8002618 <HAL_RCC_OscConfig+0x106c>
 8001792:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001796:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800179a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800179e:	fa93 f3a3 	rbit	r3, r3
 80017a2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80017a6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017aa:	fab3 f383 	clz	r3, r3
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	095b      	lsrs	r3, r3, #5
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	f043 0301 	orr.w	r3, r3, #1
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d102      	bne.n	80017c4 <HAL_RCC_OscConfig+0x218>
 80017be:	4b47      	ldr	r3, [pc, #284]	; (80018dc <HAL_RCC_OscConfig+0x330>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	e015      	b.n	80017f0 <HAL_RCC_OscConfig+0x244>
 80017c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017c8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017cc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80017d0:	fa93 f3a3 	rbit	r3, r3
 80017d4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80017d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017dc:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80017e0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80017e4:	fa93 f3a3 	rbit	r3, r3
 80017e8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80017ec:	4b3b      	ldr	r3, [pc, #236]	; (80018dc <HAL_RCC_OscConfig+0x330>)
 80017ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017f4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80017f8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80017fc:	fa92 f2a2 	rbit	r2, r2
 8001800:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001804:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001808:	fab2 f282 	clz	r2, r2
 800180c:	b2d2      	uxtb	r2, r2
 800180e:	f042 0220 	orr.w	r2, r2, #32
 8001812:	b2d2      	uxtb	r2, r2
 8001814:	f002 021f 	and.w	r2, r2, #31
 8001818:	2101      	movs	r1, #1
 800181a:	fa01 f202 	lsl.w	r2, r1, r2
 800181e:	4013      	ands	r3, r2
 8001820:	2b00      	cmp	r3, #0
 8001822:	d0ab      	beq.n	800177c <HAL_RCC_OscConfig+0x1d0>
 8001824:	e05d      	b.n	80018e2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001826:	f7fe fd29 	bl	800027c <HAL_GetTick>
 800182a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800182e:	e00a      	b.n	8001846 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001830:	f7fe fd24 	bl	800027c <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b64      	cmp	r3, #100	; 0x64
 800183e:	d902      	bls.n	8001846 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	f000 bee9 	b.w	8002618 <HAL_RCC_OscConfig+0x106c>
 8001846:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800184a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800184e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001852:	fa93 f3a3 	rbit	r3, r3
 8001856:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800185a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800185e:	fab3 f383 	clz	r3, r3
 8001862:	b2db      	uxtb	r3, r3
 8001864:	095b      	lsrs	r3, r3, #5
 8001866:	b2db      	uxtb	r3, r3
 8001868:	f043 0301 	orr.w	r3, r3, #1
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b01      	cmp	r3, #1
 8001870:	d102      	bne.n	8001878 <HAL_RCC_OscConfig+0x2cc>
 8001872:	4b1a      	ldr	r3, [pc, #104]	; (80018dc <HAL_RCC_OscConfig+0x330>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	e015      	b.n	80018a4 <HAL_RCC_OscConfig+0x2f8>
 8001878:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800187c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001880:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001884:	fa93 f3a3 	rbit	r3, r3
 8001888:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800188c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001890:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001894:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001898:	fa93 f3a3 	rbit	r3, r3
 800189c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80018a0:	4b0e      	ldr	r3, [pc, #56]	; (80018dc <HAL_RCC_OscConfig+0x330>)
 80018a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018a8:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80018ac:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80018b0:	fa92 f2a2 	rbit	r2, r2
 80018b4:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80018b8:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80018bc:	fab2 f282 	clz	r2, r2
 80018c0:	b2d2      	uxtb	r2, r2
 80018c2:	f042 0220 	orr.w	r2, r2, #32
 80018c6:	b2d2      	uxtb	r2, r2
 80018c8:	f002 021f 	and.w	r2, r2, #31
 80018cc:	2101      	movs	r1, #1
 80018ce:	fa01 f202 	lsl.w	r2, r1, r2
 80018d2:	4013      	ands	r3, r2
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d1ab      	bne.n	8001830 <HAL_RCC_OscConfig+0x284>
 80018d8:	e003      	b.n	80018e2 <HAL_RCC_OscConfig+0x336>
 80018da:	bf00      	nop
 80018dc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	f000 817d 	beq.w	8001bf2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80018f8:	4ba6      	ldr	r3, [pc, #664]	; (8001b94 <HAL_RCC_OscConfig+0x5e8>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f003 030c 	and.w	r3, r3, #12
 8001900:	2b00      	cmp	r3, #0
 8001902:	d00b      	beq.n	800191c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001904:	4ba3      	ldr	r3, [pc, #652]	; (8001b94 <HAL_RCC_OscConfig+0x5e8>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f003 030c 	and.w	r3, r3, #12
 800190c:	2b08      	cmp	r3, #8
 800190e:	d172      	bne.n	80019f6 <HAL_RCC_OscConfig+0x44a>
 8001910:	4ba0      	ldr	r3, [pc, #640]	; (8001b94 <HAL_RCC_OscConfig+0x5e8>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d16c      	bne.n	80019f6 <HAL_RCC_OscConfig+0x44a>
 800191c:	2302      	movs	r3, #2
 800191e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001922:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001926:	fa93 f3a3 	rbit	r3, r3
 800192a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800192e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001932:	fab3 f383 	clz	r3, r3
 8001936:	b2db      	uxtb	r3, r3
 8001938:	095b      	lsrs	r3, r3, #5
 800193a:	b2db      	uxtb	r3, r3
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	b2db      	uxtb	r3, r3
 8001942:	2b01      	cmp	r3, #1
 8001944:	d102      	bne.n	800194c <HAL_RCC_OscConfig+0x3a0>
 8001946:	4b93      	ldr	r3, [pc, #588]	; (8001b94 <HAL_RCC_OscConfig+0x5e8>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	e013      	b.n	8001974 <HAL_RCC_OscConfig+0x3c8>
 800194c:	2302      	movs	r3, #2
 800194e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001952:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001956:	fa93 f3a3 	rbit	r3, r3
 800195a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800195e:	2302      	movs	r3, #2
 8001960:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001964:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001968:	fa93 f3a3 	rbit	r3, r3
 800196c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001970:	4b88      	ldr	r3, [pc, #544]	; (8001b94 <HAL_RCC_OscConfig+0x5e8>)
 8001972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001974:	2202      	movs	r2, #2
 8001976:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800197a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800197e:	fa92 f2a2 	rbit	r2, r2
 8001982:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001986:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800198a:	fab2 f282 	clz	r2, r2
 800198e:	b2d2      	uxtb	r2, r2
 8001990:	f042 0220 	orr.w	r2, r2, #32
 8001994:	b2d2      	uxtb	r2, r2
 8001996:	f002 021f 	and.w	r2, r2, #31
 800199a:	2101      	movs	r1, #1
 800199c:	fa01 f202 	lsl.w	r2, r1, r2
 80019a0:	4013      	ands	r3, r2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d00a      	beq.n	80019bc <HAL_RCC_OscConfig+0x410>
 80019a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	691b      	ldr	r3, [r3, #16]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d002      	beq.n	80019bc <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	f000 be2e 	b.w	8002618 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019bc:	4b75      	ldr	r3, [pc, #468]	; (8001b94 <HAL_RCC_OscConfig+0x5e8>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	695b      	ldr	r3, [r3, #20]
 80019d0:	21f8      	movs	r1, #248	; 0xf8
 80019d2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80019da:	fa91 f1a1 	rbit	r1, r1
 80019de:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80019e2:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80019e6:	fab1 f181 	clz	r1, r1
 80019ea:	b2c9      	uxtb	r1, r1
 80019ec:	408b      	lsls	r3, r1
 80019ee:	4969      	ldr	r1, [pc, #420]	; (8001b94 <HAL_RCC_OscConfig+0x5e8>)
 80019f0:	4313      	orrs	r3, r2
 80019f2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019f4:	e0fd      	b.n	8001bf2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	691b      	ldr	r3, [r3, #16]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	f000 8088 	beq.w	8001b18 <HAL_RCC_OscConfig+0x56c>
 8001a08:	2301      	movs	r3, #1
 8001a0a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a0e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001a12:	fa93 f3a3 	rbit	r3, r3
 8001a16:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001a1a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a1e:	fab3 f383 	clz	r3, r3
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a28:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	461a      	mov	r2, r3
 8001a30:	2301      	movs	r3, #1
 8001a32:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a34:	f7fe fc22 	bl	800027c <HAL_GetTick>
 8001a38:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a3c:	e00a      	b.n	8001a54 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a3e:	f7fe fc1d 	bl	800027c <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d902      	bls.n	8001a54 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	f000 bde2 	b.w	8002618 <HAL_RCC_OscConfig+0x106c>
 8001a54:	2302      	movs	r3, #2
 8001a56:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001a5e:	fa93 f3a3 	rbit	r3, r3
 8001a62:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001a66:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a6a:	fab3 f383 	clz	r3, r3
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	095b      	lsrs	r3, r3, #5
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d102      	bne.n	8001a84 <HAL_RCC_OscConfig+0x4d8>
 8001a7e:	4b45      	ldr	r3, [pc, #276]	; (8001b94 <HAL_RCC_OscConfig+0x5e8>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	e013      	b.n	8001aac <HAL_RCC_OscConfig+0x500>
 8001a84:	2302      	movs	r3, #2
 8001a86:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001a8e:	fa93 f3a3 	rbit	r3, r3
 8001a92:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001a96:	2302      	movs	r3, #2
 8001a98:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001a9c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001aa0:	fa93 f3a3 	rbit	r3, r3
 8001aa4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001aa8:	4b3a      	ldr	r3, [pc, #232]	; (8001b94 <HAL_RCC_OscConfig+0x5e8>)
 8001aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aac:	2202      	movs	r2, #2
 8001aae:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001ab2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001ab6:	fa92 f2a2 	rbit	r2, r2
 8001aba:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001abe:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001ac2:	fab2 f282 	clz	r2, r2
 8001ac6:	b2d2      	uxtb	r2, r2
 8001ac8:	f042 0220 	orr.w	r2, r2, #32
 8001acc:	b2d2      	uxtb	r2, r2
 8001ace:	f002 021f 	and.w	r2, r2, #31
 8001ad2:	2101      	movs	r1, #1
 8001ad4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ad8:	4013      	ands	r3, r2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d0af      	beq.n	8001a3e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ade:	4b2d      	ldr	r3, [pc, #180]	; (8001b94 <HAL_RCC_OscConfig+0x5e8>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ae6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	695b      	ldr	r3, [r3, #20]
 8001af2:	21f8      	movs	r1, #248	; 0xf8
 8001af4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001afc:	fa91 f1a1 	rbit	r1, r1
 8001b00:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001b04:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001b08:	fab1 f181 	clz	r1, r1
 8001b0c:	b2c9      	uxtb	r1, r1
 8001b0e:	408b      	lsls	r3, r1
 8001b10:	4920      	ldr	r1, [pc, #128]	; (8001b94 <HAL_RCC_OscConfig+0x5e8>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	600b      	str	r3, [r1, #0]
 8001b16:	e06c      	b.n	8001bf2 <HAL_RCC_OscConfig+0x646>
 8001b18:	2301      	movs	r3, #1
 8001b1a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b1e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001b22:	fa93 f3a3 	rbit	r3, r3
 8001b26:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001b2a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b2e:	fab3 f383 	clz	r3, r3
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b38:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	461a      	mov	r2, r3
 8001b40:	2300      	movs	r3, #0
 8001b42:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b44:	f7fe fb9a 	bl	800027c <HAL_GetTick>
 8001b48:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b4c:	e00a      	b.n	8001b64 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b4e:	f7fe fb95 	bl	800027c <HAL_GetTick>
 8001b52:	4602      	mov	r2, r0
 8001b54:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d902      	bls.n	8001b64 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	f000 bd5a 	b.w	8002618 <HAL_RCC_OscConfig+0x106c>
 8001b64:	2302      	movs	r3, #2
 8001b66:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001b6e:	fa93 f3a3 	rbit	r3, r3
 8001b72:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001b76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b7a:	fab3 f383 	clz	r3, r3
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	095b      	lsrs	r3, r3, #5
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	f043 0301 	orr.w	r3, r3, #1
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d104      	bne.n	8001b98 <HAL_RCC_OscConfig+0x5ec>
 8001b8e:	4b01      	ldr	r3, [pc, #4]	; (8001b94 <HAL_RCC_OscConfig+0x5e8>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	e015      	b.n	8001bc0 <HAL_RCC_OscConfig+0x614>
 8001b94:	40021000 	.word	0x40021000
 8001b98:	2302      	movs	r3, #2
 8001b9a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001ba2:	fa93 f3a3 	rbit	r3, r3
 8001ba6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001baa:	2302      	movs	r3, #2
 8001bac:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001bb0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001bb4:	fa93 f3a3 	rbit	r3, r3
 8001bb8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001bbc:	4bc8      	ldr	r3, [pc, #800]	; (8001ee0 <HAL_RCC_OscConfig+0x934>)
 8001bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc0:	2202      	movs	r2, #2
 8001bc2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001bc6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001bca:	fa92 f2a2 	rbit	r2, r2
 8001bce:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001bd2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001bd6:	fab2 f282 	clz	r2, r2
 8001bda:	b2d2      	uxtb	r2, r2
 8001bdc:	f042 0220 	orr.w	r2, r2, #32
 8001be0:	b2d2      	uxtb	r2, r2
 8001be2:	f002 021f 	and.w	r2, r2, #31
 8001be6:	2101      	movs	r1, #1
 8001be8:	fa01 f202 	lsl.w	r2, r1, r2
 8001bec:	4013      	ands	r3, r2
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d1ad      	bne.n	8001b4e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bf6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0308 	and.w	r3, r3, #8
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f000 8110 	beq.w	8001e28 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c0c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d079      	beq.n	8001d0c <HAL_RCC_OscConfig+0x760>
 8001c18:	2301      	movs	r3, #1
 8001c1a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001c22:	fa93 f3a3 	rbit	r3, r3
 8001c26:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001c2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c2e:	fab3 f383 	clz	r3, r3
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	461a      	mov	r2, r3
 8001c36:	4bab      	ldr	r3, [pc, #684]	; (8001ee4 <HAL_RCC_OscConfig+0x938>)
 8001c38:	4413      	add	r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	2301      	movs	r3, #1
 8001c40:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c42:	f7fe fb1b 	bl	800027c <HAL_GetTick>
 8001c46:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c4a:	e00a      	b.n	8001c62 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c4c:	f7fe fb16 	bl	800027c <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d902      	bls.n	8001c62 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	f000 bcdb 	b.w	8002618 <HAL_RCC_OscConfig+0x106c>
 8001c62:	2302      	movs	r3, #2
 8001c64:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c68:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001c6c:	fa93 f3a3 	rbit	r3, r3
 8001c70:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001c74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c78:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001c7c:	2202      	movs	r2, #2
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c84:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	fa93 f2a3 	rbit	r2, r3
 8001c8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001ca0:	2202      	movs	r2, #2
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	fa93 f2a3 	rbit	r2, r3
 8001cb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001cba:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cbc:	4b88      	ldr	r3, [pc, #544]	; (8001ee0 <HAL_RCC_OscConfig+0x934>)
 8001cbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cc4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001cc8:	2102      	movs	r1, #2
 8001cca:	6019      	str	r1, [r3, #0]
 8001ccc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cd0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	fa93 f1a3 	rbit	r1, r3
 8001cda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cde:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001ce2:	6019      	str	r1, [r3, #0]
  return result;
 8001ce4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	fab3 f383 	clz	r3, r3
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	f003 031f 	and.w	r3, r3, #31
 8001cfe:	2101      	movs	r1, #1
 8001d00:	fa01 f303 	lsl.w	r3, r1, r3
 8001d04:	4013      	ands	r3, r2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d0a0      	beq.n	8001c4c <HAL_RCC_OscConfig+0x6a0>
 8001d0a:	e08d      	b.n	8001e28 <HAL_RCC_OscConfig+0x87c>
 8001d0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d10:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001d14:	2201      	movs	r2, #1
 8001d16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d1c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	fa93 f2a3 	rbit	r2, r3
 8001d26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d2a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001d2e:	601a      	str	r2, [r3, #0]
  return result;
 8001d30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d34:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001d38:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d3a:	fab3 f383 	clz	r3, r3
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	461a      	mov	r2, r3
 8001d42:	4b68      	ldr	r3, [pc, #416]	; (8001ee4 <HAL_RCC_OscConfig+0x938>)
 8001d44:	4413      	add	r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	461a      	mov	r2, r3
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d4e:	f7fe fa95 	bl	800027c <HAL_GetTick>
 8001d52:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d56:	e00a      	b.n	8001d6e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d58:	f7fe fa90 	bl	800027c <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d902      	bls.n	8001d6e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	f000 bc55 	b.w	8002618 <HAL_RCC_OscConfig+0x106c>
 8001d6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d72:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001d76:	2202      	movs	r2, #2
 8001d78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d7e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	fa93 f2a3 	rbit	r2, r3
 8001d88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d8c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d96:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001d9a:	2202      	movs	r2, #2
 8001d9c:	601a      	str	r2, [r3, #0]
 8001d9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001da2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	fa93 f2a3 	rbit	r2, r3
 8001dac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001db0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001db4:	601a      	str	r2, [r3, #0]
 8001db6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001dbe:	2202      	movs	r2, #2
 8001dc0:	601a      	str	r2, [r3, #0]
 8001dc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	fa93 f2a3 	rbit	r2, r3
 8001dd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dd4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001dd8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dda:	4b41      	ldr	r3, [pc, #260]	; (8001ee0 <HAL_RCC_OscConfig+0x934>)
 8001ddc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001de2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001de6:	2102      	movs	r1, #2
 8001de8:	6019      	str	r1, [r3, #0]
 8001dea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dee:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	fa93 f1a3 	rbit	r1, r3
 8001df8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dfc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001e00:	6019      	str	r1, [r3, #0]
  return result;
 8001e02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e06:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	fab3 f383 	clz	r3, r3
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	f003 031f 	and.w	r3, r3, #31
 8001e1c:	2101      	movs	r1, #1
 8001e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e22:	4013      	ands	r3, r2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d197      	bne.n	8001d58 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e2c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0304 	and.w	r3, r3, #4
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	f000 81a1 	beq.w	8002180 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e44:	4b26      	ldr	r3, [pc, #152]	; (8001ee0 <HAL_RCC_OscConfig+0x934>)
 8001e46:	69db      	ldr	r3, [r3, #28]
 8001e48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d116      	bne.n	8001e7e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e50:	4b23      	ldr	r3, [pc, #140]	; (8001ee0 <HAL_RCC_OscConfig+0x934>)
 8001e52:	69db      	ldr	r3, [r3, #28]
 8001e54:	4a22      	ldr	r2, [pc, #136]	; (8001ee0 <HAL_RCC_OscConfig+0x934>)
 8001e56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e5a:	61d3      	str	r3, [r2, #28]
 8001e5c:	4b20      	ldr	r3, [pc, #128]	; (8001ee0 <HAL_RCC_OscConfig+0x934>)
 8001e5e:	69db      	ldr	r3, [r3, #28]
 8001e60:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001e64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e68:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e72:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001e76:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e7e:	4b1a      	ldr	r3, [pc, #104]	; (8001ee8 <HAL_RCC_OscConfig+0x93c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d11a      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e8a:	4b17      	ldr	r3, [pc, #92]	; (8001ee8 <HAL_RCC_OscConfig+0x93c>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a16      	ldr	r2, [pc, #88]	; (8001ee8 <HAL_RCC_OscConfig+0x93c>)
 8001e90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e94:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e96:	f7fe f9f1 	bl	800027c <HAL_GetTick>
 8001e9a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e9e:	e009      	b.n	8001eb4 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ea0:	f7fe f9ec 	bl	800027c <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	2b64      	cmp	r3, #100	; 0x64
 8001eae:	d901      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e3b1      	b.n	8002618 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ee8 <HAL_RCC_OscConfig+0x93c>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d0ef      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ec0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ec4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d10d      	bne.n	8001eec <HAL_RCC_OscConfig+0x940>
 8001ed0:	4b03      	ldr	r3, [pc, #12]	; (8001ee0 <HAL_RCC_OscConfig+0x934>)
 8001ed2:	6a1b      	ldr	r3, [r3, #32]
 8001ed4:	4a02      	ldr	r2, [pc, #8]	; (8001ee0 <HAL_RCC_OscConfig+0x934>)
 8001ed6:	f043 0301 	orr.w	r3, r3, #1
 8001eda:	6213      	str	r3, [r2, #32]
 8001edc:	e03c      	b.n	8001f58 <HAL_RCC_OscConfig+0x9ac>
 8001ede:	bf00      	nop
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	10908120 	.word	0x10908120
 8001ee8:	40007000 	.word	0x40007000
 8001eec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ef0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d10c      	bne.n	8001f16 <HAL_RCC_OscConfig+0x96a>
 8001efc:	4bc1      	ldr	r3, [pc, #772]	; (8002204 <HAL_RCC_OscConfig+0xc58>)
 8001efe:	6a1b      	ldr	r3, [r3, #32]
 8001f00:	4ac0      	ldr	r2, [pc, #768]	; (8002204 <HAL_RCC_OscConfig+0xc58>)
 8001f02:	f023 0301 	bic.w	r3, r3, #1
 8001f06:	6213      	str	r3, [r2, #32]
 8001f08:	4bbe      	ldr	r3, [pc, #760]	; (8002204 <HAL_RCC_OscConfig+0xc58>)
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	4abd      	ldr	r2, [pc, #756]	; (8002204 <HAL_RCC_OscConfig+0xc58>)
 8001f0e:	f023 0304 	bic.w	r3, r3, #4
 8001f12:	6213      	str	r3, [r2, #32]
 8001f14:	e020      	b.n	8001f58 <HAL_RCC_OscConfig+0x9ac>
 8001f16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	2b05      	cmp	r3, #5
 8001f24:	d10c      	bne.n	8001f40 <HAL_RCC_OscConfig+0x994>
 8001f26:	4bb7      	ldr	r3, [pc, #732]	; (8002204 <HAL_RCC_OscConfig+0xc58>)
 8001f28:	6a1b      	ldr	r3, [r3, #32]
 8001f2a:	4ab6      	ldr	r2, [pc, #728]	; (8002204 <HAL_RCC_OscConfig+0xc58>)
 8001f2c:	f043 0304 	orr.w	r3, r3, #4
 8001f30:	6213      	str	r3, [r2, #32]
 8001f32:	4bb4      	ldr	r3, [pc, #720]	; (8002204 <HAL_RCC_OscConfig+0xc58>)
 8001f34:	6a1b      	ldr	r3, [r3, #32]
 8001f36:	4ab3      	ldr	r2, [pc, #716]	; (8002204 <HAL_RCC_OscConfig+0xc58>)
 8001f38:	f043 0301 	orr.w	r3, r3, #1
 8001f3c:	6213      	str	r3, [r2, #32]
 8001f3e:	e00b      	b.n	8001f58 <HAL_RCC_OscConfig+0x9ac>
 8001f40:	4bb0      	ldr	r3, [pc, #704]	; (8002204 <HAL_RCC_OscConfig+0xc58>)
 8001f42:	6a1b      	ldr	r3, [r3, #32]
 8001f44:	4aaf      	ldr	r2, [pc, #700]	; (8002204 <HAL_RCC_OscConfig+0xc58>)
 8001f46:	f023 0301 	bic.w	r3, r3, #1
 8001f4a:	6213      	str	r3, [r2, #32]
 8001f4c:	4bad      	ldr	r3, [pc, #692]	; (8002204 <HAL_RCC_OscConfig+0xc58>)
 8001f4e:	6a1b      	ldr	r3, [r3, #32]
 8001f50:	4aac      	ldr	r2, [pc, #688]	; (8002204 <HAL_RCC_OscConfig+0xc58>)
 8001f52:	f023 0304 	bic.w	r3, r3, #4
 8001f56:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f5c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	f000 8081 	beq.w	800206c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f6a:	f7fe f987 	bl	800027c <HAL_GetTick>
 8001f6e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f72:	e00b      	b.n	8001f8c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f74:	f7fe f982 	bl	800027c <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d901      	bls.n	8001f8c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e345      	b.n	8002618 <HAL_RCC_OscConfig+0x106c>
 8001f8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f90:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001f94:	2202      	movs	r2, #2
 8001f96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f9c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	fa93 f2a3 	rbit	r2, r3
 8001fa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001faa:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fb4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001fb8:	2202      	movs	r2, #2
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fc0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	fa93 f2a3 	rbit	r2, r3
 8001fca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fce:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001fd2:	601a      	str	r2, [r3, #0]
  return result;
 8001fd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fd8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001fdc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fde:	fab3 f383 	clz	r3, r3
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	095b      	lsrs	r3, r3, #5
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	f043 0302 	orr.w	r3, r3, #2
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d102      	bne.n	8001ff8 <HAL_RCC_OscConfig+0xa4c>
 8001ff2:	4b84      	ldr	r3, [pc, #528]	; (8002204 <HAL_RCC_OscConfig+0xc58>)
 8001ff4:	6a1b      	ldr	r3, [r3, #32]
 8001ff6:	e013      	b.n	8002020 <HAL_RCC_OscConfig+0xa74>
 8001ff8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ffc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002000:	2202      	movs	r2, #2
 8002002:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002004:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002008:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	fa93 f2a3 	rbit	r2, r3
 8002012:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002016:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	4b79      	ldr	r3, [pc, #484]	; (8002204 <HAL_RCC_OscConfig+0xc58>)
 800201e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002020:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002024:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002028:	2102      	movs	r1, #2
 800202a:	6011      	str	r1, [r2, #0]
 800202c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002030:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002034:	6812      	ldr	r2, [r2, #0]
 8002036:	fa92 f1a2 	rbit	r1, r2
 800203a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800203e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002042:	6011      	str	r1, [r2, #0]
  return result;
 8002044:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002048:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800204c:	6812      	ldr	r2, [r2, #0]
 800204e:	fab2 f282 	clz	r2, r2
 8002052:	b2d2      	uxtb	r2, r2
 8002054:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002058:	b2d2      	uxtb	r2, r2
 800205a:	f002 021f 	and.w	r2, r2, #31
 800205e:	2101      	movs	r1, #1
 8002060:	fa01 f202 	lsl.w	r2, r1, r2
 8002064:	4013      	ands	r3, r2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d084      	beq.n	8001f74 <HAL_RCC_OscConfig+0x9c8>
 800206a:	e07f      	b.n	800216c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800206c:	f7fe f906 	bl	800027c <HAL_GetTick>
 8002070:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002074:	e00b      	b.n	800208e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002076:	f7fe f901 	bl	800027c <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	f241 3288 	movw	r2, #5000	; 0x1388
 8002086:	4293      	cmp	r3, r2
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e2c4      	b.n	8002618 <HAL_RCC_OscConfig+0x106c>
 800208e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002092:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002096:	2202      	movs	r2, #2
 8002098:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800209e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	fa93 f2a3 	rbit	r2, r3
 80020a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ac:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80020b0:	601a      	str	r2, [r3, #0]
 80020b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020b6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80020ba:	2202      	movs	r2, #2
 80020bc:	601a      	str	r2, [r3, #0]
 80020be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020c2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	fa93 f2a3 	rbit	r2, r3
 80020cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020d0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80020d4:	601a      	str	r2, [r3, #0]
  return result;
 80020d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020da:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80020de:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020e0:	fab3 f383 	clz	r3, r3
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	095b      	lsrs	r3, r3, #5
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	f043 0302 	orr.w	r3, r3, #2
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d102      	bne.n	80020fa <HAL_RCC_OscConfig+0xb4e>
 80020f4:	4b43      	ldr	r3, [pc, #268]	; (8002204 <HAL_RCC_OscConfig+0xc58>)
 80020f6:	6a1b      	ldr	r3, [r3, #32]
 80020f8:	e013      	b.n	8002122 <HAL_RCC_OscConfig+0xb76>
 80020fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020fe:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002102:	2202      	movs	r2, #2
 8002104:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002106:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800210a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	fa93 f2a3 	rbit	r2, r3
 8002114:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002118:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800211c:	601a      	str	r2, [r3, #0]
 800211e:	4b39      	ldr	r3, [pc, #228]	; (8002204 <HAL_RCC_OscConfig+0xc58>)
 8002120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002122:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002126:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800212a:	2102      	movs	r1, #2
 800212c:	6011      	str	r1, [r2, #0]
 800212e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002132:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002136:	6812      	ldr	r2, [r2, #0]
 8002138:	fa92 f1a2 	rbit	r1, r2
 800213c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002140:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002144:	6011      	str	r1, [r2, #0]
  return result;
 8002146:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800214a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800214e:	6812      	ldr	r2, [r2, #0]
 8002150:	fab2 f282 	clz	r2, r2
 8002154:	b2d2      	uxtb	r2, r2
 8002156:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800215a:	b2d2      	uxtb	r2, r2
 800215c:	f002 021f 	and.w	r2, r2, #31
 8002160:	2101      	movs	r1, #1
 8002162:	fa01 f202 	lsl.w	r2, r1, r2
 8002166:	4013      	ands	r3, r2
 8002168:	2b00      	cmp	r3, #0
 800216a:	d184      	bne.n	8002076 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800216c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002170:	2b01      	cmp	r3, #1
 8002172:	d105      	bne.n	8002180 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002174:	4b23      	ldr	r3, [pc, #140]	; (8002204 <HAL_RCC_OscConfig+0xc58>)
 8002176:	69db      	ldr	r3, [r3, #28]
 8002178:	4a22      	ldr	r2, [pc, #136]	; (8002204 <HAL_RCC_OscConfig+0xc58>)
 800217a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800217e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002180:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002184:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	69db      	ldr	r3, [r3, #28]
 800218c:	2b00      	cmp	r3, #0
 800218e:	f000 8242 	beq.w	8002616 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002192:	4b1c      	ldr	r3, [pc, #112]	; (8002204 <HAL_RCC_OscConfig+0xc58>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f003 030c 	and.w	r3, r3, #12
 800219a:	2b08      	cmp	r3, #8
 800219c:	f000 8213 	beq.w	80025c6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	69db      	ldr	r3, [r3, #28]
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	f040 8162 	bne.w	8002476 <HAL_RCC_OscConfig+0xeca>
 80021b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021b6:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80021ba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80021be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021c4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	fa93 f2a3 	rbit	r2, r3
 80021ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021d2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80021d6:	601a      	str	r2, [r3, #0]
  return result;
 80021d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021dc:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80021e0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021e2:	fab3 f383 	clz	r3, r3
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80021ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	461a      	mov	r2, r3
 80021f4:	2300      	movs	r3, #0
 80021f6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f8:	f7fe f840 	bl	800027c <HAL_GetTick>
 80021fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002200:	e00c      	b.n	800221c <HAL_RCC_OscConfig+0xc70>
 8002202:	bf00      	nop
 8002204:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002208:	f7fe f838 	bl	800027c <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	2b02      	cmp	r3, #2
 8002216:	d901      	bls.n	800221c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e1fd      	b.n	8002618 <HAL_RCC_OscConfig+0x106c>
 800221c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002220:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002224:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002228:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800222e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	fa93 f2a3 	rbit	r2, r3
 8002238:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800223c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002240:	601a      	str	r2, [r3, #0]
  return result;
 8002242:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002246:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800224a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800224c:	fab3 f383 	clz	r3, r3
 8002250:	b2db      	uxtb	r3, r3
 8002252:	095b      	lsrs	r3, r3, #5
 8002254:	b2db      	uxtb	r3, r3
 8002256:	f043 0301 	orr.w	r3, r3, #1
 800225a:	b2db      	uxtb	r3, r3
 800225c:	2b01      	cmp	r3, #1
 800225e:	d102      	bne.n	8002266 <HAL_RCC_OscConfig+0xcba>
 8002260:	4bb0      	ldr	r3, [pc, #704]	; (8002524 <HAL_RCC_OscConfig+0xf78>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	e027      	b.n	80022b6 <HAL_RCC_OscConfig+0xd0a>
 8002266:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800226a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800226e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002272:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002274:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002278:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	fa93 f2a3 	rbit	r2, r3
 8002282:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002286:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002290:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002294:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002298:	601a      	str	r2, [r3, #0]
 800229a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800229e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	fa93 f2a3 	rbit	r2, r3
 80022a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ac:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	4b9c      	ldr	r3, [pc, #624]	; (8002524 <HAL_RCC_OscConfig+0xf78>)
 80022b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022ba:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80022be:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80022c2:	6011      	str	r1, [r2, #0]
 80022c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022c8:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80022cc:	6812      	ldr	r2, [r2, #0]
 80022ce:	fa92 f1a2 	rbit	r1, r2
 80022d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022d6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80022da:	6011      	str	r1, [r2, #0]
  return result;
 80022dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022e0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80022e4:	6812      	ldr	r2, [r2, #0]
 80022e6:	fab2 f282 	clz	r2, r2
 80022ea:	b2d2      	uxtb	r2, r2
 80022ec:	f042 0220 	orr.w	r2, r2, #32
 80022f0:	b2d2      	uxtb	r2, r2
 80022f2:	f002 021f 	and.w	r2, r2, #31
 80022f6:	2101      	movs	r1, #1
 80022f8:	fa01 f202 	lsl.w	r2, r1, r2
 80022fc:	4013      	ands	r3, r2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d182      	bne.n	8002208 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002302:	4b88      	ldr	r3, [pc, #544]	; (8002524 <HAL_RCC_OscConfig+0xf78>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800230a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800230e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002316:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800231a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6a1b      	ldr	r3, [r3, #32]
 8002322:	430b      	orrs	r3, r1
 8002324:	497f      	ldr	r1, [pc, #508]	; (8002524 <HAL_RCC_OscConfig+0xf78>)
 8002326:	4313      	orrs	r3, r2
 8002328:	604b      	str	r3, [r1, #4]
 800232a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800232e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002332:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002336:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002338:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800233c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	fa93 f2a3 	rbit	r2, r3
 8002346:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800234a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800234e:	601a      	str	r2, [r3, #0]
  return result;
 8002350:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002354:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002358:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800235a:	fab3 f383 	clz	r3, r3
 800235e:	b2db      	uxtb	r3, r3
 8002360:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002364:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	461a      	mov	r2, r3
 800236c:	2301      	movs	r3, #1
 800236e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002370:	f7fd ff84 	bl	800027c <HAL_GetTick>
 8002374:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002378:	e009      	b.n	800238e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800237a:	f7fd ff7f 	bl	800027c <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e144      	b.n	8002618 <HAL_RCC_OscConfig+0x106c>
 800238e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002392:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002396:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800239a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023a0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	fa93 f2a3 	rbit	r2, r3
 80023aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ae:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80023b2:	601a      	str	r2, [r3, #0]
  return result;
 80023b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80023bc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023be:	fab3 f383 	clz	r3, r3
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	095b      	lsrs	r3, r3, #5
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	f043 0301 	orr.w	r3, r3, #1
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d102      	bne.n	80023d8 <HAL_RCC_OscConfig+0xe2c>
 80023d2:	4b54      	ldr	r3, [pc, #336]	; (8002524 <HAL_RCC_OscConfig+0xf78>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	e027      	b.n	8002428 <HAL_RCC_OscConfig+0xe7c>
 80023d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023dc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80023e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ea:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	fa93 f2a3 	rbit	r2, r3
 80023f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023f8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80023fc:	601a      	str	r2, [r3, #0]
 80023fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002402:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002406:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002410:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	fa93 f2a3 	rbit	r2, r3
 800241a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800241e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	4b3f      	ldr	r3, [pc, #252]	; (8002524 <HAL_RCC_OscConfig+0xf78>)
 8002426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002428:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800242c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002430:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002434:	6011      	str	r1, [r2, #0]
 8002436:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800243a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800243e:	6812      	ldr	r2, [r2, #0]
 8002440:	fa92 f1a2 	rbit	r1, r2
 8002444:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002448:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800244c:	6011      	str	r1, [r2, #0]
  return result;
 800244e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002452:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002456:	6812      	ldr	r2, [r2, #0]
 8002458:	fab2 f282 	clz	r2, r2
 800245c:	b2d2      	uxtb	r2, r2
 800245e:	f042 0220 	orr.w	r2, r2, #32
 8002462:	b2d2      	uxtb	r2, r2
 8002464:	f002 021f 	and.w	r2, r2, #31
 8002468:	2101      	movs	r1, #1
 800246a:	fa01 f202 	lsl.w	r2, r1, r2
 800246e:	4013      	ands	r3, r2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d082      	beq.n	800237a <HAL_RCC_OscConfig+0xdce>
 8002474:	e0cf      	b.n	8002616 <HAL_RCC_OscConfig+0x106a>
 8002476:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800247a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800247e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002482:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002484:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002488:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	fa93 f2a3 	rbit	r2, r3
 8002492:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002496:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800249a:	601a      	str	r2, [r3, #0]
  return result;
 800249c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024a0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80024a4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024a6:	fab3 f383 	clz	r3, r3
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024b0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	461a      	mov	r2, r3
 80024b8:	2300      	movs	r3, #0
 80024ba:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024bc:	f7fd fede 	bl	800027c <HAL_GetTick>
 80024c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024c4:	e009      	b.n	80024da <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024c6:	f7fd fed9 	bl	800027c <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e09e      	b.n	8002618 <HAL_RCC_OscConfig+0x106c>
 80024da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024de:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80024e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ec:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	fa93 f2a3 	rbit	r2, r3
 80024f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024fa:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80024fe:	601a      	str	r2, [r3, #0]
  return result;
 8002500:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002504:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002508:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800250a:	fab3 f383 	clz	r3, r3
 800250e:	b2db      	uxtb	r3, r3
 8002510:	095b      	lsrs	r3, r3, #5
 8002512:	b2db      	uxtb	r3, r3
 8002514:	f043 0301 	orr.w	r3, r3, #1
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b01      	cmp	r3, #1
 800251c:	d104      	bne.n	8002528 <HAL_RCC_OscConfig+0xf7c>
 800251e:	4b01      	ldr	r3, [pc, #4]	; (8002524 <HAL_RCC_OscConfig+0xf78>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	e029      	b.n	8002578 <HAL_RCC_OscConfig+0xfcc>
 8002524:	40021000 	.word	0x40021000
 8002528:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800252c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002530:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002534:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002536:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800253a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	fa93 f2a3 	rbit	r2, r3
 8002544:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002548:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800254c:	601a      	str	r2, [r3, #0]
 800254e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002552:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002556:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002560:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	fa93 f2a3 	rbit	r2, r3
 800256a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800256e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	4b2b      	ldr	r3, [pc, #172]	; (8002624 <HAL_RCC_OscConfig+0x1078>)
 8002576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002578:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800257c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002580:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002584:	6011      	str	r1, [r2, #0]
 8002586:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800258a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800258e:	6812      	ldr	r2, [r2, #0]
 8002590:	fa92 f1a2 	rbit	r1, r2
 8002594:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002598:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800259c:	6011      	str	r1, [r2, #0]
  return result;
 800259e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025a2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80025a6:	6812      	ldr	r2, [r2, #0]
 80025a8:	fab2 f282 	clz	r2, r2
 80025ac:	b2d2      	uxtb	r2, r2
 80025ae:	f042 0220 	orr.w	r2, r2, #32
 80025b2:	b2d2      	uxtb	r2, r2
 80025b4:	f002 021f 	and.w	r2, r2, #31
 80025b8:	2101      	movs	r1, #1
 80025ba:	fa01 f202 	lsl.w	r2, r1, r2
 80025be:	4013      	ands	r3, r2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d180      	bne.n	80024c6 <HAL_RCC_OscConfig+0xf1a>
 80025c4:	e027      	b.n	8002616 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	69db      	ldr	r3, [r3, #28]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d101      	bne.n	80025da <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e01e      	b.n	8002618 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025da:	4b12      	ldr	r3, [pc, #72]	; (8002624 <HAL_RCC_OscConfig+0x1078>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80025e2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80025e6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	6a1b      	ldr	r3, [r3, #32]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d10b      	bne.n	8002612 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80025fa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80025fe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002602:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002606:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800260e:	429a      	cmp	r2, r3
 8002610:	d001      	beq.n	8002616 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e000      	b.n	8002618 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	40021000 	.word	0x40021000

08002628 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b09e      	sub	sp, #120	; 0x78
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002632:	2300      	movs	r3, #0
 8002634:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d101      	bne.n	8002640 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e162      	b.n	8002906 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002640:	4b90      	ldr	r3, [pc, #576]	; (8002884 <HAL_RCC_ClockConfig+0x25c>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0307 	and.w	r3, r3, #7
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	429a      	cmp	r2, r3
 800264c:	d910      	bls.n	8002670 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800264e:	4b8d      	ldr	r3, [pc, #564]	; (8002884 <HAL_RCC_ClockConfig+0x25c>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f023 0207 	bic.w	r2, r3, #7
 8002656:	498b      	ldr	r1, [pc, #556]	; (8002884 <HAL_RCC_ClockConfig+0x25c>)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	4313      	orrs	r3, r2
 800265c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800265e:	4b89      	ldr	r3, [pc, #548]	; (8002884 <HAL_RCC_ClockConfig+0x25c>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0307 	and.w	r3, r3, #7
 8002666:	683a      	ldr	r2, [r7, #0]
 8002668:	429a      	cmp	r2, r3
 800266a:	d001      	beq.n	8002670 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e14a      	b.n	8002906 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0302 	and.w	r3, r3, #2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d008      	beq.n	800268e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800267c:	4b82      	ldr	r3, [pc, #520]	; (8002888 <HAL_RCC_ClockConfig+0x260>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	497f      	ldr	r1, [pc, #508]	; (8002888 <HAL_RCC_ClockConfig+0x260>)
 800268a:	4313      	orrs	r3, r2
 800268c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	2b00      	cmp	r3, #0
 8002698:	f000 80dc 	beq.w	8002854 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d13c      	bne.n	800271e <HAL_RCC_ClockConfig+0xf6>
 80026a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026a8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026ac:	fa93 f3a3 	rbit	r3, r3
 80026b0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80026b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026b4:	fab3 f383 	clz	r3, r3
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	095b      	lsrs	r3, r3, #5
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	f043 0301 	orr.w	r3, r3, #1
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d102      	bne.n	80026ce <HAL_RCC_ClockConfig+0xa6>
 80026c8:	4b6f      	ldr	r3, [pc, #444]	; (8002888 <HAL_RCC_ClockConfig+0x260>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	e00f      	b.n	80026ee <HAL_RCC_ClockConfig+0xc6>
 80026ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026d2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026d6:	fa93 f3a3 	rbit	r3, r3
 80026da:	667b      	str	r3, [r7, #100]	; 0x64
 80026dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026e0:	663b      	str	r3, [r7, #96]	; 0x60
 80026e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026e4:	fa93 f3a3 	rbit	r3, r3
 80026e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80026ea:	4b67      	ldr	r3, [pc, #412]	; (8002888 <HAL_RCC_ClockConfig+0x260>)
 80026ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026f2:	65ba      	str	r2, [r7, #88]	; 0x58
 80026f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80026f6:	fa92 f2a2 	rbit	r2, r2
 80026fa:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80026fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80026fe:	fab2 f282 	clz	r2, r2
 8002702:	b2d2      	uxtb	r2, r2
 8002704:	f042 0220 	orr.w	r2, r2, #32
 8002708:	b2d2      	uxtb	r2, r2
 800270a:	f002 021f 	and.w	r2, r2, #31
 800270e:	2101      	movs	r1, #1
 8002710:	fa01 f202 	lsl.w	r2, r1, r2
 8002714:	4013      	ands	r3, r2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d17b      	bne.n	8002812 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e0f3      	b.n	8002906 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	2b02      	cmp	r3, #2
 8002724:	d13c      	bne.n	80027a0 <HAL_RCC_ClockConfig+0x178>
 8002726:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800272a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800272e:	fa93 f3a3 	rbit	r3, r3
 8002732:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002734:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002736:	fab3 f383 	clz	r3, r3
 800273a:	b2db      	uxtb	r3, r3
 800273c:	095b      	lsrs	r3, r3, #5
 800273e:	b2db      	uxtb	r3, r3
 8002740:	f043 0301 	orr.w	r3, r3, #1
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b01      	cmp	r3, #1
 8002748:	d102      	bne.n	8002750 <HAL_RCC_ClockConfig+0x128>
 800274a:	4b4f      	ldr	r3, [pc, #316]	; (8002888 <HAL_RCC_ClockConfig+0x260>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	e00f      	b.n	8002770 <HAL_RCC_ClockConfig+0x148>
 8002750:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002754:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002756:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002758:	fa93 f3a3 	rbit	r3, r3
 800275c:	647b      	str	r3, [r7, #68]	; 0x44
 800275e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002762:	643b      	str	r3, [r7, #64]	; 0x40
 8002764:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002766:	fa93 f3a3 	rbit	r3, r3
 800276a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800276c:	4b46      	ldr	r3, [pc, #280]	; (8002888 <HAL_RCC_ClockConfig+0x260>)
 800276e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002770:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002774:	63ba      	str	r2, [r7, #56]	; 0x38
 8002776:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002778:	fa92 f2a2 	rbit	r2, r2
 800277c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800277e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002780:	fab2 f282 	clz	r2, r2
 8002784:	b2d2      	uxtb	r2, r2
 8002786:	f042 0220 	orr.w	r2, r2, #32
 800278a:	b2d2      	uxtb	r2, r2
 800278c:	f002 021f 	and.w	r2, r2, #31
 8002790:	2101      	movs	r1, #1
 8002792:	fa01 f202 	lsl.w	r2, r1, r2
 8002796:	4013      	ands	r3, r2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d13a      	bne.n	8002812 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e0b2      	b.n	8002906 <HAL_RCC_ClockConfig+0x2de>
 80027a0:	2302      	movs	r3, #2
 80027a2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027a6:	fa93 f3a3 	rbit	r3, r3
 80027aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80027ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ae:	fab3 f383 	clz	r3, r3
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	095b      	lsrs	r3, r3, #5
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	f043 0301 	orr.w	r3, r3, #1
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d102      	bne.n	80027c8 <HAL_RCC_ClockConfig+0x1a0>
 80027c2:	4b31      	ldr	r3, [pc, #196]	; (8002888 <HAL_RCC_ClockConfig+0x260>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	e00d      	b.n	80027e4 <HAL_RCC_ClockConfig+0x1bc>
 80027c8:	2302      	movs	r3, #2
 80027ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ce:	fa93 f3a3 	rbit	r3, r3
 80027d2:	627b      	str	r3, [r7, #36]	; 0x24
 80027d4:	2302      	movs	r3, #2
 80027d6:	623b      	str	r3, [r7, #32]
 80027d8:	6a3b      	ldr	r3, [r7, #32]
 80027da:	fa93 f3a3 	rbit	r3, r3
 80027de:	61fb      	str	r3, [r7, #28]
 80027e0:	4b29      	ldr	r3, [pc, #164]	; (8002888 <HAL_RCC_ClockConfig+0x260>)
 80027e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e4:	2202      	movs	r2, #2
 80027e6:	61ba      	str	r2, [r7, #24]
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	fa92 f2a2 	rbit	r2, r2
 80027ee:	617a      	str	r2, [r7, #20]
  return result;
 80027f0:	697a      	ldr	r2, [r7, #20]
 80027f2:	fab2 f282 	clz	r2, r2
 80027f6:	b2d2      	uxtb	r2, r2
 80027f8:	f042 0220 	orr.w	r2, r2, #32
 80027fc:	b2d2      	uxtb	r2, r2
 80027fe:	f002 021f 	and.w	r2, r2, #31
 8002802:	2101      	movs	r1, #1
 8002804:	fa01 f202 	lsl.w	r2, r1, r2
 8002808:	4013      	ands	r3, r2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e079      	b.n	8002906 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002812:	4b1d      	ldr	r3, [pc, #116]	; (8002888 <HAL_RCC_ClockConfig+0x260>)
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f023 0203 	bic.w	r2, r3, #3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	491a      	ldr	r1, [pc, #104]	; (8002888 <HAL_RCC_ClockConfig+0x260>)
 8002820:	4313      	orrs	r3, r2
 8002822:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002824:	f7fd fd2a 	bl	800027c <HAL_GetTick>
 8002828:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800282a:	e00a      	b.n	8002842 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800282c:	f7fd fd26 	bl	800027c <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	f241 3288 	movw	r2, #5000	; 0x1388
 800283a:	4293      	cmp	r3, r2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e061      	b.n	8002906 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002842:	4b11      	ldr	r3, [pc, #68]	; (8002888 <HAL_RCC_ClockConfig+0x260>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f003 020c 	and.w	r2, r3, #12
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	429a      	cmp	r2, r3
 8002852:	d1eb      	bne.n	800282c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002854:	4b0b      	ldr	r3, [pc, #44]	; (8002884 <HAL_RCC_ClockConfig+0x25c>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0307 	and.w	r3, r3, #7
 800285c:	683a      	ldr	r2, [r7, #0]
 800285e:	429a      	cmp	r2, r3
 8002860:	d214      	bcs.n	800288c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002862:	4b08      	ldr	r3, [pc, #32]	; (8002884 <HAL_RCC_ClockConfig+0x25c>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f023 0207 	bic.w	r2, r3, #7
 800286a:	4906      	ldr	r1, [pc, #24]	; (8002884 <HAL_RCC_ClockConfig+0x25c>)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	4313      	orrs	r3, r2
 8002870:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002872:	4b04      	ldr	r3, [pc, #16]	; (8002884 <HAL_RCC_ClockConfig+0x25c>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0307 	and.w	r3, r3, #7
 800287a:	683a      	ldr	r2, [r7, #0]
 800287c:	429a      	cmp	r2, r3
 800287e:	d005      	beq.n	800288c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e040      	b.n	8002906 <HAL_RCC_ClockConfig+0x2de>
 8002884:	40022000 	.word	0x40022000
 8002888:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0304 	and.w	r3, r3, #4
 8002894:	2b00      	cmp	r3, #0
 8002896:	d008      	beq.n	80028aa <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002898:	4b1d      	ldr	r3, [pc, #116]	; (8002910 <HAL_RCC_ClockConfig+0x2e8>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	491a      	ldr	r1, [pc, #104]	; (8002910 <HAL_RCC_ClockConfig+0x2e8>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0308 	and.w	r3, r3, #8
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d009      	beq.n	80028ca <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028b6:	4b16      	ldr	r3, [pc, #88]	; (8002910 <HAL_RCC_ClockConfig+0x2e8>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	4912      	ldr	r1, [pc, #72]	; (8002910 <HAL_RCC_ClockConfig+0x2e8>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80028ca:	f000 f829 	bl	8002920 <HAL_RCC_GetSysClockFreq>
 80028ce:	4601      	mov	r1, r0
 80028d0:	4b0f      	ldr	r3, [pc, #60]	; (8002910 <HAL_RCC_ClockConfig+0x2e8>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028d8:	22f0      	movs	r2, #240	; 0xf0
 80028da:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	fa92 f2a2 	rbit	r2, r2
 80028e2:	60fa      	str	r2, [r7, #12]
  return result;
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	fab2 f282 	clz	r2, r2
 80028ea:	b2d2      	uxtb	r2, r2
 80028ec:	40d3      	lsrs	r3, r2
 80028ee:	4a09      	ldr	r2, [pc, #36]	; (8002914 <HAL_RCC_ClockConfig+0x2ec>)
 80028f0:	5cd3      	ldrb	r3, [r2, r3]
 80028f2:	fa21 f303 	lsr.w	r3, r1, r3
 80028f6:	4a08      	ldr	r2, [pc, #32]	; (8002918 <HAL_RCC_ClockConfig+0x2f0>)
 80028f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80028fa:	4b08      	ldr	r3, [pc, #32]	; (800291c <HAL_RCC_ClockConfig+0x2f4>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4618      	mov	r0, r3
 8002900:	f7fd fc78 	bl	80001f4 <HAL_InitTick>
  
  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3778      	adds	r7, #120	; 0x78
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	40021000 	.word	0x40021000
 8002914:	0800413c 	.word	0x0800413c
 8002918:	20000018 	.word	0x20000018
 800291c:	20000000 	.word	0x20000000

08002920 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002920:	b480      	push	{r7}
 8002922:	b08b      	sub	sp, #44	; 0x2c
 8002924:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002926:	2300      	movs	r3, #0
 8002928:	61fb      	str	r3, [r7, #28]
 800292a:	2300      	movs	r3, #0
 800292c:	61bb      	str	r3, [r7, #24]
 800292e:	2300      	movs	r3, #0
 8002930:	627b      	str	r3, [r7, #36]	; 0x24
 8002932:	2300      	movs	r3, #0
 8002934:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002936:	2300      	movs	r3, #0
 8002938:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800293a:	4b29      	ldr	r3, [pc, #164]	; (80029e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	f003 030c 	and.w	r3, r3, #12
 8002946:	2b04      	cmp	r3, #4
 8002948:	d002      	beq.n	8002950 <HAL_RCC_GetSysClockFreq+0x30>
 800294a:	2b08      	cmp	r3, #8
 800294c:	d003      	beq.n	8002956 <HAL_RCC_GetSysClockFreq+0x36>
 800294e:	e03c      	b.n	80029ca <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002950:	4b24      	ldr	r3, [pc, #144]	; (80029e4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002952:	623b      	str	r3, [r7, #32]
      break;
 8002954:	e03c      	b.n	80029d0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800295c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002960:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002962:	68ba      	ldr	r2, [r7, #8]
 8002964:	fa92 f2a2 	rbit	r2, r2
 8002968:	607a      	str	r2, [r7, #4]
  return result;
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	fab2 f282 	clz	r2, r2
 8002970:	b2d2      	uxtb	r2, r2
 8002972:	40d3      	lsrs	r3, r2
 8002974:	4a1c      	ldr	r2, [pc, #112]	; (80029e8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002976:	5cd3      	ldrb	r3, [r2, r3]
 8002978:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800297a:	4b19      	ldr	r3, [pc, #100]	; (80029e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800297c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297e:	f003 030f 	and.w	r3, r3, #15
 8002982:	220f      	movs	r2, #15
 8002984:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002986:	693a      	ldr	r2, [r7, #16]
 8002988:	fa92 f2a2 	rbit	r2, r2
 800298c:	60fa      	str	r2, [r7, #12]
  return result;
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	fab2 f282 	clz	r2, r2
 8002994:	b2d2      	uxtb	r2, r2
 8002996:	40d3      	lsrs	r3, r2
 8002998:	4a14      	ldr	r2, [pc, #80]	; (80029ec <HAL_RCC_GetSysClockFreq+0xcc>)
 800299a:	5cd3      	ldrb	r3, [r2, r3]
 800299c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d008      	beq.n	80029ba <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80029a8:	4a0e      	ldr	r2, [pc, #56]	; (80029e4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	fb02 f303 	mul.w	r3, r2, r3
 80029b6:	627b      	str	r3, [r7, #36]	; 0x24
 80029b8:	e004      	b.n	80029c4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	4a0c      	ldr	r2, [pc, #48]	; (80029f0 <HAL_RCC_GetSysClockFreq+0xd0>)
 80029be:	fb02 f303 	mul.w	r3, r2, r3
 80029c2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80029c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c6:	623b      	str	r3, [r7, #32]
      break;
 80029c8:	e002      	b.n	80029d0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029ca:	4b06      	ldr	r3, [pc, #24]	; (80029e4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80029cc:	623b      	str	r3, [r7, #32]
      break;
 80029ce:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029d0:	6a3b      	ldr	r3, [r7, #32]
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	372c      	adds	r7, #44	; 0x2c
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	40021000 	.word	0x40021000
 80029e4:	007a1200 	.word	0x007a1200
 80029e8:	0800411c 	.word	0x0800411c
 80029ec:	0800412c 	.word	0x0800412c
 80029f0:	003d0900 	.word	0x003d0900

080029f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029f8:	4b03      	ldr	r3, [pc, #12]	; (8002a08 <HAL_RCC_GetHCLKFreq+0x14>)
 80029fa:	681b      	ldr	r3, [r3, #0]
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	20000018 	.word	0x20000018

08002a0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002a12:	f7ff ffef 	bl	80029f4 <HAL_RCC_GetHCLKFreq>
 8002a16:	4601      	mov	r1, r0
 8002a18:	4b0b      	ldr	r3, [pc, #44]	; (8002a48 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002a20:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002a24:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	fa92 f2a2 	rbit	r2, r2
 8002a2c:	603a      	str	r2, [r7, #0]
  return result;
 8002a2e:	683a      	ldr	r2, [r7, #0]
 8002a30:	fab2 f282 	clz	r2, r2
 8002a34:	b2d2      	uxtb	r2, r2
 8002a36:	40d3      	lsrs	r3, r2
 8002a38:	4a04      	ldr	r2, [pc, #16]	; (8002a4c <HAL_RCC_GetPCLK1Freq+0x40>)
 8002a3a:	5cd3      	ldrb	r3, [r2, r3]
 8002a3c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002a40:	4618      	mov	r0, r3
 8002a42:	3708      	adds	r7, #8
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	0800414c 	.word	0x0800414c

08002a50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002a56:	f7ff ffcd 	bl	80029f4 <HAL_RCC_GetHCLKFreq>
 8002a5a:	4601      	mov	r1, r0
 8002a5c:	4b0b      	ldr	r3, [pc, #44]	; (8002a8c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002a64:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002a68:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	fa92 f2a2 	rbit	r2, r2
 8002a70:	603a      	str	r2, [r7, #0]
  return result;
 8002a72:	683a      	ldr	r2, [r7, #0]
 8002a74:	fab2 f282 	clz	r2, r2
 8002a78:	b2d2      	uxtb	r2, r2
 8002a7a:	40d3      	lsrs	r3, r2
 8002a7c:	4a04      	ldr	r2, [pc, #16]	; (8002a90 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002a7e:	5cd3      	ldrb	r3, [r2, r3]
 8002a80:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002a84:	4618      	mov	r0, r3
 8002a86:	3708      	adds	r7, #8
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	40021000 	.word	0x40021000
 8002a90:	0800414c 	.word	0x0800414c

08002a94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e040      	b.n	8002b28 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d106      	bne.n	8002abc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f001 f9b8 	bl	8003e2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2224      	movs	r2, #36	; 0x24
 8002ac0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f022 0201 	bic.w	r2, r2, #1
 8002ad0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 fbbe 	bl	8003254 <UART_SetConfig>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d101      	bne.n	8002ae2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e022      	b.n	8002b28 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d002      	beq.n	8002af0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 fce8 	bl	80034c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	685a      	ldr	r2, [r3, #4]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002afe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	689a      	ldr	r2, [r3, #8]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f042 0201 	orr.w	r2, r2, #1
 8002b1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f000 fd6f 	bl	8003604 <UART_CheckIdleState>
 8002b26:	4603      	mov	r3, r0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3708      	adds	r7, #8
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b08a      	sub	sp, #40	; 0x28
 8002b34:	af02      	add	r7, sp, #8
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	603b      	str	r3, [r7, #0]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b44:	2b20      	cmp	r3, #32
 8002b46:	f040 8082 	bne.w	8002c4e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d002      	beq.n	8002b56 <HAL_UART_Transmit+0x26>
 8002b50:	88fb      	ldrh	r3, [r7, #6]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e07a      	b.n	8002c50 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d101      	bne.n	8002b68 <HAL_UART_Transmit+0x38>
 8002b64:	2302      	movs	r3, #2
 8002b66:	e073      	b.n	8002c50 <HAL_UART_Transmit+0x120>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2221      	movs	r2, #33	; 0x21
 8002b7c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b7e:	f7fd fb7d 	bl	800027c <HAL_GetTick>
 8002b82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	88fa      	ldrh	r2, [r7, #6]
 8002b88:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	88fa      	ldrh	r2, [r7, #6]
 8002b90:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b9c:	d108      	bne.n	8002bb0 <HAL_UART_Transmit+0x80>
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d104      	bne.n	8002bb0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	61bb      	str	r3, [r7, #24]
 8002bae:	e003      	b.n	8002bb8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002bc0:	e02d      	b.n	8002c1e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	9300      	str	r3, [sp, #0]
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	2180      	movs	r1, #128	; 0x80
 8002bcc:	68f8      	ldr	r0, [r7, #12]
 8002bce:	f000 fd62 	bl	8003696 <UART_WaitOnFlagUntilTimeout>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e039      	b.n	8002c50 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d10b      	bne.n	8002bfa <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	881a      	ldrh	r2, [r3, #0]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bee:	b292      	uxth	r2, r2
 8002bf0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	3302      	adds	r3, #2
 8002bf6:	61bb      	str	r3, [r7, #24]
 8002bf8:	e008      	b.n	8002c0c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	781a      	ldrb	r2, [r3, #0]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	b292      	uxth	r2, r2
 8002c04:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	3301      	adds	r3, #1
 8002c0a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	3b01      	subs	r3, #1
 8002c16:	b29a      	uxth	r2, r3
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1cb      	bne.n	8002bc2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	9300      	str	r3, [sp, #0]
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	2200      	movs	r2, #0
 8002c32:	2140      	movs	r1, #64	; 0x40
 8002c34:	68f8      	ldr	r0, [r7, #12]
 8002c36:	f000 fd2e 	bl	8003696 <UART_WaitOnFlagUntilTimeout>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e005      	b.n	8002c50 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2220      	movs	r2, #32
 8002c48:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	e000      	b.n	8002c50 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002c4e:	2302      	movs	r3, #2
  }
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3720      	adds	r7, #32
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b0ba      	sub	sp, #232	; 0xe8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	69db      	ldr	r3, [r3, #28]
 8002c66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002c7e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002c82:	f640 030f 	movw	r3, #2063	; 0x80f
 8002c86:	4013      	ands	r3, r2
 8002c88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002c8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d115      	bne.n	8002cc0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002c94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c98:	f003 0320 	and.w	r3, r3, #32
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d00f      	beq.n	8002cc0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002ca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ca4:	f003 0320 	and.w	r3, r3, #32
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d009      	beq.n	8002cc0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	f000 82a3 	beq.w	80031fc <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	4798      	blx	r3
      }
      return;
 8002cbe:	e29d      	b.n	80031fc <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002cc0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	f000 8117 	beq.w	8002ef8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002cca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d106      	bne.n	8002ce4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002cd6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002cda:	4b85      	ldr	r3, [pc, #532]	; (8002ef0 <HAL_UART_IRQHandler+0x298>)
 8002cdc:	4013      	ands	r3, r2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f000 810a 	beq.w	8002ef8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002ce4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ce8:	f003 0301 	and.w	r3, r3, #1
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d011      	beq.n	8002d14 <HAL_UART_IRQHandler+0xbc>
 8002cf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d00b      	beq.n	8002d14 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2201      	movs	r2, #1
 8002d02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d0a:	f043 0201 	orr.w	r2, r3, #1
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002d14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d18:	f003 0302 	and.w	r3, r3, #2
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d011      	beq.n	8002d44 <HAL_UART_IRQHandler+0xec>
 8002d20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d24:	f003 0301 	and.w	r3, r3, #1
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00b      	beq.n	8002d44 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2202      	movs	r2, #2
 8002d32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d3a:	f043 0204 	orr.w	r2, r3, #4
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002d44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d48:	f003 0304 	and.w	r3, r3, #4
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d011      	beq.n	8002d74 <HAL_UART_IRQHandler+0x11c>
 8002d50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d54:	f003 0301 	and.w	r3, r3, #1
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d00b      	beq.n	8002d74 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2204      	movs	r2, #4
 8002d62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d6a:	f043 0202 	orr.w	r2, r3, #2
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002d74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d78:	f003 0308 	and.w	r3, r3, #8
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d017      	beq.n	8002db0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002d80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d84:	f003 0320 	and.w	r3, r3, #32
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d105      	bne.n	8002d98 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002d8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d90:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d00b      	beq.n	8002db0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2208      	movs	r2, #8
 8002d9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002da6:	f043 0208 	orr.w	r2, r3, #8
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002db0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002db4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d012      	beq.n	8002de2 <HAL_UART_IRQHandler+0x18a>
 8002dbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dc0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d00c      	beq.n	8002de2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002dd0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dd8:	f043 0220 	orr.w	r2, r3, #32
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f000 8209 	beq.w	8003200 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002df2:	f003 0320 	and.w	r3, r3, #32
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00d      	beq.n	8002e16 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002dfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dfe:	f003 0320 	and.w	r3, r3, #32
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d007      	beq.n	8002e16 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d003      	beq.n	8002e16 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e1c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e2a:	2b40      	cmp	r3, #64	; 0x40
 8002e2c:	d005      	beq.n	8002e3a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002e2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002e32:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d04f      	beq.n	8002eda <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 fcef 	bl	800381e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e4a:	2b40      	cmp	r3, #64	; 0x40
 8002e4c:	d141      	bne.n	8002ed2 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	3308      	adds	r3, #8
 8002e54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e58:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e5c:	e853 3f00 	ldrex	r3, [r3]
 8002e60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002e64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	3308      	adds	r3, #8
 8002e76:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002e7a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002e7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e82:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002e86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002e8a:	e841 2300 	strex	r3, r2, [r1]
 8002e8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002e92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d1d9      	bne.n	8002e4e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d013      	beq.n	8002eca <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea6:	4a13      	ldr	r2, [pc, #76]	; (8002ef4 <HAL_UART_IRQHandler+0x29c>)
 8002ea8:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7fe f8f1 	bl	8001096 <HAL_DMA_Abort_IT>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d017      	beq.n	8002eea <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8002ec4:	4610      	mov	r0, r2
 8002ec6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ec8:	e00f      	b.n	8002eea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 f9ac 	bl	8003228 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ed0:	e00b      	b.n	8002eea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 f9a8 	bl	8003228 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ed8:	e007      	b.n	8002eea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f000 f9a4 	bl	8003228 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8002ee8:	e18a      	b.n	8003200 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eea:	bf00      	nop
    return;
 8002eec:	e188      	b.n	8003200 <HAL_UART_IRQHandler+0x5a8>
 8002eee:	bf00      	nop
 8002ef0:	04000120 	.word	0x04000120
 8002ef4:	080038e5 	.word	0x080038e5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	f040 8143 	bne.w	8003188 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f06:	f003 0310 	and.w	r3, r3, #16
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	f000 813c 	beq.w	8003188 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002f10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f14:	f003 0310 	and.w	r3, r3, #16
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f000 8135 	beq.w	8003188 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2210      	movs	r2, #16
 8002f24:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f30:	2b40      	cmp	r3, #64	; 0x40
 8002f32:	f040 80b1 	bne.w	8003098 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002f42:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	f000 815c 	beq.w	8003204 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002f52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002f56:	429a      	cmp	r2, r3
 8002f58:	f080 8154 	bcs.w	8003204 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002f62:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	2b20      	cmp	r3, #32
 8002f6e:	f000 8085 	beq.w	800307c <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f7e:	e853 3f00 	ldrex	r3, [r3]
 8002f82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002f86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f8e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	461a      	mov	r2, r3
 8002f98:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002f9c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002fa0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fa4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002fa8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002fac:	e841 2300 	strex	r3, r2, [r1]
 8002fb0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002fb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d1da      	bne.n	8002f72 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	3308      	adds	r3, #8
 8002fc2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fc6:	e853 3f00 	ldrex	r3, [r3]
 8002fca:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002fcc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002fce:	f023 0301 	bic.w	r3, r3, #1
 8002fd2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	3308      	adds	r3, #8
 8002fdc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002fe0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002fe4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fe6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002fe8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002fec:	e841 2300 	strex	r3, r2, [r1]
 8002ff0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002ff2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d1e1      	bne.n	8002fbc <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	3308      	adds	r3, #8
 8002ffe:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003000:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003002:	e853 3f00 	ldrex	r3, [r3]
 8003006:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003008:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800300a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800300e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	3308      	adds	r3, #8
 8003018:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800301c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800301e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003020:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003022:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003024:	e841 2300 	strex	r3, r2, [r1]
 8003028:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800302a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800302c:	2b00      	cmp	r3, #0
 800302e:	d1e3      	bne.n	8002ff8 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2220      	movs	r2, #32
 8003034:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003042:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003044:	e853 3f00 	ldrex	r3, [r3]
 8003048:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800304a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800304c:	f023 0310 	bic.w	r3, r3, #16
 8003050:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	461a      	mov	r2, r3
 800305a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800305e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003060:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003062:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003064:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003066:	e841 2300 	strex	r3, r2, [r1]
 800306a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800306c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800306e:	2b00      	cmp	r3, #0
 8003070:	d1e4      	bne.n	800303c <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003076:	4618      	mov	r0, r3
 8003078:	f7fd ffd4 	bl	8001024 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003088:	b29b      	uxth	r3, r3
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	b29b      	uxth	r3, r3
 800308e:	4619      	mov	r1, r3
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f000 f8d3 	bl	800323c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003096:	e0b5      	b.n	8003204 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	f000 80a7 	beq.w	8003208 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 80030ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80030be:	2b00      	cmp	r3, #0
 80030c0:	f000 80a2 	beq.w	8003208 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030cc:	e853 3f00 	ldrex	r3, [r3]
 80030d0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80030d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80030d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	461a      	mov	r2, r3
 80030e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80030e6:	647b      	str	r3, [r7, #68]	; 0x44
 80030e8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80030ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80030ee:	e841 2300 	strex	r3, r2, [r1]
 80030f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80030f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1e4      	bne.n	80030c4 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	3308      	adds	r3, #8
 8003100:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003104:	e853 3f00 	ldrex	r3, [r3]
 8003108:	623b      	str	r3, [r7, #32]
   return(result);
 800310a:	6a3b      	ldr	r3, [r7, #32]
 800310c:	f023 0301 	bic.w	r3, r3, #1
 8003110:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	3308      	adds	r3, #8
 800311a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800311e:	633a      	str	r2, [r7, #48]	; 0x30
 8003120:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003122:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003124:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003126:	e841 2300 	strex	r3, r2, [r1]
 800312a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800312c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1e3      	bne.n	80030fa <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2220      	movs	r2, #32
 8003136:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	e853 3f00 	ldrex	r3, [r3]
 8003150:	60fb      	str	r3, [r7, #12]
   return(result);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f023 0310 	bic.w	r3, r3, #16
 8003158:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	461a      	mov	r2, r3
 8003162:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003166:	61fb      	str	r3, [r7, #28]
 8003168:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800316a:	69b9      	ldr	r1, [r7, #24]
 800316c:	69fa      	ldr	r2, [r7, #28]
 800316e:	e841 2300 	strex	r3, r2, [r1]
 8003172:	617b      	str	r3, [r7, #20]
   return(result);
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d1e4      	bne.n	8003144 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800317a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800317e:	4619      	mov	r1, r3
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f000 f85b 	bl	800323c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003186:	e03f      	b.n	8003208 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003188:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800318c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d00e      	beq.n	80031b2 <HAL_UART_IRQHandler+0x55a>
 8003194:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003198:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d008      	beq.n	80031b2 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80031a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 fbda 	bl	8003964 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80031b0:	e02d      	b.n	800320e <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80031b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00e      	beq.n	80031dc <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80031be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d008      	beq.n	80031dc <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d01c      	beq.n	800320c <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	4798      	blx	r3
    }
    return;
 80031da:	e017      	b.n	800320c <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80031dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d012      	beq.n	800320e <HAL_UART_IRQHandler+0x5b6>
 80031e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d00c      	beq.n	800320e <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f000 fb8b 	bl	8003910 <UART_EndTransmit_IT>
    return;
 80031fa:	e008      	b.n	800320e <HAL_UART_IRQHandler+0x5b6>
      return;
 80031fc:	bf00      	nop
 80031fe:	e006      	b.n	800320e <HAL_UART_IRQHandler+0x5b6>
    return;
 8003200:	bf00      	nop
 8003202:	e004      	b.n	800320e <HAL_UART_IRQHandler+0x5b6>
      return;
 8003204:	bf00      	nop
 8003206:	e002      	b.n	800320e <HAL_UART_IRQHandler+0x5b6>
      return;
 8003208:	bf00      	nop
 800320a:	e000      	b.n	800320e <HAL_UART_IRQHandler+0x5b6>
    return;
 800320c:	bf00      	nop
  }

}
 800320e:	37e8      	adds	r7, #232	; 0xe8
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800321c:	bf00      	nop
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003230:	bf00      	nop
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	460b      	mov	r3, r1
 8003246:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003248:	bf00      	nop
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b088      	sub	sp, #32
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800325c:	2300      	movs	r3, #0
 800325e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689a      	ldr	r2, [r3, #8]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	431a      	orrs	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	431a      	orrs	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	69db      	ldr	r3, [r3, #28]
 8003274:	4313      	orrs	r3, r2
 8003276:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	4b8a      	ldr	r3, [pc, #552]	; (80034a8 <UART_SetConfig+0x254>)
 8003280:	4013      	ands	r3, r2
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	6812      	ldr	r2, [r2, #0]
 8003286:	6979      	ldr	r1, [r7, #20]
 8003288:	430b      	orrs	r3, r1
 800328a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	68da      	ldr	r2, [r3, #12]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	430a      	orrs	r2, r1
 80032a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a1b      	ldr	r3, [r3, #32]
 80032ac:	697a      	ldr	r2, [r7, #20]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	697a      	ldr	r2, [r7, #20]
 80032c2:	430a      	orrs	r2, r1
 80032c4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a78      	ldr	r2, [pc, #480]	; (80034ac <UART_SetConfig+0x258>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d120      	bne.n	8003312 <UART_SetConfig+0xbe>
 80032d0:	4b77      	ldr	r3, [pc, #476]	; (80034b0 <UART_SetConfig+0x25c>)
 80032d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d4:	f003 0303 	and.w	r3, r3, #3
 80032d8:	2b03      	cmp	r3, #3
 80032da:	d817      	bhi.n	800330c <UART_SetConfig+0xb8>
 80032dc:	a201      	add	r2, pc, #4	; (adr r2, 80032e4 <UART_SetConfig+0x90>)
 80032de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032e2:	bf00      	nop
 80032e4:	080032f5 	.word	0x080032f5
 80032e8:	08003301 	.word	0x08003301
 80032ec:	08003307 	.word	0x08003307
 80032f0:	080032fb 	.word	0x080032fb
 80032f4:	2300      	movs	r3, #0
 80032f6:	77fb      	strb	r3, [r7, #31]
 80032f8:	e01d      	b.n	8003336 <UART_SetConfig+0xe2>
 80032fa:	2302      	movs	r3, #2
 80032fc:	77fb      	strb	r3, [r7, #31]
 80032fe:	e01a      	b.n	8003336 <UART_SetConfig+0xe2>
 8003300:	2304      	movs	r3, #4
 8003302:	77fb      	strb	r3, [r7, #31]
 8003304:	e017      	b.n	8003336 <UART_SetConfig+0xe2>
 8003306:	2308      	movs	r3, #8
 8003308:	77fb      	strb	r3, [r7, #31]
 800330a:	e014      	b.n	8003336 <UART_SetConfig+0xe2>
 800330c:	2310      	movs	r3, #16
 800330e:	77fb      	strb	r3, [r7, #31]
 8003310:	e011      	b.n	8003336 <UART_SetConfig+0xe2>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a67      	ldr	r2, [pc, #412]	; (80034b4 <UART_SetConfig+0x260>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d102      	bne.n	8003322 <UART_SetConfig+0xce>
 800331c:	2300      	movs	r3, #0
 800331e:	77fb      	strb	r3, [r7, #31]
 8003320:	e009      	b.n	8003336 <UART_SetConfig+0xe2>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a64      	ldr	r2, [pc, #400]	; (80034b8 <UART_SetConfig+0x264>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d102      	bne.n	8003332 <UART_SetConfig+0xde>
 800332c:	2300      	movs	r3, #0
 800332e:	77fb      	strb	r3, [r7, #31]
 8003330:	e001      	b.n	8003336 <UART_SetConfig+0xe2>
 8003332:	2310      	movs	r3, #16
 8003334:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	69db      	ldr	r3, [r3, #28]
 800333a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800333e:	d15b      	bne.n	80033f8 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8003340:	7ffb      	ldrb	r3, [r7, #31]
 8003342:	2b08      	cmp	r3, #8
 8003344:	d827      	bhi.n	8003396 <UART_SetConfig+0x142>
 8003346:	a201      	add	r2, pc, #4	; (adr r2, 800334c <UART_SetConfig+0xf8>)
 8003348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800334c:	08003371 	.word	0x08003371
 8003350:	08003379 	.word	0x08003379
 8003354:	08003381 	.word	0x08003381
 8003358:	08003397 	.word	0x08003397
 800335c:	08003387 	.word	0x08003387
 8003360:	08003397 	.word	0x08003397
 8003364:	08003397 	.word	0x08003397
 8003368:	08003397 	.word	0x08003397
 800336c:	0800338f 	.word	0x0800338f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003370:	f7ff fb4c 	bl	8002a0c <HAL_RCC_GetPCLK1Freq>
 8003374:	61b8      	str	r0, [r7, #24]
        break;
 8003376:	e013      	b.n	80033a0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003378:	f7ff fb6a 	bl	8002a50 <HAL_RCC_GetPCLK2Freq>
 800337c:	61b8      	str	r0, [r7, #24]
        break;
 800337e:	e00f      	b.n	80033a0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003380:	4b4e      	ldr	r3, [pc, #312]	; (80034bc <UART_SetConfig+0x268>)
 8003382:	61bb      	str	r3, [r7, #24]
        break;
 8003384:	e00c      	b.n	80033a0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003386:	f7ff facb 	bl	8002920 <HAL_RCC_GetSysClockFreq>
 800338a:	61b8      	str	r0, [r7, #24]
        break;
 800338c:	e008      	b.n	80033a0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800338e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003392:	61bb      	str	r3, [r7, #24]
        break;
 8003394:	e004      	b.n	80033a0 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003396:	2300      	movs	r3, #0
 8003398:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	77bb      	strb	r3, [r7, #30]
        break;
 800339e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d074      	beq.n	8003490 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	005a      	lsls	r2, r3, #1
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	085b      	lsrs	r3, r3, #1
 80033b0:	441a      	add	r2, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	2b0f      	cmp	r3, #15
 80033c2:	d916      	bls.n	80033f2 <UART_SetConfig+0x19e>
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033ca:	d212      	bcs.n	80033f2 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	f023 030f 	bic.w	r3, r3, #15
 80033d4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	085b      	lsrs	r3, r3, #1
 80033da:	b29b      	uxth	r3, r3
 80033dc:	f003 0307 	and.w	r3, r3, #7
 80033e0:	b29a      	uxth	r2, r3
 80033e2:	89fb      	ldrh	r3, [r7, #14]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	89fa      	ldrh	r2, [r7, #14]
 80033ee:	60da      	str	r2, [r3, #12]
 80033f0:	e04e      	b.n	8003490 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	77bb      	strb	r3, [r7, #30]
 80033f6:	e04b      	b.n	8003490 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80033f8:	7ffb      	ldrb	r3, [r7, #31]
 80033fa:	2b08      	cmp	r3, #8
 80033fc:	d827      	bhi.n	800344e <UART_SetConfig+0x1fa>
 80033fe:	a201      	add	r2, pc, #4	; (adr r2, 8003404 <UART_SetConfig+0x1b0>)
 8003400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003404:	08003429 	.word	0x08003429
 8003408:	08003431 	.word	0x08003431
 800340c:	08003439 	.word	0x08003439
 8003410:	0800344f 	.word	0x0800344f
 8003414:	0800343f 	.word	0x0800343f
 8003418:	0800344f 	.word	0x0800344f
 800341c:	0800344f 	.word	0x0800344f
 8003420:	0800344f 	.word	0x0800344f
 8003424:	08003447 	.word	0x08003447
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003428:	f7ff faf0 	bl	8002a0c <HAL_RCC_GetPCLK1Freq>
 800342c:	61b8      	str	r0, [r7, #24]
        break;
 800342e:	e013      	b.n	8003458 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003430:	f7ff fb0e 	bl	8002a50 <HAL_RCC_GetPCLK2Freq>
 8003434:	61b8      	str	r0, [r7, #24]
        break;
 8003436:	e00f      	b.n	8003458 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003438:	4b20      	ldr	r3, [pc, #128]	; (80034bc <UART_SetConfig+0x268>)
 800343a:	61bb      	str	r3, [r7, #24]
        break;
 800343c:	e00c      	b.n	8003458 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800343e:	f7ff fa6f 	bl	8002920 <HAL_RCC_GetSysClockFreq>
 8003442:	61b8      	str	r0, [r7, #24]
        break;
 8003444:	e008      	b.n	8003458 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003446:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800344a:	61bb      	str	r3, [r7, #24]
        break;
 800344c:	e004      	b.n	8003458 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800344e:	2300      	movs	r3, #0
 8003450:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	77bb      	strb	r3, [r7, #30]
        break;
 8003456:	bf00      	nop
    }

    if (pclk != 0U)
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d018      	beq.n	8003490 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	085a      	lsrs	r2, r3, #1
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	441a      	add	r2, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003470:	b29b      	uxth	r3, r3
 8003472:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	2b0f      	cmp	r3, #15
 8003478:	d908      	bls.n	800348c <UART_SetConfig+0x238>
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003480:	d204      	bcs.n	800348c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	693a      	ldr	r2, [r7, #16]
 8003488:	60da      	str	r2, [r3, #12]
 800348a:	e001      	b.n	8003490 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800349c:	7fbb      	ldrb	r3, [r7, #30]
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3720      	adds	r7, #32
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	efff69f3 	.word	0xefff69f3
 80034ac:	40013800 	.word	0x40013800
 80034b0:	40021000 	.word	0x40021000
 80034b4:	40004400 	.word	0x40004400
 80034b8:	40004800 	.word	0x40004800
 80034bc:	007a1200 	.word	0x007a1200

080034c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034cc:	f003 0301 	and.w	r3, r3, #1
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d00a      	beq.n	80034ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	430a      	orrs	r2, r1
 80034e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00a      	beq.n	800350c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	430a      	orrs	r2, r1
 800350a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003510:	f003 0304 	and.w	r3, r3, #4
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00a      	beq.n	800352e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	430a      	orrs	r2, r1
 800352c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003532:	f003 0308 	and.w	r3, r3, #8
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00a      	beq.n	8003550 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	430a      	orrs	r2, r1
 800354e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003554:	f003 0310 	and.w	r3, r3, #16
 8003558:	2b00      	cmp	r3, #0
 800355a:	d00a      	beq.n	8003572 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	430a      	orrs	r2, r1
 8003570:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003576:	f003 0320 	and.w	r3, r3, #32
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00a      	beq.n	8003594 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	430a      	orrs	r2, r1
 8003592:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800359c:	2b00      	cmp	r3, #0
 800359e:	d01a      	beq.n	80035d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	430a      	orrs	r2, r1
 80035b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035be:	d10a      	bne.n	80035d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	430a      	orrs	r2, r1
 80035d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00a      	beq.n	80035f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	430a      	orrs	r2, r1
 80035f6:	605a      	str	r2, [r3, #4]
  }
}
 80035f8:	bf00      	nop
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af02      	add	r7, sp, #8
 800360a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003614:	f7fc fe32 	bl	800027c <HAL_GetTick>
 8003618:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0308 	and.w	r3, r3, #8
 8003624:	2b08      	cmp	r3, #8
 8003626:	d10e      	bne.n	8003646 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003628:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800362c:	9300      	str	r3, [sp, #0]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 f82d 	bl	8003696 <UART_WaitOnFlagUntilTimeout>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e023      	b.n	800368e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0304 	and.w	r3, r3, #4
 8003650:	2b04      	cmp	r3, #4
 8003652:	d10e      	bne.n	8003672 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003654:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003658:	9300      	str	r3, [sp, #0]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 f817 	bl	8003696 <UART_WaitOnFlagUntilTimeout>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e00d      	b.n	800368e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2220      	movs	r2, #32
 8003676:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2220      	movs	r2, #32
 800367c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3710      	adds	r7, #16
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003696:	b580      	push	{r7, lr}
 8003698:	b09c      	sub	sp, #112	; 0x70
 800369a:	af00      	add	r7, sp, #0
 800369c:	60f8      	str	r0, [r7, #12]
 800369e:	60b9      	str	r1, [r7, #8]
 80036a0:	603b      	str	r3, [r7, #0]
 80036a2:	4613      	mov	r3, r2
 80036a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036a6:	e0a5      	b.n	80037f4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036ae:	f000 80a1 	beq.w	80037f4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036b2:	f7fc fde3 	bl	800027c <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80036be:	429a      	cmp	r2, r3
 80036c0:	d302      	bcc.n	80036c8 <UART_WaitOnFlagUntilTimeout+0x32>
 80036c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d13e      	bne.n	8003746 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036d0:	e853 3f00 	ldrex	r3, [r3]
 80036d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80036d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80036dc:	667b      	str	r3, [r7, #100]	; 0x64
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	461a      	mov	r2, r3
 80036e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80036e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036e8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80036ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80036ee:	e841 2300 	strex	r3, r2, [r1]
 80036f2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80036f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d1e6      	bne.n	80036c8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	3308      	adds	r3, #8
 8003700:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003702:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003704:	e853 3f00 	ldrex	r3, [r3]
 8003708:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800370a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800370c:	f023 0301 	bic.w	r3, r3, #1
 8003710:	663b      	str	r3, [r7, #96]	; 0x60
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	3308      	adds	r3, #8
 8003718:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800371a:	64ba      	str	r2, [r7, #72]	; 0x48
 800371c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800371e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003720:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003722:	e841 2300 	strex	r3, r2, [r1]
 8003726:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003728:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1e5      	bne.n	80036fa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2220      	movs	r2, #32
 8003732:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2220      	movs	r2, #32
 8003738:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e067      	b.n	8003816 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0304 	and.w	r3, r3, #4
 8003750:	2b00      	cmp	r3, #0
 8003752:	d04f      	beq.n	80037f4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	69db      	ldr	r3, [r3, #28]
 800375a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800375e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003762:	d147      	bne.n	80037f4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800376c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003776:	e853 3f00 	ldrex	r3, [r3]
 800377a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800377c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003782:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	461a      	mov	r2, r3
 800378a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800378c:	637b      	str	r3, [r7, #52]	; 0x34
 800378e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003790:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003792:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003794:	e841 2300 	strex	r3, r2, [r1]
 8003798:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800379a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800379c:	2b00      	cmp	r3, #0
 800379e:	d1e6      	bne.n	800376e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	3308      	adds	r3, #8
 80037a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	e853 3f00 	ldrex	r3, [r3]
 80037ae:	613b      	str	r3, [r7, #16]
   return(result);
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	f023 0301 	bic.w	r3, r3, #1
 80037b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	3308      	adds	r3, #8
 80037be:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80037c0:	623a      	str	r2, [r7, #32]
 80037c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c4:	69f9      	ldr	r1, [r7, #28]
 80037c6:	6a3a      	ldr	r2, [r7, #32]
 80037c8:	e841 2300 	strex	r3, r2, [r1]
 80037cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1e5      	bne.n	80037a0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2220      	movs	r2, #32
 80037d8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2220      	movs	r2, #32
 80037de:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2220      	movs	r2, #32
 80037e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e010      	b.n	8003816 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	69da      	ldr	r2, [r3, #28]
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	4013      	ands	r3, r2
 80037fe:	68ba      	ldr	r2, [r7, #8]
 8003800:	429a      	cmp	r2, r3
 8003802:	bf0c      	ite	eq
 8003804:	2301      	moveq	r3, #1
 8003806:	2300      	movne	r3, #0
 8003808:	b2db      	uxtb	r3, r3
 800380a:	461a      	mov	r2, r3
 800380c:	79fb      	ldrb	r3, [r7, #7]
 800380e:	429a      	cmp	r2, r3
 8003810:	f43f af4a 	beq.w	80036a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3770      	adds	r7, #112	; 0x70
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800381e:	b480      	push	{r7}
 8003820:	b095      	sub	sp, #84	; 0x54
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800382c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800382e:	e853 3f00 	ldrex	r3, [r3]
 8003832:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003836:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800383a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	461a      	mov	r2, r3
 8003842:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003844:	643b      	str	r3, [r7, #64]	; 0x40
 8003846:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003848:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800384a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800384c:	e841 2300 	strex	r3, r2, [r1]
 8003850:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1e6      	bne.n	8003826 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	3308      	adds	r3, #8
 800385e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003860:	6a3b      	ldr	r3, [r7, #32]
 8003862:	e853 3f00 	ldrex	r3, [r3]
 8003866:	61fb      	str	r3, [r7, #28]
   return(result);
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	f023 0301 	bic.w	r3, r3, #1
 800386e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	3308      	adds	r3, #8
 8003876:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003878:	62fa      	str	r2, [r7, #44]	; 0x2c
 800387a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800387c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800387e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003880:	e841 2300 	strex	r3, r2, [r1]
 8003884:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003888:	2b00      	cmp	r3, #0
 800388a:	d1e5      	bne.n	8003858 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003890:	2b01      	cmp	r3, #1
 8003892:	d118      	bne.n	80038c6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	e853 3f00 	ldrex	r3, [r3]
 80038a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	f023 0310 	bic.w	r3, r3, #16
 80038a8:	647b      	str	r3, [r7, #68]	; 0x44
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	461a      	mov	r2, r3
 80038b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038b2:	61bb      	str	r3, [r7, #24]
 80038b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b6:	6979      	ldr	r1, [r7, #20]
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	e841 2300 	strex	r3, r2, [r1]
 80038be:	613b      	str	r3, [r7, #16]
   return(result);
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1e6      	bne.n	8003894 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2220      	movs	r2, #32
 80038ca:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	665a      	str	r2, [r3, #100]	; 0x64
}
 80038d8:	bf00      	nop
 80038da:	3754      	adds	r7, #84	; 0x54
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr

080038e4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f7ff fc90 	bl	8003228 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003908:	bf00      	nop
 800390a:	3710      	adds	r7, #16
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b088      	sub	sp, #32
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	e853 3f00 	ldrex	r3, [r3]
 8003924:	60bb      	str	r3, [r7, #8]
   return(result);
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800392c:	61fb      	str	r3, [r7, #28]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	461a      	mov	r2, r3
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	61bb      	str	r3, [r7, #24]
 8003938:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800393a:	6979      	ldr	r1, [r7, #20]
 800393c:	69ba      	ldr	r2, [r7, #24]
 800393e:	e841 2300 	strex	r3, r2, [r1]
 8003942:	613b      	str	r3, [r7, #16]
   return(result);
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1e6      	bne.n	8003918 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2220      	movs	r2, #32
 800394e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f7ff fc5c 	bl	8003214 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800395c:	bf00      	nop
 800395e:	3720      	adds	r7, #32
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800397c:	f7fc fc24 	bl	80001c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003980:	f000 f876 	bl	8003a70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003984:	f000 f938 	bl	8003bf8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003988:	f000 f8e8 	bl	8003b5c <MX_USART2_UART_Init>
  MX_DMA_Init();
 800398c:	f000 f916 	bl	8003bbc <MX_DMA_Init>
  MX_CAN_Init();
 8003990:	f000 f8ae 	bl	8003af0 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  sFilterConfig.FilterBank = 0;
 8003994:	4b31      	ldr	r3, [pc, #196]	; (8003a5c <main+0xe4>)
 8003996:	2200      	movs	r2, #0
 8003998:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800399a:	4b30      	ldr	r3, [pc, #192]	; (8003a5c <main+0xe4>)
 800399c:	2200      	movs	r2, #0
 800399e:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80039a0:	4b2e      	ldr	r3, [pc, #184]	; (8003a5c <main+0xe4>)
 80039a2:	2201      	movs	r2, #1
 80039a4:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 80039a6:	4b2d      	ldr	r3, [pc, #180]	; (8003a5c <main+0xe4>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 80039ac:	4b2b      	ldr	r3, [pc, #172]	; (8003a5c <main+0xe4>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 80039b2:	4b2a      	ldr	r3, [pc, #168]	; (8003a5c <main+0xe4>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 80039b8:	4b28      	ldr	r3, [pc, #160]	; (8003a5c <main+0xe4>)
 80039ba:	2200      	movs	r2, #0
 80039bc:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80039be:	4b27      	ldr	r3, [pc, #156]	; (8003a5c <main+0xe4>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterActivation=ENABLE;
 80039c4:	4b25      	ldr	r3, [pc, #148]	; (8003a5c <main+0xe4>)
 80039c6:	2201      	movs	r2, #1
 80039c8:	621a      	str	r2, [r3, #32]
  sFilterConfig.SlaveStartFilterBank=14;
 80039ca:	4b24      	ldr	r3, [pc, #144]	; (8003a5c <main+0xe4>)
 80039cc:	220e      	movs	r2, #14
 80039ce:	625a      	str	r2, [r3, #36]	; 0x24
  if(HAL_CAN_ConfigFilter(&hcan,&sFilterConfig) != HAL_OK)
 80039d0:	4922      	ldr	r1, [pc, #136]	; (8003a5c <main+0xe4>)
 80039d2:	4823      	ldr	r0, [pc, #140]	; (8003a60 <main+0xe8>)
 80039d4:	f7fc fd59 	bl	800048a <HAL_CAN_ConfigFilter>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <main+0x6a>
  {
    Error_Handler();
 80039de:	f000 f993 	bl	8003d08 <Error_Handler>
  }
  if(HAL_CAN_Start(&hcan)!=HAL_OK)
 80039e2:	481f      	ldr	r0, [pc, #124]	; (8003a60 <main+0xe8>)
 80039e4:	f7fc fe1b 	bl	800061e <HAL_CAN_Start>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d001      	beq.n	80039f2 <main+0x7a>
  {
    Error_Handler();
 80039ee:	f000 f98b 	bl	8003d08 <Error_Handler>
  }

  if(HAL_CAN_ActivateNotification(&hcan,CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 80039f2:	2103      	movs	r1, #3
 80039f4:	481a      	ldr	r0, [pc, #104]	; (8003a60 <main+0xe8>)
 80039f6:	f7fc ff68 	bl	80008ca <HAL_CAN_ActivateNotification>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d001      	beq.n	8003a04 <main+0x8c>
  {
	Error_Handler();
 8003a00:	f000 f982 	bl	8003d08 <Error_Handler>
  }
  TxHeader.StdId=0x01;
 8003a04:	4b17      	ldr	r3, [pc, #92]	; (8003a64 <main+0xec>)
 8003a06:	2201      	movs	r2, #1
 8003a08:	601a      	str	r2, [r3, #0]
  //TxHeader.ExtId=0x01;
  TxHeader.RTR = CAN_RTR_DATA;
 8003a0a:	4b16      	ldr	r3, [pc, #88]	; (8003a64 <main+0xec>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	60da      	str	r2, [r3, #12]
  TxHeader.IDE = CAN_ID_STD;
 8003a10:	4b14      	ldr	r3, [pc, #80]	; (8003a64 <main+0xec>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	609a      	str	r2, [r3, #8]
  TxHeader.DLC = 8;
 8003a16:	4b13      	ldr	r3, [pc, #76]	; (8003a64 <main+0xec>)
 8003a18:	2208      	movs	r2, #8
 8003a1a:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime = DISABLE;
 8003a1c:	4b11      	ldr	r3, [pc, #68]	; (8003a64 <main+0xec>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	751a      	strb	r2, [r3, #20]
  TxData[0] = 0xff;
 8003a22:	4b11      	ldr	r3, [pc, #68]	; (8003a68 <main+0xf0>)
 8003a24:	22ff      	movs	r2, #255	; 0xff
 8003a26:	701a      	strb	r2, [r3, #0]
  TxData[1] = 0x01;
 8003a28:	4b0f      	ldr	r3, [pc, #60]	; (8003a68 <main+0xf0>)
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	705a      	strb	r2, [r3, #1]
  TxData[2] = 0x00;
 8003a2e:	4b0e      	ldr	r3, [pc, #56]	; (8003a68 <main+0xf0>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	709a      	strb	r2, [r3, #2]
  TxData[3] = 0x64;
 8003a34:	4b0c      	ldr	r3, [pc, #48]	; (8003a68 <main+0xf0>)
 8003a36:	2264      	movs	r2, #100	; 0x64
 8003a38:	70da      	strb	r2, [r3, #3]
  TxData[4] = 0x00;
 8003a3a:	4b0b      	ldr	r3, [pc, #44]	; (8003a68 <main+0xf0>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	711a      	strb	r2, [r3, #4]
  TxData[5] = 0x80;
 8003a40:	4b09      	ldr	r3, [pc, #36]	; (8003a68 <main+0xf0>)
 8003a42:	2280      	movs	r2, #128	; 0x80
 8003a44:	715a      	strb	r2, [r3, #5]
  TxData[6] = 0x00;
 8003a46:	4b08      	ldr	r3, [pc, #32]	; (8003a68 <main+0xf0>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	719a      	strb	r2, [r3, #6]
  TxData[7] = 0x00;
 8003a4c:	4b06      	ldr	r3, [pc, #24]	; (8003a68 <main+0xf0>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	71da      	strb	r2, [r3, #7]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  get_uart_flag=0;
 8003a52:	4b06      	ldr	r3, [pc, #24]	; (8003a6c <main+0xf4>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	701a      	strb	r2, [r3, #0]
 8003a58:	e7fb      	b.n	8003a52 <main+0xda>
 8003a5a:	bf00      	nop
 8003a5c:	2000012c 	.word	0x2000012c
 8003a60:	2000003c 	.word	0x2000003c
 8003a64:	20000154 	.word	0x20000154
 8003a68:	20000188 	.word	0x20000188
 8003a6c:	20000198 	.word	0x20000198

08003a70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b090      	sub	sp, #64	; 0x40
 8003a74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a76:	f107 0318 	add.w	r3, r7, #24
 8003a7a:	2228      	movs	r2, #40	; 0x28
 8003a7c:	2100      	movs	r1, #0
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f000 fb38 	bl	80040f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003a84:	1d3b      	adds	r3, r7, #4
 8003a86:	2200      	movs	r2, #0
 8003a88:	601a      	str	r2, [r3, #0]
 8003a8a:	605a      	str	r2, [r3, #4]
 8003a8c:	609a      	str	r2, [r3, #8]
 8003a8e:	60da      	str	r2, [r3, #12]
 8003a90:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003a92:	2302      	movs	r3, #2
 8003a94:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003a96:	2301      	movs	r3, #1
 8003a98:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003a9a:	2310      	movs	r3, #16
 8003a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003aa6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003aac:	f107 0318 	add.w	r3, r7, #24
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f7fd fd7b 	bl	80015ac <HAL_RCC_OscConfig>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d001      	beq.n	8003ac0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8003abc:	f000 f924 	bl	8003d08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003ac0:	230f      	movs	r3, #15
 8003ac2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003ac4:	2302      	movs	r3, #2
 8003ac6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003acc:	2300      	movs	r3, #0
 8003ace:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003ad4:	1d3b      	adds	r3, r7, #4
 8003ad6:	2101      	movs	r1, #1
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f7fe fda5 	bl	8002628 <HAL_RCC_ClockConfig>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d001      	beq.n	8003ae8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8003ae4:	f000 f910 	bl	8003d08 <Error_Handler>
  }
}
 8003ae8:	bf00      	nop
 8003aea:	3740      	adds	r7, #64	; 0x40
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8003af4:	4b17      	ldr	r3, [pc, #92]	; (8003b54 <MX_CAN_Init+0x64>)
 8003af6:	4a18      	ldr	r2, [pc, #96]	; (8003b58 <MX_CAN_Init+0x68>)
 8003af8:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 3;
 8003afa:	4b16      	ldr	r3, [pc, #88]	; (8003b54 <MX_CAN_Init+0x64>)
 8003afc:	2203      	movs	r2, #3
 8003afe:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8003b00:	4b14      	ldr	r3, [pc, #80]	; (8003b54 <MX_CAN_Init+0x64>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003b06:	4b13      	ldr	r3, [pc, #76]	; (8003b54 <MX_CAN_Init+0x64>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_9TQ;
 8003b0c:	4b11      	ldr	r3, [pc, #68]	; (8003b54 <MX_CAN_Init+0x64>)
 8003b0e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003b12:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8003b14:	4b0f      	ldr	r3, [pc, #60]	; (8003b54 <MX_CAN_Init+0x64>)
 8003b16:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003b1a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8003b1c:	4b0d      	ldr	r3, [pc, #52]	; (8003b54 <MX_CAN_Init+0x64>)
 8003b1e:	2200      	movs	r2, #0
 8003b20:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8003b22:	4b0c      	ldr	r3, [pc, #48]	; (8003b54 <MX_CAN_Init+0x64>)
 8003b24:	2200      	movs	r2, #0
 8003b26:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8003b28:	4b0a      	ldr	r3, [pc, #40]	; (8003b54 <MX_CAN_Init+0x64>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8003b2e:	4b09      	ldr	r3, [pc, #36]	; (8003b54 <MX_CAN_Init+0x64>)
 8003b30:	2200      	movs	r2, #0
 8003b32:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8003b34:	4b07      	ldr	r3, [pc, #28]	; (8003b54 <MX_CAN_Init+0x64>)
 8003b36:	2200      	movs	r2, #0
 8003b38:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8003b3a:	4b06      	ldr	r3, [pc, #24]	; (8003b54 <MX_CAN_Init+0x64>)
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8003b40:	4804      	ldr	r0, [pc, #16]	; (8003b54 <MX_CAN_Init+0x64>)
 8003b42:	f7fc fba7 	bl	8000294 <HAL_CAN_Init>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d001      	beq.n	8003b50 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8003b4c:	f000 f8dc 	bl	8003d08 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8003b50:	bf00      	nop
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	2000003c 	.word	0x2000003c
 8003b58:	40006400 	.word	0x40006400

08003b5c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003b60:	4b14      	ldr	r3, [pc, #80]	; (8003bb4 <MX_USART2_UART_Init+0x58>)
 8003b62:	4a15      	ldr	r2, [pc, #84]	; (8003bb8 <MX_USART2_UART_Init+0x5c>)
 8003b64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003b66:	4b13      	ldr	r3, [pc, #76]	; (8003bb4 <MX_USART2_UART_Init+0x58>)
 8003b68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003b6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003b6e:	4b11      	ldr	r3, [pc, #68]	; (8003bb4 <MX_USART2_UART_Init+0x58>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003b74:	4b0f      	ldr	r3, [pc, #60]	; (8003bb4 <MX_USART2_UART_Init+0x58>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003b7a:	4b0e      	ldr	r3, [pc, #56]	; (8003bb4 <MX_USART2_UART_Init+0x58>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003b80:	4b0c      	ldr	r3, [pc, #48]	; (8003bb4 <MX_USART2_UART_Init+0x58>)
 8003b82:	220c      	movs	r2, #12
 8003b84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b86:	4b0b      	ldr	r3, [pc, #44]	; (8003bb4 <MX_USART2_UART_Init+0x58>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b8c:	4b09      	ldr	r3, [pc, #36]	; (8003bb4 <MX_USART2_UART_Init+0x58>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003b92:	4b08      	ldr	r3, [pc, #32]	; (8003bb4 <MX_USART2_UART_Init+0x58>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003b98:	4b06      	ldr	r3, [pc, #24]	; (8003bb4 <MX_USART2_UART_Init+0x58>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003b9e:	4805      	ldr	r0, [pc, #20]	; (8003bb4 <MX_USART2_UART_Init+0x58>)
 8003ba0:	f7fe ff78 	bl	8002a94 <HAL_UART_Init>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003baa:	f000 f8ad 	bl	8003d08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003bae:	bf00      	nop
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	20000064 	.word	0x20000064
 8003bb8:	40004400 	.word	0x40004400

08003bbc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003bc2:	4b0c      	ldr	r3, [pc, #48]	; (8003bf4 <MX_DMA_Init+0x38>)
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	4a0b      	ldr	r2, [pc, #44]	; (8003bf4 <MX_DMA_Init+0x38>)
 8003bc8:	f043 0301 	orr.w	r3, r3, #1
 8003bcc:	6153      	str	r3, [r2, #20]
 8003bce:	4b09      	ldr	r3, [pc, #36]	; (8003bf4 <MX_DMA_Init+0x38>)
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	f003 0301 	and.w	r3, r3, #1
 8003bd6:	607b      	str	r3, [r7, #4]
 8003bd8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8003bda:	2200      	movs	r2, #0
 8003bdc:	2100      	movs	r1, #0
 8003bde:	2010      	movs	r0, #16
 8003be0:	f7fd f9a3 	bl	8000f2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8003be4:	2010      	movs	r0, #16
 8003be6:	f7fd f9bc 	bl	8000f62 <HAL_NVIC_EnableIRQ>

}
 8003bea:	bf00      	nop
 8003bec:	3708      	adds	r7, #8
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	40021000 	.word	0x40021000

08003bf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b088      	sub	sp, #32
 8003bfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bfe:	f107 030c 	add.w	r3, r7, #12
 8003c02:	2200      	movs	r2, #0
 8003c04:	601a      	str	r2, [r3, #0]
 8003c06:	605a      	str	r2, [r3, #4]
 8003c08:	609a      	str	r2, [r3, #8]
 8003c0a:	60da      	str	r2, [r3, #12]
 8003c0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003c0e:	4b1d      	ldr	r3, [pc, #116]	; (8003c84 <MX_GPIO_Init+0x8c>)
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	4a1c      	ldr	r2, [pc, #112]	; (8003c84 <MX_GPIO_Init+0x8c>)
 8003c14:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c18:	6153      	str	r3, [r2, #20]
 8003c1a:	4b1a      	ldr	r3, [pc, #104]	; (8003c84 <MX_GPIO_Init+0x8c>)
 8003c1c:	695b      	ldr	r3, [r3, #20]
 8003c1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c22:	60bb      	str	r3, [r7, #8]
 8003c24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c26:	4b17      	ldr	r3, [pc, #92]	; (8003c84 <MX_GPIO_Init+0x8c>)
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	4a16      	ldr	r2, [pc, #88]	; (8003c84 <MX_GPIO_Init+0x8c>)
 8003c2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c30:	6153      	str	r3, [r2, #20]
 8003c32:	4b14      	ldr	r3, [pc, #80]	; (8003c84 <MX_GPIO_Init+0x8c>)
 8003c34:	695b      	ldr	r3, [r3, #20]
 8003c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c3a:	607b      	str	r3, [r7, #4]
 8003c3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c3e:	4b11      	ldr	r3, [pc, #68]	; (8003c84 <MX_GPIO_Init+0x8c>)
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	4a10      	ldr	r2, [pc, #64]	; (8003c84 <MX_GPIO_Init+0x8c>)
 8003c44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c48:	6153      	str	r3, [r2, #20]
 8003c4a:	4b0e      	ldr	r3, [pc, #56]	; (8003c84 <MX_GPIO_Init+0x8c>)
 8003c4c:	695b      	ldr	r3, [r3, #20]
 8003c4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c52:	603b      	str	r3, [r7, #0]
 8003c54:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8003c56:	2200      	movs	r2, #0
 8003c58:	2108      	movs	r1, #8
 8003c5a:	480b      	ldr	r0, [pc, #44]	; (8003c88 <MX_GPIO_Init+0x90>)
 8003c5c:	f7fd fc8e 	bl	800157c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8003c60:	2308      	movs	r3, #8
 8003c62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c64:	2301      	movs	r3, #1
 8003c66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8003c70:	f107 030c 	add.w	r3, r7, #12
 8003c74:	4619      	mov	r1, r3
 8003c76:	4804      	ldr	r0, [pc, #16]	; (8003c88 <MX_GPIO_Init+0x90>)
 8003c78:	f7fd fb0e 	bl	8001298 <HAL_GPIO_Init>

}
 8003c7c:	bf00      	nop
 8003c7e:	3720      	adds	r7, #32
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	40021000 	.word	0x40021000
 8003c88:	48000400 	.word	0x48000400

08003c8c <HAL_CAN_RxFifo0MsgPendingCallback>:
{
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,1);
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan_)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, tx_data, 3,0xFFFF);
 8003c94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c98:	2203      	movs	r2, #3
 8003c9a:	4914      	ldr	r1, [pc, #80]	; (8003cec <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8003c9c:	4814      	ldr	r0, [pc, #80]	; (8003cf0 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8003c9e:	f7fe ff47 	bl	8002b30 <HAL_UART_Transmit>
  HAL_CAN_GetRxMessage(&hcan,CAN_RX_FIFO0, &RxHeader,RxData);
 8003ca2:	4b14      	ldr	r3, [pc, #80]	; (8003cf4 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 8003ca4:	4a14      	ldr	r2, [pc, #80]	; (8003cf8 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 8003ca6:	2100      	movs	r1, #0
 8003ca8:	4814      	ldr	r0, [pc, #80]	; (8003cfc <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8003caa:	f7fc fcfc 	bl	80006a6 <HAL_CAN_GetRxMessage>
  HAL_UART_Transmit(&huart2,RxData,1,0xFFFF);
 8003cae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	490f      	ldr	r1, [pc, #60]	; (8003cf4 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 8003cb6:	480e      	ldr	r0, [pc, #56]	; (8003cf0 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8003cb8:	f7fe ff3a 	bl	8002b30 <HAL_UART_Transmit>
  flag *= -1;
 8003cbc:	4b10      	ldr	r3, [pc, #64]	; (8003d00 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	425b      	negs	r3, r3
 8003cc2:	4a0f      	ldr	r2, [pc, #60]	; (8003d00 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8003cc4:	6013      	str	r3, [r2, #0]
  if(flag >0){
 8003cc6:	4b0e      	ldr	r3, [pc, #56]	; (8003d00 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	dd05      	ble.n	8003cda <HAL_CAN_RxFifo0MsgPendingCallback+0x4e>
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,1);
 8003cce:	2201      	movs	r2, #1
 8003cd0:	2108      	movs	r1, #8
 8003cd2:	480c      	ldr	r0, [pc, #48]	; (8003d04 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8003cd4:	f7fd fc52 	bl	800157c <HAL_GPIO_WritePin>
  }else{
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,0);
  }
}
 8003cd8:	e004      	b.n	8003ce4 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,0);
 8003cda:	2200      	movs	r2, #0
 8003cdc:	2108      	movs	r1, #8
 8003cde:	4809      	ldr	r0, [pc, #36]	; (8003d04 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8003ce0:	f7fd fc4c 	bl	800157c <HAL_GPIO_WritePin>
}
 8003ce4:	bf00      	nop
 8003ce6:	3708      	adds	r7, #8
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	20000008 	.word	0x20000008
 8003cf0:	20000064 	.word	0x20000064
 8003cf4:	20000190 	.word	0x20000190
 8003cf8:	2000016c 	.word	0x2000016c
 8003cfc:	2000003c 	.word	0x2000003c
 8003d00:	20000014 	.word	0x20000014
 8003d04:	48000400 	.word	0x48000400

08003d08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003d0c:	bf00      	nop
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
	...

08003d18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d1e:	4b0f      	ldr	r3, [pc, #60]	; (8003d5c <HAL_MspInit+0x44>)
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	4a0e      	ldr	r2, [pc, #56]	; (8003d5c <HAL_MspInit+0x44>)
 8003d24:	f043 0301 	orr.w	r3, r3, #1
 8003d28:	6193      	str	r3, [r2, #24]
 8003d2a:	4b0c      	ldr	r3, [pc, #48]	; (8003d5c <HAL_MspInit+0x44>)
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	607b      	str	r3, [r7, #4]
 8003d34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d36:	4b09      	ldr	r3, [pc, #36]	; (8003d5c <HAL_MspInit+0x44>)
 8003d38:	69db      	ldr	r3, [r3, #28]
 8003d3a:	4a08      	ldr	r2, [pc, #32]	; (8003d5c <HAL_MspInit+0x44>)
 8003d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d40:	61d3      	str	r3, [r2, #28]
 8003d42:	4b06      	ldr	r3, [pc, #24]	; (8003d5c <HAL_MspInit+0x44>)
 8003d44:	69db      	ldr	r3, [r3, #28]
 8003d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d4a:	603b      	str	r3, [r7, #0]
 8003d4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d4e:	bf00      	nop
 8003d50:	370c      	adds	r7, #12
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	40021000 	.word	0x40021000

08003d60 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b08a      	sub	sp, #40	; 0x28
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d68:	f107 0314 	add.w	r3, r7, #20
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	601a      	str	r2, [r3, #0]
 8003d70:	605a      	str	r2, [r3, #4]
 8003d72:	609a      	str	r2, [r3, #8]
 8003d74:	60da      	str	r2, [r3, #12]
 8003d76:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a29      	ldr	r2, [pc, #164]	; (8003e24 <HAL_CAN_MspInit+0xc4>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d14b      	bne.n	8003e1a <HAL_CAN_MspInit+0xba>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003d82:	4b29      	ldr	r3, [pc, #164]	; (8003e28 <HAL_CAN_MspInit+0xc8>)
 8003d84:	69db      	ldr	r3, [r3, #28]
 8003d86:	4a28      	ldr	r2, [pc, #160]	; (8003e28 <HAL_CAN_MspInit+0xc8>)
 8003d88:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003d8c:	61d3      	str	r3, [r2, #28]
 8003d8e:	4b26      	ldr	r3, [pc, #152]	; (8003e28 <HAL_CAN_MspInit+0xc8>)
 8003d90:	69db      	ldr	r3, [r3, #28]
 8003d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d96:	613b      	str	r3, [r7, #16]
 8003d98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d9a:	4b23      	ldr	r3, [pc, #140]	; (8003e28 <HAL_CAN_MspInit+0xc8>)
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	4a22      	ldr	r2, [pc, #136]	; (8003e28 <HAL_CAN_MspInit+0xc8>)
 8003da0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003da4:	6153      	str	r3, [r2, #20]
 8003da6:	4b20      	ldr	r3, [pc, #128]	; (8003e28 <HAL_CAN_MspInit+0xc8>)
 8003da8:	695b      	ldr	r3, [r3, #20]
 8003daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dae:	60fb      	str	r3, [r7, #12]
 8003db0:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003db2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003db6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003db8:	2302      	movs	r3, #2
 8003dba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8003dc4:	2309      	movs	r3, #9
 8003dc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dc8:	f107 0314 	add.w	r3, r7, #20
 8003dcc:	4619      	mov	r1, r3
 8003dce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003dd2:	f7fd fa61 	bl	8001298 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003dd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003dda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ddc:	2302      	movs	r3, #2
 8003dde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003de0:	2301      	movs	r3, #1
 8003de2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003de4:	2303      	movs	r3, #3
 8003de6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8003de8:	2309      	movs	r3, #9
 8003dea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dec:	f107 0314 	add.w	r3, r7, #20
 8003df0:	4619      	mov	r1, r3
 8003df2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003df6:	f7fd fa4f 	bl	8001298 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_TX_IRQn, 0, 0);
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	2100      	movs	r1, #0
 8003dfe:	2013      	movs	r0, #19
 8003e00:	f7fd f893 	bl	8000f2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_TX_IRQn);
 8003e04:	2013      	movs	r0, #19
 8003e06:	f7fd f8ac 	bl	8000f62 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	2100      	movs	r1, #0
 8003e0e:	2014      	movs	r0, #20
 8003e10:	f7fd f88b 	bl	8000f2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 8003e14:	2014      	movs	r0, #20
 8003e16:	f7fd f8a4 	bl	8000f62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8003e1a:	bf00      	nop
 8003e1c:	3728      	adds	r7, #40	; 0x28
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	40006400 	.word	0x40006400
 8003e28:	40021000 	.word	0x40021000

08003e2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b08a      	sub	sp, #40	; 0x28
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e34:	f107 0314 	add.w	r3, r7, #20
 8003e38:	2200      	movs	r2, #0
 8003e3a:	601a      	str	r2, [r3, #0]
 8003e3c:	605a      	str	r2, [r3, #4]
 8003e3e:	609a      	str	r2, [r3, #8]
 8003e40:	60da      	str	r2, [r3, #12]
 8003e42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a2f      	ldr	r2, [pc, #188]	; (8003f08 <HAL_UART_MspInit+0xdc>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d157      	bne.n	8003efe <HAL_UART_MspInit+0xd2>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003e4e:	4b2f      	ldr	r3, [pc, #188]	; (8003f0c <HAL_UART_MspInit+0xe0>)
 8003e50:	69db      	ldr	r3, [r3, #28]
 8003e52:	4a2e      	ldr	r2, [pc, #184]	; (8003f0c <HAL_UART_MspInit+0xe0>)
 8003e54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e58:	61d3      	str	r3, [r2, #28]
 8003e5a:	4b2c      	ldr	r3, [pc, #176]	; (8003f0c <HAL_UART_MspInit+0xe0>)
 8003e5c:	69db      	ldr	r3, [r3, #28]
 8003e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e62:	613b      	str	r3, [r7, #16]
 8003e64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e66:	4b29      	ldr	r3, [pc, #164]	; (8003f0c <HAL_UART_MspInit+0xe0>)
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	4a28      	ldr	r2, [pc, #160]	; (8003f0c <HAL_UART_MspInit+0xe0>)
 8003e6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e70:	6153      	str	r3, [r2, #20]
 8003e72:	4b26      	ldr	r3, [pc, #152]	; (8003f0c <HAL_UART_MspInit+0xe0>)
 8003e74:	695b      	ldr	r3, [r3, #20]
 8003e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e7a:	60fb      	str	r3, [r7, #12]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8003e7e:	f248 0304 	movw	r3, #32772	; 0x8004
 8003e82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e84:	2302      	movs	r3, #2
 8003e86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003e90:	2307      	movs	r3, #7
 8003e92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e94:	f107 0314 	add.w	r3, r7, #20
 8003e98:	4619      	mov	r1, r3
 8003e9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e9e:	f7fd f9fb 	bl	8001298 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8003ea2:	4b1b      	ldr	r3, [pc, #108]	; (8003f10 <HAL_UART_MspInit+0xe4>)
 8003ea4:	4a1b      	ldr	r2, [pc, #108]	; (8003f14 <HAL_UART_MspInit+0xe8>)
 8003ea6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003ea8:	4b19      	ldr	r3, [pc, #100]	; (8003f10 <HAL_UART_MspInit+0xe4>)
 8003eaa:	2200      	movs	r2, #0
 8003eac:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003eae:	4b18      	ldr	r3, [pc, #96]	; (8003f10 <HAL_UART_MspInit+0xe4>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003eb4:	4b16      	ldr	r3, [pc, #88]	; (8003f10 <HAL_UART_MspInit+0xe4>)
 8003eb6:	2280      	movs	r2, #128	; 0x80
 8003eb8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003eba:	4b15      	ldr	r3, [pc, #84]	; (8003f10 <HAL_UART_MspInit+0xe4>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ec0:	4b13      	ldr	r3, [pc, #76]	; (8003f10 <HAL_UART_MspInit+0xe4>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003ec6:	4b12      	ldr	r3, [pc, #72]	; (8003f10 <HAL_UART_MspInit+0xe4>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003ecc:	4b10      	ldr	r3, [pc, #64]	; (8003f10 <HAL_UART_MspInit+0xe4>)
 8003ece:	2200      	movs	r2, #0
 8003ed0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003ed2:	480f      	ldr	r0, [pc, #60]	; (8003f10 <HAL_UART_MspInit+0xe4>)
 8003ed4:	f7fd f85f 	bl	8000f96 <HAL_DMA_Init>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d001      	beq.n	8003ee2 <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 8003ede:	f7ff ff13 	bl	8003d08 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a0a      	ldr	r2, [pc, #40]	; (8003f10 <HAL_UART_MspInit+0xe4>)
 8003ee6:	671a      	str	r2, [r3, #112]	; 0x70
 8003ee8:	4a09      	ldr	r2, [pc, #36]	; (8003f10 <HAL_UART_MspInit+0xe4>)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003eee:	2200      	movs	r2, #0
 8003ef0:	2100      	movs	r1, #0
 8003ef2:	2026      	movs	r0, #38	; 0x26
 8003ef4:	f7fd f819 	bl	8000f2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003ef8:	2026      	movs	r0, #38	; 0x26
 8003efa:	f7fd f832 	bl	8000f62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003efe:	bf00      	nop
 8003f00:	3728      	adds	r7, #40	; 0x28
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	40004400 	.word	0x40004400
 8003f0c:	40021000 	.word	0x40021000
 8003f10:	200000e8 	.word	0x200000e8
 8003f14:	4002006c 	.word	0x4002006c

08003f18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003f1c:	bf00      	nop
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr

08003f26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f26:	b480      	push	{r7}
 8003f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f2a:	e7fe      	b.n	8003f2a <HardFault_Handler+0x4>

08003f2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f30:	e7fe      	b.n	8003f30 <MemManage_Handler+0x4>

08003f32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f32:	b480      	push	{r7}
 8003f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f36:	e7fe      	b.n	8003f36 <BusFault_Handler+0x4>

08003f38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f3c:	e7fe      	b.n	8003f3c <UsageFault_Handler+0x4>

08003f3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003f3e:	b480      	push	{r7}
 8003f40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003f42:	bf00      	nop
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f50:	bf00      	nop
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr

08003f5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f5a:	b480      	push	{r7}
 8003f5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f5e:	bf00      	nop
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f6c:	f7fc f972 	bl	8000254 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f70:	bf00      	nop
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003f78:	4802      	ldr	r0, [pc, #8]	; (8003f84 <DMA1_Channel6_IRQHandler+0x10>)
 8003f7a:	f7fd f8ca 	bl	8001112 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8003f7e:	bf00      	nop
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	200000e8 	.word	0x200000e8

08003f88 <CAN_TX_IRQHandler>:

/**
  * @brief This function handles CAN TX interrupt.
  */
void CAN_TX_IRQHandler(void)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_TX_IRQn 0 */

  /* USER CODE END CAN_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8003f8c:	4802      	ldr	r0, [pc, #8]	; (8003f98 <CAN_TX_IRQHandler+0x10>)
 8003f8e:	f7fc fcc2 	bl	8000916 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_TX_IRQn 1 */

  /* USER CODE END CAN_TX_IRQn 1 */
}
 8003f92:	bf00      	nop
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	2000003c 	.word	0x2000003c

08003f9c <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8003fa0:	4802      	ldr	r0, [pc, #8]	; (8003fac <CAN_RX0_IRQHandler+0x10>)
 8003fa2:	f7fc fcb8 	bl	8000916 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 8003fa6:	bf00      	nop
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	2000003c 	.word	0x2000003c

08003fb0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003fb4:	4802      	ldr	r0, [pc, #8]	; (8003fc0 <USART2_IRQHandler+0x10>)
 8003fb6:	f7fe fe4f 	bl	8002c58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003fba:	bf00      	nop
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	20000064 	.word	0x20000064

08003fc4 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003fc8:	4b1f      	ldr	r3, [pc, #124]	; (8004048 <SystemInit+0x84>)
 8003fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fce:	4a1e      	ldr	r2, [pc, #120]	; (8004048 <SystemInit+0x84>)
 8003fd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003fd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003fd8:	4b1c      	ldr	r3, [pc, #112]	; (800404c <SystemInit+0x88>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a1b      	ldr	r2, [pc, #108]	; (800404c <SystemInit+0x88>)
 8003fde:	f043 0301 	orr.w	r3, r3, #1
 8003fe2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8003fe4:	4b19      	ldr	r3, [pc, #100]	; (800404c <SystemInit+0x88>)
 8003fe6:	685a      	ldr	r2, [r3, #4]
 8003fe8:	4918      	ldr	r1, [pc, #96]	; (800404c <SystemInit+0x88>)
 8003fea:	4b19      	ldr	r3, [pc, #100]	; (8004050 <SystemInit+0x8c>)
 8003fec:	4013      	ands	r3, r2
 8003fee:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003ff0:	4b16      	ldr	r3, [pc, #88]	; (800404c <SystemInit+0x88>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a15      	ldr	r2, [pc, #84]	; (800404c <SystemInit+0x88>)
 8003ff6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003ffa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ffe:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004000:	4b12      	ldr	r3, [pc, #72]	; (800404c <SystemInit+0x88>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a11      	ldr	r2, [pc, #68]	; (800404c <SystemInit+0x88>)
 8004006:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800400a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800400c:	4b0f      	ldr	r3, [pc, #60]	; (800404c <SystemInit+0x88>)
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	4a0e      	ldr	r2, [pc, #56]	; (800404c <SystemInit+0x88>)
 8004012:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8004016:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8004018:	4b0c      	ldr	r3, [pc, #48]	; (800404c <SystemInit+0x88>)
 800401a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800401c:	4a0b      	ldr	r2, [pc, #44]	; (800404c <SystemInit+0x88>)
 800401e:	f023 030f 	bic.w	r3, r3, #15
 8004022:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8004024:	4b09      	ldr	r3, [pc, #36]	; (800404c <SystemInit+0x88>)
 8004026:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004028:	4908      	ldr	r1, [pc, #32]	; (800404c <SystemInit+0x88>)
 800402a:	4b0a      	ldr	r3, [pc, #40]	; (8004054 <SystemInit+0x90>)
 800402c:	4013      	ands	r3, r2
 800402e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8004030:	4b06      	ldr	r3, [pc, #24]	; (800404c <SystemInit+0x88>)
 8004032:	2200      	movs	r2, #0
 8004034:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004036:	4b04      	ldr	r3, [pc, #16]	; (8004048 <SystemInit+0x84>)
 8004038:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800403c:	609a      	str	r2, [r3, #8]
#endif
}
 800403e:	bf00      	nop
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr
 8004048:	e000ed00 	.word	0xe000ed00
 800404c:	40021000 	.word	0x40021000
 8004050:	f87fc00c 	.word	0xf87fc00c
 8004054:	ff00fccc 	.word	0xff00fccc

08004058 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004058:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004090 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800405c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800405e:	e003      	b.n	8004068 <LoopCopyDataInit>

08004060 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004060:	4b0c      	ldr	r3, [pc, #48]	; (8004094 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004062:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004064:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004066:	3104      	adds	r1, #4

08004068 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004068:	480b      	ldr	r0, [pc, #44]	; (8004098 <LoopForever+0xa>)
	ldr	r3, =_edata
 800406a:	4b0c      	ldr	r3, [pc, #48]	; (800409c <LoopForever+0xe>)
	adds	r2, r0, r1
 800406c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800406e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004070:	d3f6      	bcc.n	8004060 <CopyDataInit>
	ldr	r2, =_sbss
 8004072:	4a0b      	ldr	r2, [pc, #44]	; (80040a0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004074:	e002      	b.n	800407c <LoopFillZerobss>

08004076 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004076:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004078:	f842 3b04 	str.w	r3, [r2], #4

0800407c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800407c:	4b09      	ldr	r3, [pc, #36]	; (80040a4 <LoopForever+0x16>)
	cmp	r2, r3
 800407e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004080:	d3f9      	bcc.n	8004076 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004082:	f7ff ff9f 	bl	8003fc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004086:	f000 f811 	bl	80040ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800408a:	f7ff fc75 	bl	8003978 <main>

0800408e <LoopForever>:

LoopForever:
    b LoopForever
 800408e:	e7fe      	b.n	800408e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004090:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8004094:	0800415c 	.word	0x0800415c
	ldr	r0, =_sdata
 8004098:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800409c:	2000001c 	.word	0x2000001c
	ldr	r2, =_sbss
 80040a0:	2000001c 	.word	0x2000001c
	ldr	r3, = _ebss
 80040a4:	2000019c 	.word	0x2000019c

080040a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80040a8:	e7fe      	b.n	80040a8 <ADC1_2_IRQHandler>
	...

080040ac <__libc_init_array>:
 80040ac:	b570      	push	{r4, r5, r6, lr}
 80040ae:	4d0d      	ldr	r5, [pc, #52]	; (80040e4 <__libc_init_array+0x38>)
 80040b0:	4c0d      	ldr	r4, [pc, #52]	; (80040e8 <__libc_init_array+0x3c>)
 80040b2:	1b64      	subs	r4, r4, r5
 80040b4:	10a4      	asrs	r4, r4, #2
 80040b6:	2600      	movs	r6, #0
 80040b8:	42a6      	cmp	r6, r4
 80040ba:	d109      	bne.n	80040d0 <__libc_init_array+0x24>
 80040bc:	4d0b      	ldr	r5, [pc, #44]	; (80040ec <__libc_init_array+0x40>)
 80040be:	4c0c      	ldr	r4, [pc, #48]	; (80040f0 <__libc_init_array+0x44>)
 80040c0:	f000 f820 	bl	8004104 <_init>
 80040c4:	1b64      	subs	r4, r4, r5
 80040c6:	10a4      	asrs	r4, r4, #2
 80040c8:	2600      	movs	r6, #0
 80040ca:	42a6      	cmp	r6, r4
 80040cc:	d105      	bne.n	80040da <__libc_init_array+0x2e>
 80040ce:	bd70      	pop	{r4, r5, r6, pc}
 80040d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80040d4:	4798      	blx	r3
 80040d6:	3601      	adds	r6, #1
 80040d8:	e7ee      	b.n	80040b8 <__libc_init_array+0xc>
 80040da:	f855 3b04 	ldr.w	r3, [r5], #4
 80040de:	4798      	blx	r3
 80040e0:	3601      	adds	r6, #1
 80040e2:	e7f2      	b.n	80040ca <__libc_init_array+0x1e>
 80040e4:	08004154 	.word	0x08004154
 80040e8:	08004154 	.word	0x08004154
 80040ec:	08004154 	.word	0x08004154
 80040f0:	08004158 	.word	0x08004158

080040f4 <memset>:
 80040f4:	4402      	add	r2, r0
 80040f6:	4603      	mov	r3, r0
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d100      	bne.n	80040fe <memset+0xa>
 80040fc:	4770      	bx	lr
 80040fe:	f803 1b01 	strb.w	r1, [r3], #1
 8004102:	e7f9      	b.n	80040f8 <memset+0x4>

08004104 <_init>:
 8004104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004106:	bf00      	nop
 8004108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800410a:	bc08      	pop	{r3}
 800410c:	469e      	mov	lr, r3
 800410e:	4770      	bx	lr

08004110 <_fini>:
 8004110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004112:	bf00      	nop
 8004114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004116:	bc08      	pop	{r3}
 8004118:	469e      	mov	lr, r3
 800411a:	4770      	bx	lr
