
stm32_f303k8_can2odrive_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003514  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800369c  0800369c  0001369c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036d4  080036d4  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  080036d4  080036d4  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080036d4  080036d4  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036d4  080036d4  000136d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080036d8  080036d8  000136d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080036dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  20000018  080036f4  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  080036f4  00020154  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a58f  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000156b  00000000  00000000  0002a5d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000778  00000000  00000000  0002bb48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000700  00000000  00000000  0002c2c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019cbb  00000000  00000000  0002c9c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000094f8  00000000  00000000  0004667b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009926e  00000000  00000000  0004fb73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e8de1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e08  00000000  00000000  000e8e34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003684 	.word	0x08003684

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08003684 	.word	0x08003684

080001c8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001cc:	4b08      	ldr	r3, [pc, #32]	; (80001f0 <HAL_Init+0x28>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	4a07      	ldr	r2, [pc, #28]	; (80001f0 <HAL_Init+0x28>)
 80001d2:	f043 0310 	orr.w	r3, r3, #16
 80001d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001d8:	2003      	movs	r0, #3
 80001da:	f000 ff77 	bl	80010cc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80001de:	2000      	movs	r0, #0
 80001e0:	f000 f808 	bl	80001f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80001e4:	f003 f89e 	bl	8003324 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80001e8:	2300      	movs	r3, #0
}
 80001ea:	4618      	mov	r0, r3
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	40022000 	.word	0x40022000

080001f4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b082      	sub	sp, #8
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001fc:	4b12      	ldr	r3, [pc, #72]	; (8000248 <HAL_InitTick+0x54>)
 80001fe:	681a      	ldr	r2, [r3, #0]
 8000200:	4b12      	ldr	r3, [pc, #72]	; (800024c <HAL_InitTick+0x58>)
 8000202:	781b      	ldrb	r3, [r3, #0]
 8000204:	4619      	mov	r1, r3
 8000206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800020a:	fbb3 f3f1 	udiv	r3, r3, r1
 800020e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000212:	4618      	mov	r0, r3
 8000214:	f000 ff8f 	bl	8001136 <HAL_SYSTICK_Config>
 8000218:	4603      	mov	r3, r0
 800021a:	2b00      	cmp	r3, #0
 800021c:	d001      	beq.n	8000222 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800021e:	2301      	movs	r3, #1
 8000220:	e00e      	b.n	8000240 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	2b0f      	cmp	r3, #15
 8000226:	d80a      	bhi.n	800023e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000228:	2200      	movs	r2, #0
 800022a:	6879      	ldr	r1, [r7, #4]
 800022c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000230:	f000 ff57 	bl	80010e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000234:	4a06      	ldr	r2, [pc, #24]	; (8000250 <HAL_InitTick+0x5c>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800023a:	2300      	movs	r3, #0
 800023c:	e000      	b.n	8000240 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800023e:	2301      	movs	r3, #1
}
 8000240:	4618      	mov	r0, r3
 8000242:	3708      	adds	r7, #8
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}
 8000248:	20000014 	.word	0x20000014
 800024c:	20000004 	.word	0x20000004
 8000250:	20000000 	.word	0x20000000

08000254 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000254:	b480      	push	{r7}
 8000256:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000258:	4b06      	ldr	r3, [pc, #24]	; (8000274 <HAL_IncTick+0x20>)
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	461a      	mov	r2, r3
 800025e:	4b06      	ldr	r3, [pc, #24]	; (8000278 <HAL_IncTick+0x24>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	4413      	add	r3, r2
 8000264:	4a04      	ldr	r2, [pc, #16]	; (8000278 <HAL_IncTick+0x24>)
 8000266:	6013      	str	r3, [r2, #0]
}
 8000268:	bf00      	nop
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	20000004 	.word	0x20000004
 8000278:	20000034 	.word	0x20000034

0800027c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000280:	4b03      	ldr	r3, [pc, #12]	; (8000290 <HAL_GetTick+0x14>)
 8000282:	681b      	ldr	r3, [r3, #0]
}
 8000284:	4618      	mov	r0, r3
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	20000034 	.word	0x20000034

08000294 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b084      	sub	sp, #16
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d101      	bne.n	80002a6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80002a2:	2301      	movs	r3, #1
 80002a4:	e0ed      	b.n	8000482 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80002ac:	b2db      	uxtb	r3, r3
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d102      	bne.n	80002b8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80002b2:	6878      	ldr	r0, [r7, #4]
 80002b4:	f003 f85a 	bl	800336c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	681a      	ldr	r2, [r3, #0]
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	f042 0201 	orr.w	r2, r2, #1
 80002c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80002c8:	f7ff ffd8 	bl	800027c <HAL_GetTick>
 80002cc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80002ce:	e012      	b.n	80002f6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80002d0:	f7ff ffd4 	bl	800027c <HAL_GetTick>
 80002d4:	4602      	mov	r2, r0
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	1ad3      	subs	r3, r2, r3
 80002da:	2b0a      	cmp	r3, #10
 80002dc:	d90b      	bls.n	80002f6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002e2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	2205      	movs	r2, #5
 80002ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80002f2:	2301      	movs	r3, #1
 80002f4:	e0c5      	b.n	8000482 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	685b      	ldr	r3, [r3, #4]
 80002fc:	f003 0301 	and.w	r3, r3, #1
 8000300:	2b00      	cmp	r3, #0
 8000302:	d0e5      	beq.n	80002d0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	681a      	ldr	r2, [r3, #0]
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	f022 0202 	bic.w	r2, r2, #2
 8000312:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000314:	f7ff ffb2 	bl	800027c <HAL_GetTick>
 8000318:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800031a:	e012      	b.n	8000342 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800031c:	f7ff ffae 	bl	800027c <HAL_GetTick>
 8000320:	4602      	mov	r2, r0
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	1ad3      	subs	r3, r2, r3
 8000326:	2b0a      	cmp	r3, #10
 8000328:	d90b      	bls.n	8000342 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800032e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	2205      	movs	r2, #5
 800033a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800033e:	2301      	movs	r3, #1
 8000340:	e09f      	b.n	8000482 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	685b      	ldr	r3, [r3, #4]
 8000348:	f003 0302 	and.w	r3, r3, #2
 800034c:	2b00      	cmp	r3, #0
 800034e:	d1e5      	bne.n	800031c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	7e1b      	ldrb	r3, [r3, #24]
 8000354:	2b01      	cmp	r3, #1
 8000356:	d108      	bne.n	800036a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	681a      	ldr	r2, [r3, #0]
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000366:	601a      	str	r2, [r3, #0]
 8000368:	e007      	b.n	800037a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	681a      	ldr	r2, [r3, #0]
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000378:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	7e5b      	ldrb	r3, [r3, #25]
 800037e:	2b01      	cmp	r3, #1
 8000380:	d108      	bne.n	8000394 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	681a      	ldr	r2, [r3, #0]
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000390:	601a      	str	r2, [r3, #0]
 8000392:	e007      	b.n	80003a4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	681a      	ldr	r2, [r3, #0]
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80003a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	7e9b      	ldrb	r3, [r3, #26]
 80003a8:	2b01      	cmp	r3, #1
 80003aa:	d108      	bne.n	80003be <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	f042 0220 	orr.w	r2, r2, #32
 80003ba:	601a      	str	r2, [r3, #0]
 80003bc:	e007      	b.n	80003ce <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	681a      	ldr	r2, [r3, #0]
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	f022 0220 	bic.w	r2, r2, #32
 80003cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	7edb      	ldrb	r3, [r3, #27]
 80003d2:	2b01      	cmp	r3, #1
 80003d4:	d108      	bne.n	80003e8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	681a      	ldr	r2, [r3, #0]
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	f022 0210 	bic.w	r2, r2, #16
 80003e4:	601a      	str	r2, [r3, #0]
 80003e6:	e007      	b.n	80003f8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	681a      	ldr	r2, [r3, #0]
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	f042 0210 	orr.w	r2, r2, #16
 80003f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	7f1b      	ldrb	r3, [r3, #28]
 80003fc:	2b01      	cmp	r3, #1
 80003fe:	d108      	bne.n	8000412 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	681a      	ldr	r2, [r3, #0]
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	f042 0208 	orr.w	r2, r2, #8
 800040e:	601a      	str	r2, [r3, #0]
 8000410:	e007      	b.n	8000422 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	681a      	ldr	r2, [r3, #0]
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	f022 0208 	bic.w	r2, r2, #8
 8000420:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	7f5b      	ldrb	r3, [r3, #29]
 8000426:	2b01      	cmp	r3, #1
 8000428:	d108      	bne.n	800043c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	681a      	ldr	r2, [r3, #0]
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	f042 0204 	orr.w	r2, r2, #4
 8000438:	601a      	str	r2, [r3, #0]
 800043a:	e007      	b.n	800044c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	681a      	ldr	r2, [r3, #0]
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	f022 0204 	bic.w	r2, r2, #4
 800044a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	689a      	ldr	r2, [r3, #8]
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	68db      	ldr	r3, [r3, #12]
 8000454:	431a      	orrs	r2, r3
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	691b      	ldr	r3, [r3, #16]
 800045a:	431a      	orrs	r2, r3
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	695b      	ldr	r3, [r3, #20]
 8000460:	ea42 0103 	orr.w	r1, r2, r3
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	685b      	ldr	r3, [r3, #4]
 8000468:	1e5a      	subs	r2, r3, #1
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	430a      	orrs	r2, r1
 8000470:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	2200      	movs	r2, #0
 8000476:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	2201      	movs	r2, #1
 800047c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000480:	2300      	movs	r3, #0
}
 8000482:	4618      	mov	r0, r3
 8000484:	3710      	adds	r7, #16
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}

0800048a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800048a:	b480      	push	{r7}
 800048c:	b087      	sub	sp, #28
 800048e:	af00      	add	r7, sp, #0
 8000490:	6078      	str	r0, [r7, #4]
 8000492:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80004a0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80004a2:	7cfb      	ldrb	r3, [r7, #19]
 80004a4:	2b01      	cmp	r3, #1
 80004a6:	d003      	beq.n	80004b0 <HAL_CAN_ConfigFilter+0x26>
 80004a8:	7cfb      	ldrb	r3, [r7, #19]
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	f040 80aa 	bne.w	8000604 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80004b0:	697b      	ldr	r3, [r7, #20]
 80004b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80004b6:	f043 0201 	orr.w	r2, r3, #1
 80004ba:	697b      	ldr	r3, [r7, #20]
 80004bc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80004c0:	683b      	ldr	r3, [r7, #0]
 80004c2:	695b      	ldr	r3, [r3, #20]
 80004c4:	f003 031f 	and.w	r3, r3, #31
 80004c8:	2201      	movs	r2, #1
 80004ca:	fa02 f303 	lsl.w	r3, r2, r3
 80004ce:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80004d0:	697b      	ldr	r3, [r7, #20]
 80004d2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	43db      	mvns	r3, r3
 80004da:	401a      	ands	r2, r3
 80004dc:	697b      	ldr	r3, [r7, #20]
 80004de:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80004e2:	683b      	ldr	r3, [r7, #0]
 80004e4:	69db      	ldr	r3, [r3, #28]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d123      	bne.n	8000532 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80004ea:	697b      	ldr	r3, [r7, #20]
 80004ec:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	43db      	mvns	r3, r3
 80004f4:	401a      	ands	r2, r3
 80004f6:	697b      	ldr	r3, [r7, #20]
 80004f8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80004fc:	683b      	ldr	r3, [r7, #0]
 80004fe:	68db      	ldr	r3, [r3, #12]
 8000500:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	685b      	ldr	r3, [r3, #4]
 8000506:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000508:	683a      	ldr	r2, [r7, #0]
 800050a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800050c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800050e:	697b      	ldr	r3, [r7, #20]
 8000510:	3248      	adds	r2, #72	; 0x48
 8000512:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	689b      	ldr	r3, [r3, #8]
 800051a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000526:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000528:	6979      	ldr	r1, [r7, #20]
 800052a:	3348      	adds	r3, #72	; 0x48
 800052c:	00db      	lsls	r3, r3, #3
 800052e:	440b      	add	r3, r1
 8000530:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	69db      	ldr	r3, [r3, #28]
 8000536:	2b01      	cmp	r3, #1
 8000538:	d122      	bne.n	8000580 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800053a:	697b      	ldr	r3, [r7, #20]
 800053c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	431a      	orrs	r2, r3
 8000544:	697b      	ldr	r3, [r7, #20]
 8000546:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	685b      	ldr	r3, [r3, #4]
 8000554:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000556:	683a      	ldr	r2, [r7, #0]
 8000558:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800055a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800055c:	697b      	ldr	r3, [r7, #20]
 800055e:	3248      	adds	r2, #72	; 0x48
 8000560:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000564:	683b      	ldr	r3, [r7, #0]
 8000566:	689b      	ldr	r3, [r3, #8]
 8000568:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800056a:	683b      	ldr	r3, [r7, #0]
 800056c:	68db      	ldr	r3, [r3, #12]
 800056e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000574:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000576:	6979      	ldr	r1, [r7, #20]
 8000578:	3348      	adds	r3, #72	; 0x48
 800057a:	00db      	lsls	r3, r3, #3
 800057c:	440b      	add	r3, r1
 800057e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	699b      	ldr	r3, [r3, #24]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d109      	bne.n	800059c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000588:	697b      	ldr	r3, [r7, #20]
 800058a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	43db      	mvns	r3, r3
 8000592:	401a      	ands	r2, r3
 8000594:	697b      	ldr	r3, [r7, #20]
 8000596:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800059a:	e007      	b.n	80005ac <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800059c:	697b      	ldr	r3, [r7, #20]
 800059e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	431a      	orrs	r2, r3
 80005a6:	697b      	ldr	r3, [r7, #20]
 80005a8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	691b      	ldr	r3, [r3, #16]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d109      	bne.n	80005c8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80005b4:	697b      	ldr	r3, [r7, #20]
 80005b6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	43db      	mvns	r3, r3
 80005be:	401a      	ands	r2, r3
 80005c0:	697b      	ldr	r3, [r7, #20]
 80005c2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80005c6:	e007      	b.n	80005d8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80005c8:	697b      	ldr	r3, [r7, #20]
 80005ca:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	431a      	orrs	r2, r3
 80005d2:	697b      	ldr	r3, [r7, #20]
 80005d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	6a1b      	ldr	r3, [r3, #32]
 80005dc:	2b01      	cmp	r3, #1
 80005de:	d107      	bne.n	80005f0 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80005e0:	697b      	ldr	r3, [r7, #20]
 80005e2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	431a      	orrs	r2, r3
 80005ea:	697b      	ldr	r3, [r7, #20]
 80005ec:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80005f0:	697b      	ldr	r3, [r7, #20]
 80005f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80005f6:	f023 0201 	bic.w	r2, r3, #1
 80005fa:	697b      	ldr	r3, [r7, #20]
 80005fc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000600:	2300      	movs	r3, #0
 8000602:	e006      	b.n	8000612 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000608:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000610:	2301      	movs	r3, #1
  }
}
 8000612:	4618      	mov	r0, r3
 8000614:	371c      	adds	r7, #28
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr

0800061e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800061e:	b580      	push	{r7, lr}
 8000620:	b084      	sub	sp, #16
 8000622:	af00      	add	r7, sp, #0
 8000624:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	f893 3020 	ldrb.w	r3, [r3, #32]
 800062c:	b2db      	uxtb	r3, r3
 800062e:	2b01      	cmp	r3, #1
 8000630:	d12e      	bne.n	8000690 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	2202      	movs	r2, #2
 8000636:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	681a      	ldr	r2, [r3, #0]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f022 0201 	bic.w	r2, r2, #1
 8000648:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800064a:	f7ff fe17 	bl	800027c <HAL_GetTick>
 800064e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000650:	e012      	b.n	8000678 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000652:	f7ff fe13 	bl	800027c <HAL_GetTick>
 8000656:	4602      	mov	r2, r0
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	1ad3      	subs	r3, r2, r3
 800065c:	2b0a      	cmp	r3, #10
 800065e:	d90b      	bls.n	8000678 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000664:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	2205      	movs	r2, #5
 8000670:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000674:	2301      	movs	r3, #1
 8000676:	e012      	b.n	800069e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	685b      	ldr	r3, [r3, #4]
 800067e:	f003 0301 	and.w	r3, r3, #1
 8000682:	2b00      	cmp	r3, #0
 8000684:	d1e5      	bne.n	8000652 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	2200      	movs	r2, #0
 800068a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800068c:	2300      	movs	r3, #0
 800068e:	e006      	b.n	800069e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000694:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800069c:	2301      	movs	r3, #1
  }
}
 800069e:	4618      	mov	r0, r3
 80006a0:	3710      	adds	r7, #16
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80006a6:	b480      	push	{r7}
 80006a8:	b089      	sub	sp, #36	; 0x24
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	60f8      	str	r0, [r7, #12]
 80006ae:	60b9      	str	r1, [r7, #8]
 80006b0:	607a      	str	r2, [r7, #4]
 80006b2:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80006ba:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	689b      	ldr	r3, [r3, #8]
 80006c2:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80006c4:	7ffb      	ldrb	r3, [r7, #31]
 80006c6:	2b01      	cmp	r3, #1
 80006c8:	d003      	beq.n	80006d2 <HAL_CAN_AddTxMessage+0x2c>
 80006ca:	7ffb      	ldrb	r3, [r7, #31]
 80006cc:	2b02      	cmp	r3, #2
 80006ce:	f040 80b8 	bne.w	8000842 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80006d2:	69bb      	ldr	r3, [r7, #24]
 80006d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d10a      	bne.n	80006f2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80006dc:	69bb      	ldr	r3, [r7, #24]
 80006de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d105      	bne.n	80006f2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80006e6:	69bb      	ldr	r3, [r7, #24]
 80006e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	f000 80a0 	beq.w	8000832 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80006f2:	69bb      	ldr	r3, [r7, #24]
 80006f4:	0e1b      	lsrs	r3, r3, #24
 80006f6:	f003 0303 	and.w	r3, r3, #3
 80006fa:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80006fc:	697b      	ldr	r3, [r7, #20]
 80006fe:	2b02      	cmp	r3, #2
 8000700:	d907      	bls.n	8000712 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000706:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800070e:	2301      	movs	r3, #1
 8000710:	e09e      	b.n	8000850 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000712:	2201      	movs	r2, #1
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	409a      	lsls	r2, r3
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800071c:	68bb      	ldr	r3, [r7, #8]
 800071e:	689b      	ldr	r3, [r3, #8]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d10d      	bne.n	8000740 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800072a:	68bb      	ldr	r3, [r7, #8]
 800072c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800072e:	68f9      	ldr	r1, [r7, #12]
 8000730:	6809      	ldr	r1, [r1, #0]
 8000732:	431a      	orrs	r2, r3
 8000734:	697b      	ldr	r3, [r7, #20]
 8000736:	3318      	adds	r3, #24
 8000738:	011b      	lsls	r3, r3, #4
 800073a:	440b      	add	r3, r1
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	e00f      	b.n	8000760 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	685b      	ldr	r3, [r3, #4]
 8000744:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000746:	68bb      	ldr	r3, [r7, #8]
 8000748:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800074a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000750:	68f9      	ldr	r1, [r7, #12]
 8000752:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000754:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000756:	697b      	ldr	r3, [r7, #20]
 8000758:	3318      	adds	r3, #24
 800075a:	011b      	lsls	r3, r3, #4
 800075c:	440b      	add	r3, r1
 800075e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	6819      	ldr	r1, [r3, #0]
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	691a      	ldr	r2, [r3, #16]
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	3318      	adds	r3, #24
 800076c:	011b      	lsls	r3, r3, #4
 800076e:	440b      	add	r3, r1
 8000770:	3304      	adds	r3, #4
 8000772:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	7d1b      	ldrb	r3, [r3, #20]
 8000778:	2b01      	cmp	r3, #1
 800077a:	d111      	bne.n	80007a0 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	3318      	adds	r3, #24
 8000784:	011b      	lsls	r3, r3, #4
 8000786:	4413      	add	r3, r2
 8000788:	3304      	adds	r3, #4
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	68fa      	ldr	r2, [r7, #12]
 800078e:	6811      	ldr	r1, [r2, #0]
 8000790:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000794:	697b      	ldr	r3, [r7, #20]
 8000796:	3318      	adds	r3, #24
 8000798:	011b      	lsls	r3, r3, #4
 800079a:	440b      	add	r3, r1
 800079c:	3304      	adds	r3, #4
 800079e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	3307      	adds	r3, #7
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	061a      	lsls	r2, r3, #24
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	3306      	adds	r3, #6
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	041b      	lsls	r3, r3, #16
 80007b0:	431a      	orrs	r2, r3
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	3305      	adds	r3, #5
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	021b      	lsls	r3, r3, #8
 80007ba:	4313      	orrs	r3, r2
 80007bc:	687a      	ldr	r2, [r7, #4]
 80007be:	3204      	adds	r2, #4
 80007c0:	7812      	ldrb	r2, [r2, #0]
 80007c2:	4610      	mov	r0, r2
 80007c4:	68fa      	ldr	r2, [r7, #12]
 80007c6:	6811      	ldr	r1, [r2, #0]
 80007c8:	ea43 0200 	orr.w	r2, r3, r0
 80007cc:	697b      	ldr	r3, [r7, #20]
 80007ce:	011b      	lsls	r3, r3, #4
 80007d0:	440b      	add	r3, r1
 80007d2:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80007d6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	3303      	adds	r3, #3
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	061a      	lsls	r2, r3, #24
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	3302      	adds	r3, #2
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	041b      	lsls	r3, r3, #16
 80007e8:	431a      	orrs	r2, r3
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	3301      	adds	r3, #1
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	021b      	lsls	r3, r3, #8
 80007f2:	4313      	orrs	r3, r2
 80007f4:	687a      	ldr	r2, [r7, #4]
 80007f6:	7812      	ldrb	r2, [r2, #0]
 80007f8:	4610      	mov	r0, r2
 80007fa:	68fa      	ldr	r2, [r7, #12]
 80007fc:	6811      	ldr	r1, [r2, #0]
 80007fe:	ea43 0200 	orr.w	r2, r3, r0
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	011b      	lsls	r3, r3, #4
 8000806:	440b      	add	r3, r1
 8000808:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800080c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	681a      	ldr	r2, [r3, #0]
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	3318      	adds	r3, #24
 8000816:	011b      	lsls	r3, r3, #4
 8000818:	4413      	add	r3, r2
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	68fa      	ldr	r2, [r7, #12]
 800081e:	6811      	ldr	r1, [r2, #0]
 8000820:	f043 0201 	orr.w	r2, r3, #1
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	3318      	adds	r3, #24
 8000828:	011b      	lsls	r3, r3, #4
 800082a:	440b      	add	r3, r1
 800082c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800082e:	2300      	movs	r3, #0
 8000830:	e00e      	b.n	8000850 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000836:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800083e:	2301      	movs	r3, #1
 8000840:	e006      	b.n	8000850 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000846:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800084e:	2301      	movs	r3, #1
  }
}
 8000850:	4618      	mov	r0, r3
 8000852:	3724      	adds	r7, #36	; 0x24
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr

0800085c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800085c:	b480      	push	{r7}
 800085e:	b087      	sub	sp, #28
 8000860:	af00      	add	r7, sp, #0
 8000862:	60f8      	str	r0, [r7, #12]
 8000864:	60b9      	str	r1, [r7, #8]
 8000866:	607a      	str	r2, [r7, #4]
 8000868:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000870:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000872:	7dfb      	ldrb	r3, [r7, #23]
 8000874:	2b01      	cmp	r3, #1
 8000876:	d003      	beq.n	8000880 <HAL_CAN_GetRxMessage+0x24>
 8000878:	7dfb      	ldrb	r3, [r7, #23]
 800087a:	2b02      	cmp	r3, #2
 800087c:	f040 80f3 	bne.w	8000a66 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d10e      	bne.n	80008a4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	68db      	ldr	r3, [r3, #12]
 800088c:	f003 0303 	and.w	r3, r3, #3
 8000890:	2b00      	cmp	r3, #0
 8000892:	d116      	bne.n	80008c2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000898:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80008a0:	2301      	movs	r3, #1
 80008a2:	e0e7      	b.n	8000a74 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	691b      	ldr	r3, [r3, #16]
 80008aa:	f003 0303 	and.w	r3, r3, #3
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d107      	bne.n	80008c2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008b6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80008be:	2301      	movs	r3, #1
 80008c0:	e0d8      	b.n	8000a74 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	681a      	ldr	r2, [r3, #0]
 80008c6:	68bb      	ldr	r3, [r7, #8]
 80008c8:	331b      	adds	r3, #27
 80008ca:	011b      	lsls	r3, r3, #4
 80008cc:	4413      	add	r3, r2
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	f003 0204 	and.w	r2, r3, #4
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	689b      	ldr	r3, [r3, #8]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d10c      	bne.n	80008fa <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	681a      	ldr	r2, [r3, #0]
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	331b      	adds	r3, #27
 80008e8:	011b      	lsls	r3, r3, #4
 80008ea:	4413      	add	r3, r2
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	0d5b      	lsrs	r3, r3, #21
 80008f0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	e00b      	b.n	8000912 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	331b      	adds	r3, #27
 8000902:	011b      	lsls	r3, r3, #4
 8000904:	4413      	add	r3, r2
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	08db      	lsrs	r3, r3, #3
 800090a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	681a      	ldr	r2, [r3, #0]
 8000916:	68bb      	ldr	r3, [r7, #8]
 8000918:	331b      	adds	r3, #27
 800091a:	011b      	lsls	r3, r3, #4
 800091c:	4413      	add	r3, r2
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f003 0202 	and.w	r2, r3, #2
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	681a      	ldr	r2, [r3, #0]
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	331b      	adds	r3, #27
 8000930:	011b      	lsls	r3, r3, #4
 8000932:	4413      	add	r3, r2
 8000934:	3304      	adds	r3, #4
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	f003 020f 	and.w	r2, r3, #15
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	331b      	adds	r3, #27
 8000948:	011b      	lsls	r3, r3, #4
 800094a:	4413      	add	r3, r2
 800094c:	3304      	adds	r3, #4
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	0a1b      	lsrs	r3, r3, #8
 8000952:	b2da      	uxtb	r2, r3
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	331b      	adds	r3, #27
 8000960:	011b      	lsls	r3, r3, #4
 8000962:	4413      	add	r3, r2
 8000964:	3304      	adds	r3, #4
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	0c1b      	lsrs	r3, r3, #16
 800096a:	b29a      	uxth	r2, r3
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	681a      	ldr	r2, [r3, #0]
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	011b      	lsls	r3, r3, #4
 8000978:	4413      	add	r3, r2
 800097a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	b2da      	uxtb	r2, r3
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	681a      	ldr	r2, [r3, #0]
 800098a:	68bb      	ldr	r3, [r7, #8]
 800098c:	011b      	lsls	r3, r3, #4
 800098e:	4413      	add	r3, r2
 8000990:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	0a1a      	lsrs	r2, r3, #8
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	3301      	adds	r3, #1
 800099c:	b2d2      	uxtb	r2, r2
 800099e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	011b      	lsls	r3, r3, #4
 80009a8:	4413      	add	r3, r2
 80009aa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	0c1a      	lsrs	r2, r3, #16
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	3302      	adds	r3, #2
 80009b6:	b2d2      	uxtb	r2, r2
 80009b8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	681a      	ldr	r2, [r3, #0]
 80009be:	68bb      	ldr	r3, [r7, #8]
 80009c0:	011b      	lsls	r3, r3, #4
 80009c2:	4413      	add	r3, r2
 80009c4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	0e1a      	lsrs	r2, r3, #24
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	3303      	adds	r3, #3
 80009d0:	b2d2      	uxtb	r2, r2
 80009d2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	011b      	lsls	r3, r3, #4
 80009dc:	4413      	add	r3, r2
 80009de:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80009e2:	681a      	ldr	r2, [r3, #0]
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	3304      	adds	r3, #4
 80009e8:	b2d2      	uxtb	r2, r2
 80009ea:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	011b      	lsls	r3, r3, #4
 80009f4:	4413      	add	r3, r2
 80009f6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	0a1a      	lsrs	r2, r3, #8
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	3305      	adds	r3, #5
 8000a02:	b2d2      	uxtb	r2, r2
 8000a04:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	681a      	ldr	r2, [r3, #0]
 8000a0a:	68bb      	ldr	r3, [r7, #8]
 8000a0c:	011b      	lsls	r3, r3, #4
 8000a0e:	4413      	add	r3, r2
 8000a10:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	0c1a      	lsrs	r2, r3, #16
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	3306      	adds	r3, #6
 8000a1c:	b2d2      	uxtb	r2, r2
 8000a1e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	011b      	lsls	r3, r3, #4
 8000a28:	4413      	add	r3, r2
 8000a2a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	0e1a      	lsrs	r2, r3, #24
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	3307      	adds	r3, #7
 8000a36:	b2d2      	uxtb	r2, r2
 8000a38:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d108      	bne.n	8000a52 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	68da      	ldr	r2, [r3, #12]
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	f042 0220 	orr.w	r2, r2, #32
 8000a4e:	60da      	str	r2, [r3, #12]
 8000a50:	e007      	b.n	8000a62 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	691a      	ldr	r2, [r3, #16]
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f042 0220 	orr.w	r2, r2, #32
 8000a60:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8000a62:	2300      	movs	r3, #0
 8000a64:	e006      	b.n	8000a74 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a6a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000a72:	2301      	movs	r3, #1
  }
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	371c      	adds	r7, #28
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a90:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000a92:	7bfb      	ldrb	r3, [r7, #15]
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d002      	beq.n	8000a9e <HAL_CAN_ActivateNotification+0x1e>
 8000a98:	7bfb      	ldrb	r3, [r7, #15]
 8000a9a:	2b02      	cmp	r3, #2
 8000a9c:	d109      	bne.n	8000ab2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	6959      	ldr	r1, [r3, #20]
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	683a      	ldr	r2, [r7, #0]
 8000aaa:	430a      	orrs	r2, r1
 8000aac:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	e006      	b.n	8000ac0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ab6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000abe:	2301      	movs	r3, #1
  }
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3714      	adds	r7, #20
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08a      	sub	sp, #40	; 0x28
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	695b      	ldr	r3, [r3, #20]
 8000ade:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	689b      	ldr	r3, [r3, #8]
 8000aee:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	68db      	ldr	r3, [r3, #12]
 8000af6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	691b      	ldr	r3, [r3, #16]
 8000afe:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	699b      	ldr	r3, [r3, #24]
 8000b06:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000b08:	6a3b      	ldr	r3, [r7, #32]
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d07c      	beq.n	8000c0c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000b12:	69bb      	ldr	r3, [r7, #24]
 8000b14:	f003 0301 	and.w	r3, r3, #1
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d023      	beq.n	8000b64 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2201      	movs	r2, #1
 8000b22:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000b24:	69bb      	ldr	r3, [r7, #24]
 8000b26:	f003 0302 	and.w	r3, r3, #2
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d003      	beq.n	8000b36 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000b2e:	6878      	ldr	r0, [r7, #4]
 8000b30:	f000 f983 	bl	8000e3a <HAL_CAN_TxMailbox0CompleteCallback>
 8000b34:	e016      	b.n	8000b64 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000b36:	69bb      	ldr	r3, [r7, #24]
 8000b38:	f003 0304 	and.w	r3, r3, #4
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d004      	beq.n	8000b4a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b42:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b46:	627b      	str	r3, [r7, #36]	; 0x24
 8000b48:	e00c      	b.n	8000b64 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000b4a:	69bb      	ldr	r3, [r7, #24]
 8000b4c:	f003 0308 	and.w	r3, r3, #8
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d004      	beq.n	8000b5e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b56:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
 8000b5c:	e002      	b.n	8000b64 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000b5e:	6878      	ldr	r0, [r7, #4]
 8000b60:	f000 f989 	bl	8000e76 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000b64:	69bb      	ldr	r3, [r7, #24]
 8000b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d024      	beq.n	8000bb8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b76:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000b78:	69bb      	ldr	r3, [r7, #24]
 8000b7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d003      	beq.n	8000b8a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000b82:	6878      	ldr	r0, [r7, #4]
 8000b84:	f000 f963 	bl	8000e4e <HAL_CAN_TxMailbox1CompleteCallback>
 8000b88:	e016      	b.n	8000bb8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000b8a:	69bb      	ldr	r3, [r7, #24]
 8000b8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d004      	beq.n	8000b9e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b96:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b9a:	627b      	str	r3, [r7, #36]	; 0x24
 8000b9c:	e00c      	b.n	8000bb8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000b9e:	69bb      	ldr	r3, [r7, #24]
 8000ba0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d004      	beq.n	8000bb2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000baa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bae:	627b      	str	r3, [r7, #36]	; 0x24
 8000bb0:	e002      	b.n	8000bb8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000bb2:	6878      	ldr	r0, [r7, #4]
 8000bb4:	f000 f969 	bl	8000e8a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000bb8:	69bb      	ldr	r3, [r7, #24]
 8000bba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d024      	beq.n	8000c0c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000bca:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000bcc:	69bb      	ldr	r3, [r7, #24]
 8000bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d003      	beq.n	8000bde <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000bd6:	6878      	ldr	r0, [r7, #4]
 8000bd8:	f000 f943 	bl	8000e62 <HAL_CAN_TxMailbox2CompleteCallback>
 8000bdc:	e016      	b.n	8000c0c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000bde:	69bb      	ldr	r3, [r7, #24]
 8000be0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d004      	beq.n	8000bf2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bee:	627b      	str	r3, [r7, #36]	; 0x24
 8000bf0:	e00c      	b.n	8000c0c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000bf2:	69bb      	ldr	r3, [r7, #24]
 8000bf4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d004      	beq.n	8000c06 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c02:	627b      	str	r3, [r7, #36]	; 0x24
 8000c04:	e002      	b.n	8000c0c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000c06:	6878      	ldr	r0, [r7, #4]
 8000c08:	f000 f949 	bl	8000e9e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000c0c:	6a3b      	ldr	r3, [r7, #32]
 8000c0e:	f003 0308 	and.w	r3, r3, #8
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d00c      	beq.n	8000c30 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	f003 0310 	and.w	r3, r3, #16
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d007      	beq.n	8000c30 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c26:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2210      	movs	r2, #16
 8000c2e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000c30:	6a3b      	ldr	r3, [r7, #32]
 8000c32:	f003 0304 	and.w	r3, r3, #4
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d00b      	beq.n	8000c52 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	f003 0308 	and.w	r3, r3, #8
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d006      	beq.n	8000c52 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2208      	movs	r2, #8
 8000c4a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000c4c:	6878      	ldr	r0, [r7, #4]
 8000c4e:	f000 f930 	bl	8000eb2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000c52:	6a3b      	ldr	r3, [r7, #32]
 8000c54:	f003 0302 	and.w	r3, r3, #2
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d009      	beq.n	8000c70 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	68db      	ldr	r3, [r3, #12]
 8000c62:	f003 0303 	and.w	r3, r3, #3
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d002      	beq.n	8000c70 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	f002 fb26 	bl	80032bc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000c70:	6a3b      	ldr	r3, [r7, #32]
 8000c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d00c      	beq.n	8000c94 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	f003 0310 	and.w	r3, r3, #16
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d007      	beq.n	8000c94 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c8a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2210      	movs	r2, #16
 8000c92:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000c94:	6a3b      	ldr	r3, [r7, #32]
 8000c96:	f003 0320 	and.w	r3, r3, #32
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d00b      	beq.n	8000cb6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000c9e:	693b      	ldr	r3, [r7, #16]
 8000ca0:	f003 0308 	and.w	r3, r3, #8
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d006      	beq.n	8000cb6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	2208      	movs	r2, #8
 8000cae:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000cb0:	6878      	ldr	r0, [r7, #4]
 8000cb2:	f000 f912 	bl	8000eda <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000cb6:	6a3b      	ldr	r3, [r7, #32]
 8000cb8:	f003 0310 	and.w	r3, r3, #16
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d009      	beq.n	8000cd4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	691b      	ldr	r3, [r3, #16]
 8000cc6:	f003 0303 	and.w	r3, r3, #3
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d002      	beq.n	8000cd4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000cce:	6878      	ldr	r0, [r7, #4]
 8000cd0:	f000 f8f9 	bl	8000ec6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000cd4:	6a3b      	ldr	r3, [r7, #32]
 8000cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d00b      	beq.n	8000cf6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	f003 0310 	and.w	r3, r3, #16
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d006      	beq.n	8000cf6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2210      	movs	r2, #16
 8000cee:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f000 f8fc 	bl	8000eee <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000cf6:	6a3b      	ldr	r3, [r7, #32]
 8000cf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d00b      	beq.n	8000d18 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000d00:	69fb      	ldr	r3, [r7, #28]
 8000d02:	f003 0308 	and.w	r3, r3, #8
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d006      	beq.n	8000d18 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	2208      	movs	r2, #8
 8000d10:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f000 f8f5 	bl	8000f02 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000d18:	6a3b      	ldr	r3, [r7, #32]
 8000d1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d07b      	beq.n	8000e1a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	f003 0304 	and.w	r3, r3, #4
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d072      	beq.n	8000e12 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000d2c:	6a3b      	ldr	r3, [r7, #32]
 8000d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d008      	beq.n	8000d48 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d003      	beq.n	8000d48 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8000d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d42:	f043 0301 	orr.w	r3, r3, #1
 8000d46:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000d48:	6a3b      	ldr	r3, [r7, #32]
 8000d4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d008      	beq.n	8000d64 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d003      	beq.n	8000d64 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8000d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d5e:	f043 0302 	orr.w	r3, r3, #2
 8000d62:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000d64:	6a3b      	ldr	r3, [r7, #32]
 8000d66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d008      	beq.n	8000d80 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d003      	beq.n	8000d80 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8000d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d7a:	f043 0304 	orr.w	r3, r3, #4
 8000d7e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000d80:	6a3b      	ldr	r3, [r7, #32]
 8000d82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d043      	beq.n	8000e12 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d03e      	beq.n	8000e12 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000d9a:	2b60      	cmp	r3, #96	; 0x60
 8000d9c:	d02b      	beq.n	8000df6 <HAL_CAN_IRQHandler+0x32a>
 8000d9e:	2b60      	cmp	r3, #96	; 0x60
 8000da0:	d82e      	bhi.n	8000e00 <HAL_CAN_IRQHandler+0x334>
 8000da2:	2b50      	cmp	r3, #80	; 0x50
 8000da4:	d022      	beq.n	8000dec <HAL_CAN_IRQHandler+0x320>
 8000da6:	2b50      	cmp	r3, #80	; 0x50
 8000da8:	d82a      	bhi.n	8000e00 <HAL_CAN_IRQHandler+0x334>
 8000daa:	2b40      	cmp	r3, #64	; 0x40
 8000dac:	d019      	beq.n	8000de2 <HAL_CAN_IRQHandler+0x316>
 8000dae:	2b40      	cmp	r3, #64	; 0x40
 8000db0:	d826      	bhi.n	8000e00 <HAL_CAN_IRQHandler+0x334>
 8000db2:	2b30      	cmp	r3, #48	; 0x30
 8000db4:	d010      	beq.n	8000dd8 <HAL_CAN_IRQHandler+0x30c>
 8000db6:	2b30      	cmp	r3, #48	; 0x30
 8000db8:	d822      	bhi.n	8000e00 <HAL_CAN_IRQHandler+0x334>
 8000dba:	2b10      	cmp	r3, #16
 8000dbc:	d002      	beq.n	8000dc4 <HAL_CAN_IRQHandler+0x2f8>
 8000dbe:	2b20      	cmp	r3, #32
 8000dc0:	d005      	beq.n	8000dce <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8000dc2:	e01d      	b.n	8000e00 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8000dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc6:	f043 0308 	orr.w	r3, r3, #8
 8000dca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000dcc:	e019      	b.n	8000e02 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd0:	f043 0310 	orr.w	r3, r3, #16
 8000dd4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000dd6:	e014      	b.n	8000e02 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dda:	f043 0320 	orr.w	r3, r3, #32
 8000dde:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000de0:	e00f      	b.n	8000e02 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8000de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000de8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000dea:	e00a      	b.n	8000e02 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8000dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000df2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000df4:	e005      	b.n	8000e02 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dfc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000dfe:	e000      	b.n	8000e02 <HAL_CAN_IRQHandler+0x336>
            break;
 8000e00:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	699a      	ldr	r2, [r3, #24]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000e10:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2204      	movs	r2, #4
 8000e18:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d008      	beq.n	8000e32 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e26:	431a      	orrs	r2, r3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f000 f872 	bl	8000f16 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8000e32:	bf00      	nop
 8000e34:	3728      	adds	r7, #40	; 0x28
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	b083      	sub	sp, #12
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8000e42:	bf00      	nop
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr

08000e4e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	b083      	sub	sp, #12
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8000e56:	bf00      	nop
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr

08000e62 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000e62:	b480      	push	{r7}
 8000e64:	b083      	sub	sp, #12
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8000e6a:	bf00      	nop
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr

08000e76 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000e76:	b480      	push	{r7}
 8000e78:	b083      	sub	sp, #12
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8000e7e:	bf00      	nop
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr

08000e8a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	b083      	sub	sp, #12
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8000e92:	bf00      	nop
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr

08000e9e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	b083      	sub	sp, #12
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8000ea6:	bf00      	nop
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	b083      	sub	sp, #12
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8000eba:	bf00      	nop
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr

08000ec6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	b083      	sub	sp, #12
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8000ece:	bf00      	nop
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr

08000eda <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8000eda:	b480      	push	{r7}
 8000edc:	b083      	sub	sp, #12
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8000ee2:	bf00      	nop
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr

08000eee <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	b083      	sub	sp, #12
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8000ef6:	bf00      	nop
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8000f02:	b480      	push	{r7}
 8000f04:	b083      	sub	sp, #12
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8000f0a:	bf00      	nop
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8000f16:	b480      	push	{r7}
 8000f18:	b083      	sub	sp, #12
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8000f1e:	bf00      	nop
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
	...

08000f2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f3c:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <__NVIC_SetPriorityGrouping+0x44>)
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f42:	68ba      	ldr	r2, [r7, #8]
 8000f44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f48:	4013      	ands	r3, r2
 8000f4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f5e:	4a04      	ldr	r2, [pc, #16]	; (8000f70 <__NVIC_SetPriorityGrouping+0x44>)
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	60d3      	str	r3, [r2, #12]
}
 8000f64:	bf00      	nop
 8000f66:	3714      	adds	r7, #20
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f78:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <__NVIC_GetPriorityGrouping+0x18>)
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	0a1b      	lsrs	r3, r3, #8
 8000f7e:	f003 0307 	and.w	r3, r3, #7
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	db0b      	blt.n	8000fba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	f003 021f 	and.w	r2, r3, #31
 8000fa8:	4907      	ldr	r1, [pc, #28]	; (8000fc8 <__NVIC_EnableIRQ+0x38>)
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	095b      	lsrs	r3, r3, #5
 8000fb0:	2001      	movs	r0, #1
 8000fb2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fba:	bf00      	nop
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	e000e100 	.word	0xe000e100

08000fcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	6039      	str	r1, [r7, #0]
 8000fd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	db0a      	blt.n	8000ff6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	b2da      	uxtb	r2, r3
 8000fe4:	490c      	ldr	r1, [pc, #48]	; (8001018 <__NVIC_SetPriority+0x4c>)
 8000fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fea:	0112      	lsls	r2, r2, #4
 8000fec:	b2d2      	uxtb	r2, r2
 8000fee:	440b      	add	r3, r1
 8000ff0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ff4:	e00a      	b.n	800100c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	4908      	ldr	r1, [pc, #32]	; (800101c <__NVIC_SetPriority+0x50>)
 8000ffc:	79fb      	ldrb	r3, [r7, #7]
 8000ffe:	f003 030f 	and.w	r3, r3, #15
 8001002:	3b04      	subs	r3, #4
 8001004:	0112      	lsls	r2, r2, #4
 8001006:	b2d2      	uxtb	r2, r2
 8001008:	440b      	add	r3, r1
 800100a:	761a      	strb	r2, [r3, #24]
}
 800100c:	bf00      	nop
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	e000e100 	.word	0xe000e100
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001020:	b480      	push	{r7}
 8001022:	b089      	sub	sp, #36	; 0x24
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	f003 0307 	and.w	r3, r3, #7
 8001032:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	f1c3 0307 	rsb	r3, r3, #7
 800103a:	2b04      	cmp	r3, #4
 800103c:	bf28      	it	cs
 800103e:	2304      	movcs	r3, #4
 8001040:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	3304      	adds	r3, #4
 8001046:	2b06      	cmp	r3, #6
 8001048:	d902      	bls.n	8001050 <NVIC_EncodePriority+0x30>
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	3b03      	subs	r3, #3
 800104e:	e000      	b.n	8001052 <NVIC_EncodePriority+0x32>
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001054:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001058:	69bb      	ldr	r3, [r7, #24]
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	43da      	mvns	r2, r3
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	401a      	ands	r2, r3
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001068:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	fa01 f303 	lsl.w	r3, r1, r3
 8001072:	43d9      	mvns	r1, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001078:	4313      	orrs	r3, r2
         );
}
 800107a:	4618      	mov	r0, r3
 800107c:	3724      	adds	r7, #36	; 0x24
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
	...

08001088 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3b01      	subs	r3, #1
 8001094:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001098:	d301      	bcc.n	800109e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800109a:	2301      	movs	r3, #1
 800109c:	e00f      	b.n	80010be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800109e:	4a0a      	ldr	r2, [pc, #40]	; (80010c8 <SysTick_Config+0x40>)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3b01      	subs	r3, #1
 80010a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010a6:	210f      	movs	r1, #15
 80010a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010ac:	f7ff ff8e 	bl	8000fcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010b0:	4b05      	ldr	r3, [pc, #20]	; (80010c8 <SysTick_Config+0x40>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010b6:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <SysTick_Config+0x40>)
 80010b8:	2207      	movs	r2, #7
 80010ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	e000e010 	.word	0xe000e010

080010cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f7ff ff29 	bl	8000f2c <__NVIC_SetPriorityGrouping>
}
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b086      	sub	sp, #24
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	4603      	mov	r3, r0
 80010ea:	60b9      	str	r1, [r7, #8]
 80010ec:	607a      	str	r2, [r7, #4]
 80010ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010f4:	f7ff ff3e 	bl	8000f74 <__NVIC_GetPriorityGrouping>
 80010f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	68b9      	ldr	r1, [r7, #8]
 80010fe:	6978      	ldr	r0, [r7, #20]
 8001100:	f7ff ff8e 	bl	8001020 <NVIC_EncodePriority>
 8001104:	4602      	mov	r2, r0
 8001106:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800110a:	4611      	mov	r1, r2
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff ff5d 	bl	8000fcc <__NVIC_SetPriority>
}
 8001112:	bf00      	nop
 8001114:	3718      	adds	r7, #24
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	b082      	sub	sp, #8
 800111e:	af00      	add	r7, sp, #0
 8001120:	4603      	mov	r3, r0
 8001122:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff ff31 	bl	8000f90 <__NVIC_EnableIRQ>
}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b082      	sub	sp, #8
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f7ff ffa2 	bl	8001088 <SysTick_Config>
 8001144:	4603      	mov	r3, r0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001150:	b480      	push	{r7}
 8001152:	b087      	sub	sp, #28
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800115a:	2300      	movs	r3, #0
 800115c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800115e:	e14e      	b.n	80013fe <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	2101      	movs	r1, #1
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	fa01 f303 	lsl.w	r3, r1, r3
 800116c:	4013      	ands	r3, r2
 800116e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	2b00      	cmp	r3, #0
 8001174:	f000 8140 	beq.w	80013f8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f003 0303 	and.w	r3, r3, #3
 8001180:	2b01      	cmp	r3, #1
 8001182:	d005      	beq.n	8001190 <HAL_GPIO_Init+0x40>
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f003 0303 	and.w	r3, r3, #3
 800118c:	2b02      	cmp	r3, #2
 800118e:	d130      	bne.n	80011f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	2203      	movs	r2, #3
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	43db      	mvns	r3, r3
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	4013      	ands	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	68da      	ldr	r2, [r3, #12]
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011c6:	2201      	movs	r2, #1
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	43db      	mvns	r3, r3
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	4013      	ands	r3, r2
 80011d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	091b      	lsrs	r3, r3, #4
 80011dc:	f003 0201 	and.w	r2, r3, #1
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f003 0303 	and.w	r3, r3, #3
 80011fa:	2b03      	cmp	r3, #3
 80011fc:	d017      	beq.n	800122e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	68db      	ldr	r3, [r3, #12]
 8001202:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	2203      	movs	r2, #3
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	43db      	mvns	r3, r3
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	4013      	ands	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	689a      	ldr	r2, [r3, #8]
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	4313      	orrs	r3, r2
 8001226:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f003 0303 	and.w	r3, r3, #3
 8001236:	2b02      	cmp	r3, #2
 8001238:	d123      	bne.n	8001282 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	08da      	lsrs	r2, r3, #3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	3208      	adds	r2, #8
 8001242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001246:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	f003 0307 	and.w	r3, r3, #7
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	220f      	movs	r2, #15
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	43db      	mvns	r3, r3
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	4013      	ands	r3, r2
 800125c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	691a      	ldr	r2, [r3, #16]
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	f003 0307 	and.w	r3, r3, #7
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	4313      	orrs	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	08da      	lsrs	r2, r3, #3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	3208      	adds	r2, #8
 800127c:	6939      	ldr	r1, [r7, #16]
 800127e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	2203      	movs	r2, #3
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	43db      	mvns	r3, r3
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	4013      	ands	r3, r2
 8001298:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f003 0203 	and.w	r2, r3, #3
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	f000 809a 	beq.w	80013f8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c4:	4b55      	ldr	r3, [pc, #340]	; (800141c <HAL_GPIO_Init+0x2cc>)
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	4a54      	ldr	r2, [pc, #336]	; (800141c <HAL_GPIO_Init+0x2cc>)
 80012ca:	f043 0301 	orr.w	r3, r3, #1
 80012ce:	6193      	str	r3, [r2, #24]
 80012d0:	4b52      	ldr	r3, [pc, #328]	; (800141c <HAL_GPIO_Init+0x2cc>)
 80012d2:	699b      	ldr	r3, [r3, #24]
 80012d4:	f003 0301 	and.w	r3, r3, #1
 80012d8:	60bb      	str	r3, [r7, #8]
 80012da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012dc:	4a50      	ldr	r2, [pc, #320]	; (8001420 <HAL_GPIO_Init+0x2d0>)
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	089b      	lsrs	r3, r3, #2
 80012e2:	3302      	adds	r3, #2
 80012e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	f003 0303 	and.w	r3, r3, #3
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	220f      	movs	r2, #15
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	43db      	mvns	r3, r3
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	4013      	ands	r3, r2
 80012fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001306:	d013      	beq.n	8001330 <HAL_GPIO_Init+0x1e0>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4a46      	ldr	r2, [pc, #280]	; (8001424 <HAL_GPIO_Init+0x2d4>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d00d      	beq.n	800132c <HAL_GPIO_Init+0x1dc>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	4a45      	ldr	r2, [pc, #276]	; (8001428 <HAL_GPIO_Init+0x2d8>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d007      	beq.n	8001328 <HAL_GPIO_Init+0x1d8>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4a44      	ldr	r2, [pc, #272]	; (800142c <HAL_GPIO_Init+0x2dc>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d101      	bne.n	8001324 <HAL_GPIO_Init+0x1d4>
 8001320:	2303      	movs	r3, #3
 8001322:	e006      	b.n	8001332 <HAL_GPIO_Init+0x1e2>
 8001324:	2305      	movs	r3, #5
 8001326:	e004      	b.n	8001332 <HAL_GPIO_Init+0x1e2>
 8001328:	2302      	movs	r3, #2
 800132a:	e002      	b.n	8001332 <HAL_GPIO_Init+0x1e2>
 800132c:	2301      	movs	r3, #1
 800132e:	e000      	b.n	8001332 <HAL_GPIO_Init+0x1e2>
 8001330:	2300      	movs	r3, #0
 8001332:	697a      	ldr	r2, [r7, #20]
 8001334:	f002 0203 	and.w	r2, r2, #3
 8001338:	0092      	lsls	r2, r2, #2
 800133a:	4093      	lsls	r3, r2
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	4313      	orrs	r3, r2
 8001340:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001342:	4937      	ldr	r1, [pc, #220]	; (8001420 <HAL_GPIO_Init+0x2d0>)
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	089b      	lsrs	r3, r3, #2
 8001348:	3302      	adds	r3, #2
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001350:	4b37      	ldr	r3, [pc, #220]	; (8001430 <HAL_GPIO_Init+0x2e0>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	43db      	mvns	r3, r3
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	4013      	ands	r3, r2
 800135e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001368:	2b00      	cmp	r3, #0
 800136a:	d003      	beq.n	8001374 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	4313      	orrs	r3, r2
 8001372:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001374:	4a2e      	ldr	r2, [pc, #184]	; (8001430 <HAL_GPIO_Init+0x2e0>)
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800137a:	4b2d      	ldr	r3, [pc, #180]	; (8001430 <HAL_GPIO_Init+0x2e0>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	43db      	mvns	r3, r3
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	4013      	ands	r3, r2
 8001388:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d003      	beq.n	800139e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	4313      	orrs	r3, r2
 800139c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800139e:	4a24      	ldr	r2, [pc, #144]	; (8001430 <HAL_GPIO_Init+0x2e0>)
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013a4:	4b22      	ldr	r3, [pc, #136]	; (8001430 <HAL_GPIO_Init+0x2e0>)
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	43db      	mvns	r3, r3
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	4013      	ands	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d003      	beq.n	80013c8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80013c8:	4a19      	ldr	r2, [pc, #100]	; (8001430 <HAL_GPIO_Init+0x2e0>)
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013ce:	4b18      	ldr	r3, [pc, #96]	; (8001430 <HAL_GPIO_Init+0x2e0>)
 80013d0:	68db      	ldr	r3, [r3, #12]
 80013d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	43db      	mvns	r3, r3
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	4013      	ands	r3, r2
 80013dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d003      	beq.n	80013f2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80013f2:	4a0f      	ldr	r2, [pc, #60]	; (8001430 <HAL_GPIO_Init+0x2e0>)
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	3301      	adds	r3, #1
 80013fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	fa22 f303 	lsr.w	r3, r2, r3
 8001408:	2b00      	cmp	r3, #0
 800140a:	f47f aea9 	bne.w	8001160 <HAL_GPIO_Init+0x10>
  }
}
 800140e:	bf00      	nop
 8001410:	bf00      	nop
 8001412:	371c      	adds	r7, #28
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	40021000 	.word	0x40021000
 8001420:	40010000 	.word	0x40010000
 8001424:	48000400 	.word	0x48000400
 8001428:	48000800 	.word	0x48000800
 800142c:	48000c00 	.word	0x48000c00
 8001430:	40010400 	.word	0x40010400

08001434 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	460b      	mov	r3, r1
 800143e:	807b      	strh	r3, [r7, #2]
 8001440:	4613      	mov	r3, r2
 8001442:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001444:	787b      	ldrb	r3, [r7, #1]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d003      	beq.n	8001452 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800144a:	887a      	ldrh	r2, [r7, #2]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001450:	e002      	b.n	8001458 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001452:	887a      	ldrh	r2, [r7, #2]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800146a:	af00      	add	r7, sp, #0
 800146c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001470:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001474:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001476:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800147a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d102      	bne.n	800148a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	f001 b823 	b.w	80024d0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800148a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800148e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	2b00      	cmp	r3, #0
 800149c:	f000 817d 	beq.w	800179a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80014a0:	4bbc      	ldr	r3, [pc, #752]	; (8001794 <HAL_RCC_OscConfig+0x330>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f003 030c 	and.w	r3, r3, #12
 80014a8:	2b04      	cmp	r3, #4
 80014aa:	d00c      	beq.n	80014c6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014ac:	4bb9      	ldr	r3, [pc, #740]	; (8001794 <HAL_RCC_OscConfig+0x330>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f003 030c 	and.w	r3, r3, #12
 80014b4:	2b08      	cmp	r3, #8
 80014b6:	d15c      	bne.n	8001572 <HAL_RCC_OscConfig+0x10e>
 80014b8:	4bb6      	ldr	r3, [pc, #728]	; (8001794 <HAL_RCC_OscConfig+0x330>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014c4:	d155      	bne.n	8001572 <HAL_RCC_OscConfig+0x10e>
 80014c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014ca:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ce:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80014d2:	fa93 f3a3 	rbit	r3, r3
 80014d6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80014da:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014de:	fab3 f383 	clz	r3, r3
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	095b      	lsrs	r3, r3, #5
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d102      	bne.n	80014f8 <HAL_RCC_OscConfig+0x94>
 80014f2:	4ba8      	ldr	r3, [pc, #672]	; (8001794 <HAL_RCC_OscConfig+0x330>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	e015      	b.n	8001524 <HAL_RCC_OscConfig+0xc0>
 80014f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014fc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001500:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001504:	fa93 f3a3 	rbit	r3, r3
 8001508:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800150c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001510:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001514:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001518:	fa93 f3a3 	rbit	r3, r3
 800151c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001520:	4b9c      	ldr	r3, [pc, #624]	; (8001794 <HAL_RCC_OscConfig+0x330>)
 8001522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001524:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001528:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800152c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001530:	fa92 f2a2 	rbit	r2, r2
 8001534:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001538:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800153c:	fab2 f282 	clz	r2, r2
 8001540:	b2d2      	uxtb	r2, r2
 8001542:	f042 0220 	orr.w	r2, r2, #32
 8001546:	b2d2      	uxtb	r2, r2
 8001548:	f002 021f 	and.w	r2, r2, #31
 800154c:	2101      	movs	r1, #1
 800154e:	fa01 f202 	lsl.w	r2, r1, r2
 8001552:	4013      	ands	r3, r2
 8001554:	2b00      	cmp	r3, #0
 8001556:	f000 811f 	beq.w	8001798 <HAL_RCC_OscConfig+0x334>
 800155a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800155e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	2b00      	cmp	r3, #0
 8001568:	f040 8116 	bne.w	8001798 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	f000 bfaf 	b.w	80024d0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001572:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001576:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001582:	d106      	bne.n	8001592 <HAL_RCC_OscConfig+0x12e>
 8001584:	4b83      	ldr	r3, [pc, #524]	; (8001794 <HAL_RCC_OscConfig+0x330>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a82      	ldr	r2, [pc, #520]	; (8001794 <HAL_RCC_OscConfig+0x330>)
 800158a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800158e:	6013      	str	r3, [r2, #0]
 8001590:	e036      	b.n	8001600 <HAL_RCC_OscConfig+0x19c>
 8001592:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001596:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d10c      	bne.n	80015bc <HAL_RCC_OscConfig+0x158>
 80015a2:	4b7c      	ldr	r3, [pc, #496]	; (8001794 <HAL_RCC_OscConfig+0x330>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a7b      	ldr	r2, [pc, #492]	; (8001794 <HAL_RCC_OscConfig+0x330>)
 80015a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015ac:	6013      	str	r3, [r2, #0]
 80015ae:	4b79      	ldr	r3, [pc, #484]	; (8001794 <HAL_RCC_OscConfig+0x330>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a78      	ldr	r2, [pc, #480]	; (8001794 <HAL_RCC_OscConfig+0x330>)
 80015b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015b8:	6013      	str	r3, [r2, #0]
 80015ba:	e021      	b.n	8001600 <HAL_RCC_OscConfig+0x19c>
 80015bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015cc:	d10c      	bne.n	80015e8 <HAL_RCC_OscConfig+0x184>
 80015ce:	4b71      	ldr	r3, [pc, #452]	; (8001794 <HAL_RCC_OscConfig+0x330>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a70      	ldr	r2, [pc, #448]	; (8001794 <HAL_RCC_OscConfig+0x330>)
 80015d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015d8:	6013      	str	r3, [r2, #0]
 80015da:	4b6e      	ldr	r3, [pc, #440]	; (8001794 <HAL_RCC_OscConfig+0x330>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a6d      	ldr	r2, [pc, #436]	; (8001794 <HAL_RCC_OscConfig+0x330>)
 80015e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015e4:	6013      	str	r3, [r2, #0]
 80015e6:	e00b      	b.n	8001600 <HAL_RCC_OscConfig+0x19c>
 80015e8:	4b6a      	ldr	r3, [pc, #424]	; (8001794 <HAL_RCC_OscConfig+0x330>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a69      	ldr	r2, [pc, #420]	; (8001794 <HAL_RCC_OscConfig+0x330>)
 80015ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015f2:	6013      	str	r3, [r2, #0]
 80015f4:	4b67      	ldr	r3, [pc, #412]	; (8001794 <HAL_RCC_OscConfig+0x330>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a66      	ldr	r2, [pc, #408]	; (8001794 <HAL_RCC_OscConfig+0x330>)
 80015fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015fe:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001600:	4b64      	ldr	r3, [pc, #400]	; (8001794 <HAL_RCC_OscConfig+0x330>)
 8001602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001604:	f023 020f 	bic.w	r2, r3, #15
 8001608:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800160c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	495f      	ldr	r1, [pc, #380]	; (8001794 <HAL_RCC_OscConfig+0x330>)
 8001616:	4313      	orrs	r3, r2
 8001618:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800161a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800161e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d059      	beq.n	80016de <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162a:	f7fe fe27 	bl	800027c <HAL_GetTick>
 800162e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001632:	e00a      	b.n	800164a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001634:	f7fe fe22 	bl	800027c <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	2b64      	cmp	r3, #100	; 0x64
 8001642:	d902      	bls.n	800164a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001644:	2303      	movs	r3, #3
 8001646:	f000 bf43 	b.w	80024d0 <HAL_RCC_OscConfig+0x106c>
 800164a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800164e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001652:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001656:	fa93 f3a3 	rbit	r3, r3
 800165a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800165e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001662:	fab3 f383 	clz	r3, r3
 8001666:	b2db      	uxtb	r3, r3
 8001668:	095b      	lsrs	r3, r3, #5
 800166a:	b2db      	uxtb	r3, r3
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	b2db      	uxtb	r3, r3
 8001672:	2b01      	cmp	r3, #1
 8001674:	d102      	bne.n	800167c <HAL_RCC_OscConfig+0x218>
 8001676:	4b47      	ldr	r3, [pc, #284]	; (8001794 <HAL_RCC_OscConfig+0x330>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	e015      	b.n	80016a8 <HAL_RCC_OscConfig+0x244>
 800167c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001680:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001684:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001688:	fa93 f3a3 	rbit	r3, r3
 800168c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001690:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001694:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001698:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800169c:	fa93 f3a3 	rbit	r3, r3
 80016a0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80016a4:	4b3b      	ldr	r3, [pc, #236]	; (8001794 <HAL_RCC_OscConfig+0x330>)
 80016a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80016ac:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80016b0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80016b4:	fa92 f2a2 	rbit	r2, r2
 80016b8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80016bc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80016c0:	fab2 f282 	clz	r2, r2
 80016c4:	b2d2      	uxtb	r2, r2
 80016c6:	f042 0220 	orr.w	r2, r2, #32
 80016ca:	b2d2      	uxtb	r2, r2
 80016cc:	f002 021f 	and.w	r2, r2, #31
 80016d0:	2101      	movs	r1, #1
 80016d2:	fa01 f202 	lsl.w	r2, r1, r2
 80016d6:	4013      	ands	r3, r2
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d0ab      	beq.n	8001634 <HAL_RCC_OscConfig+0x1d0>
 80016dc:	e05d      	b.n	800179a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016de:	f7fe fdcd 	bl	800027c <HAL_GetTick>
 80016e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016e6:	e00a      	b.n	80016fe <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016e8:	f7fe fdc8 	bl	800027c <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	2b64      	cmp	r3, #100	; 0x64
 80016f6:	d902      	bls.n	80016fe <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	f000 bee9 	b.w	80024d0 <HAL_RCC_OscConfig+0x106c>
 80016fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001702:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001706:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800170a:	fa93 f3a3 	rbit	r3, r3
 800170e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001712:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001716:	fab3 f383 	clz	r3, r3
 800171a:	b2db      	uxtb	r3, r3
 800171c:	095b      	lsrs	r3, r3, #5
 800171e:	b2db      	uxtb	r3, r3
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	b2db      	uxtb	r3, r3
 8001726:	2b01      	cmp	r3, #1
 8001728:	d102      	bne.n	8001730 <HAL_RCC_OscConfig+0x2cc>
 800172a:	4b1a      	ldr	r3, [pc, #104]	; (8001794 <HAL_RCC_OscConfig+0x330>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	e015      	b.n	800175c <HAL_RCC_OscConfig+0x2f8>
 8001730:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001734:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001738:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800173c:	fa93 f3a3 	rbit	r3, r3
 8001740:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001744:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001748:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800174c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001750:	fa93 f3a3 	rbit	r3, r3
 8001754:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001758:	4b0e      	ldr	r3, [pc, #56]	; (8001794 <HAL_RCC_OscConfig+0x330>)
 800175a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001760:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001764:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001768:	fa92 f2a2 	rbit	r2, r2
 800176c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001770:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001774:	fab2 f282 	clz	r2, r2
 8001778:	b2d2      	uxtb	r2, r2
 800177a:	f042 0220 	orr.w	r2, r2, #32
 800177e:	b2d2      	uxtb	r2, r2
 8001780:	f002 021f 	and.w	r2, r2, #31
 8001784:	2101      	movs	r1, #1
 8001786:	fa01 f202 	lsl.w	r2, r1, r2
 800178a:	4013      	ands	r3, r2
 800178c:	2b00      	cmp	r3, #0
 800178e:	d1ab      	bne.n	80016e8 <HAL_RCC_OscConfig+0x284>
 8001790:	e003      	b.n	800179a <HAL_RCC_OscConfig+0x336>
 8001792:	bf00      	nop
 8001794:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001798:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800179a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800179e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	f000 817d 	beq.w	8001aaa <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80017b0:	4ba6      	ldr	r3, [pc, #664]	; (8001a4c <HAL_RCC_OscConfig+0x5e8>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f003 030c 	and.w	r3, r3, #12
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d00b      	beq.n	80017d4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80017bc:	4ba3      	ldr	r3, [pc, #652]	; (8001a4c <HAL_RCC_OscConfig+0x5e8>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f003 030c 	and.w	r3, r3, #12
 80017c4:	2b08      	cmp	r3, #8
 80017c6:	d172      	bne.n	80018ae <HAL_RCC_OscConfig+0x44a>
 80017c8:	4ba0      	ldr	r3, [pc, #640]	; (8001a4c <HAL_RCC_OscConfig+0x5e8>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d16c      	bne.n	80018ae <HAL_RCC_OscConfig+0x44a>
 80017d4:	2302      	movs	r3, #2
 80017d6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017da:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80017de:	fa93 f3a3 	rbit	r3, r3
 80017e2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80017e6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ea:	fab3 f383 	clz	r3, r3
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	095b      	lsrs	r3, r3, #5
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d102      	bne.n	8001804 <HAL_RCC_OscConfig+0x3a0>
 80017fe:	4b93      	ldr	r3, [pc, #588]	; (8001a4c <HAL_RCC_OscConfig+0x5e8>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	e013      	b.n	800182c <HAL_RCC_OscConfig+0x3c8>
 8001804:	2302      	movs	r3, #2
 8001806:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800180a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800180e:	fa93 f3a3 	rbit	r3, r3
 8001812:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001816:	2302      	movs	r3, #2
 8001818:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800181c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001820:	fa93 f3a3 	rbit	r3, r3
 8001824:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001828:	4b88      	ldr	r3, [pc, #544]	; (8001a4c <HAL_RCC_OscConfig+0x5e8>)
 800182a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182c:	2202      	movs	r2, #2
 800182e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001832:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001836:	fa92 f2a2 	rbit	r2, r2
 800183a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800183e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001842:	fab2 f282 	clz	r2, r2
 8001846:	b2d2      	uxtb	r2, r2
 8001848:	f042 0220 	orr.w	r2, r2, #32
 800184c:	b2d2      	uxtb	r2, r2
 800184e:	f002 021f 	and.w	r2, r2, #31
 8001852:	2101      	movs	r1, #1
 8001854:	fa01 f202 	lsl.w	r2, r1, r2
 8001858:	4013      	ands	r3, r2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d00a      	beq.n	8001874 <HAL_RCC_OscConfig+0x410>
 800185e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001862:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	691b      	ldr	r3, [r3, #16]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d002      	beq.n	8001874 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	f000 be2e 	b.w	80024d0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001874:	4b75      	ldr	r3, [pc, #468]	; (8001a4c <HAL_RCC_OscConfig+0x5e8>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800187c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001880:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	695b      	ldr	r3, [r3, #20]
 8001888:	21f8      	movs	r1, #248	; 0xf8
 800188a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800188e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001892:	fa91 f1a1 	rbit	r1, r1
 8001896:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800189a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800189e:	fab1 f181 	clz	r1, r1
 80018a2:	b2c9      	uxtb	r1, r1
 80018a4:	408b      	lsls	r3, r1
 80018a6:	4969      	ldr	r1, [pc, #420]	; (8001a4c <HAL_RCC_OscConfig+0x5e8>)
 80018a8:	4313      	orrs	r3, r2
 80018aa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ac:	e0fd      	b.n	8001aaa <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	691b      	ldr	r3, [r3, #16]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	f000 8088 	beq.w	80019d0 <HAL_RCC_OscConfig+0x56c>
 80018c0:	2301      	movs	r3, #1
 80018c2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80018ca:	fa93 f3a3 	rbit	r3, r3
 80018ce:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80018d2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018d6:	fab3 f383 	clz	r3, r3
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018e0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	461a      	mov	r2, r3
 80018e8:	2301      	movs	r3, #1
 80018ea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ec:	f7fe fcc6 	bl	800027c <HAL_GetTick>
 80018f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018f4:	e00a      	b.n	800190c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018f6:	f7fe fcc1 	bl	800027c <HAL_GetTick>
 80018fa:	4602      	mov	r2, r0
 80018fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d902      	bls.n	800190c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	f000 bde2 	b.w	80024d0 <HAL_RCC_OscConfig+0x106c>
 800190c:	2302      	movs	r3, #2
 800190e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001912:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001916:	fa93 f3a3 	rbit	r3, r3
 800191a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800191e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001922:	fab3 f383 	clz	r3, r3
 8001926:	b2db      	uxtb	r3, r3
 8001928:	095b      	lsrs	r3, r3, #5
 800192a:	b2db      	uxtb	r3, r3
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	b2db      	uxtb	r3, r3
 8001932:	2b01      	cmp	r3, #1
 8001934:	d102      	bne.n	800193c <HAL_RCC_OscConfig+0x4d8>
 8001936:	4b45      	ldr	r3, [pc, #276]	; (8001a4c <HAL_RCC_OscConfig+0x5e8>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	e013      	b.n	8001964 <HAL_RCC_OscConfig+0x500>
 800193c:	2302      	movs	r3, #2
 800193e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001942:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001946:	fa93 f3a3 	rbit	r3, r3
 800194a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800194e:	2302      	movs	r3, #2
 8001950:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001954:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001958:	fa93 f3a3 	rbit	r3, r3
 800195c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001960:	4b3a      	ldr	r3, [pc, #232]	; (8001a4c <HAL_RCC_OscConfig+0x5e8>)
 8001962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001964:	2202      	movs	r2, #2
 8001966:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800196a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800196e:	fa92 f2a2 	rbit	r2, r2
 8001972:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001976:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800197a:	fab2 f282 	clz	r2, r2
 800197e:	b2d2      	uxtb	r2, r2
 8001980:	f042 0220 	orr.w	r2, r2, #32
 8001984:	b2d2      	uxtb	r2, r2
 8001986:	f002 021f 	and.w	r2, r2, #31
 800198a:	2101      	movs	r1, #1
 800198c:	fa01 f202 	lsl.w	r2, r1, r2
 8001990:	4013      	ands	r3, r2
 8001992:	2b00      	cmp	r3, #0
 8001994:	d0af      	beq.n	80018f6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001996:	4b2d      	ldr	r3, [pc, #180]	; (8001a4c <HAL_RCC_OscConfig+0x5e8>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800199e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	695b      	ldr	r3, [r3, #20]
 80019aa:	21f8      	movs	r1, #248	; 0xf8
 80019ac:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80019b4:	fa91 f1a1 	rbit	r1, r1
 80019b8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80019bc:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80019c0:	fab1 f181 	clz	r1, r1
 80019c4:	b2c9      	uxtb	r1, r1
 80019c6:	408b      	lsls	r3, r1
 80019c8:	4920      	ldr	r1, [pc, #128]	; (8001a4c <HAL_RCC_OscConfig+0x5e8>)
 80019ca:	4313      	orrs	r3, r2
 80019cc:	600b      	str	r3, [r1, #0]
 80019ce:	e06c      	b.n	8001aaa <HAL_RCC_OscConfig+0x646>
 80019d0:	2301      	movs	r3, #1
 80019d2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80019da:	fa93 f3a3 	rbit	r3, r3
 80019de:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80019e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019e6:	fab3 f383 	clz	r3, r3
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80019f0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	461a      	mov	r2, r3
 80019f8:	2300      	movs	r3, #0
 80019fa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fc:	f7fe fc3e 	bl	800027c <HAL_GetTick>
 8001a00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a04:	e00a      	b.n	8001a1c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a06:	f7fe fc39 	bl	800027c <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d902      	bls.n	8001a1c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	f000 bd5a 	b.w	80024d0 <HAL_RCC_OscConfig+0x106c>
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a22:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001a26:	fa93 f3a3 	rbit	r3, r3
 8001a2a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001a2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a32:	fab3 f383 	clz	r3, r3
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	095b      	lsrs	r3, r3, #5
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	f043 0301 	orr.w	r3, r3, #1
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d104      	bne.n	8001a50 <HAL_RCC_OscConfig+0x5ec>
 8001a46:	4b01      	ldr	r3, [pc, #4]	; (8001a4c <HAL_RCC_OscConfig+0x5e8>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	e015      	b.n	8001a78 <HAL_RCC_OscConfig+0x614>
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	2302      	movs	r3, #2
 8001a52:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a56:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001a5a:	fa93 f3a3 	rbit	r3, r3
 8001a5e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001a62:	2302      	movs	r3, #2
 8001a64:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001a68:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001a6c:	fa93 f3a3 	rbit	r3, r3
 8001a70:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001a74:	4bc8      	ldr	r3, [pc, #800]	; (8001d98 <HAL_RCC_OscConfig+0x934>)
 8001a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a78:	2202      	movs	r2, #2
 8001a7a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001a7e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001a82:	fa92 f2a2 	rbit	r2, r2
 8001a86:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001a8a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001a8e:	fab2 f282 	clz	r2, r2
 8001a92:	b2d2      	uxtb	r2, r2
 8001a94:	f042 0220 	orr.w	r2, r2, #32
 8001a98:	b2d2      	uxtb	r2, r2
 8001a9a:	f002 021f 	and.w	r2, r2, #31
 8001a9e:	2101      	movs	r1, #1
 8001aa0:	fa01 f202 	lsl.w	r2, r1, r2
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d1ad      	bne.n	8001a06 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0308 	and.w	r3, r3, #8
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	f000 8110 	beq.w	8001ce0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ac0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d079      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x760>
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001ada:	fa93 f3a3 	rbit	r3, r3
 8001ade:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001ae2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ae6:	fab3 f383 	clz	r3, r3
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	461a      	mov	r2, r3
 8001aee:	4bab      	ldr	r3, [pc, #684]	; (8001d9c <HAL_RCC_OscConfig+0x938>)
 8001af0:	4413      	add	r3, r2
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	461a      	mov	r2, r3
 8001af6:	2301      	movs	r3, #1
 8001af8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001afa:	f7fe fbbf 	bl	800027c <HAL_GetTick>
 8001afe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b02:	e00a      	b.n	8001b1a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b04:	f7fe fbba 	bl	800027c <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d902      	bls.n	8001b1a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	f000 bcdb 	b.w	80024d0 <HAL_RCC_OscConfig+0x106c>
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b20:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001b24:	fa93 f3a3 	rbit	r3, r3
 8001b28:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001b2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b30:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001b34:	2202      	movs	r2, #2
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b3c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	fa93 f2a3 	rbit	r2, r3
 8001b46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001b58:	2202      	movs	r2, #2
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	fa93 f2a3 	rbit	r2, r3
 8001b6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b6e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001b72:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b74:	4b88      	ldr	r3, [pc, #544]	; (8001d98 <HAL_RCC_OscConfig+0x934>)
 8001b76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b7c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001b80:	2102      	movs	r1, #2
 8001b82:	6019      	str	r1, [r3, #0]
 8001b84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b88:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	fa93 f1a3 	rbit	r1, r3
 8001b92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b96:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001b9a:	6019      	str	r1, [r3, #0]
  return result;
 8001b9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	fab3 f383 	clz	r3, r3
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	f003 031f 	and.w	r3, r3, #31
 8001bb6:	2101      	movs	r1, #1
 8001bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d0a0      	beq.n	8001b04 <HAL_RCC_OscConfig+0x6a0>
 8001bc2:	e08d      	b.n	8001ce0 <HAL_RCC_OscConfig+0x87c>
 8001bc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001bcc:	2201      	movs	r2, #1
 8001bce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	fa93 f2a3 	rbit	r2, r3
 8001bde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001be2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001be6:	601a      	str	r2, [r3, #0]
  return result;
 8001be8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bec:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001bf0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bf2:	fab3 f383 	clz	r3, r3
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	4b68      	ldr	r3, [pc, #416]	; (8001d9c <HAL_RCC_OscConfig+0x938>)
 8001bfc:	4413      	add	r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	461a      	mov	r2, r3
 8001c02:	2300      	movs	r3, #0
 8001c04:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c06:	f7fe fb39 	bl	800027c <HAL_GetTick>
 8001c0a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c0e:	e00a      	b.n	8001c26 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c10:	f7fe fb34 	bl	800027c <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d902      	bls.n	8001c26 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	f000 bc55 	b.w	80024d0 <HAL_RCC_OscConfig+0x106c>
 8001c26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c2a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001c2e:	2202      	movs	r2, #2
 8001c30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c36:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	fa93 f2a3 	rbit	r2, r3
 8001c40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c44:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c4e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001c52:	2202      	movs	r2, #2
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c5a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	fa93 f2a3 	rbit	r2, r3
 8001c64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c68:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001c76:	2202      	movs	r2, #2
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	fa93 f2a3 	rbit	r2, r3
 8001c88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c8c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001c90:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c92:	4b41      	ldr	r3, [pc, #260]	; (8001d98 <HAL_RCC_OscConfig+0x934>)
 8001c94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c9a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001c9e:	2102      	movs	r1, #2
 8001ca0:	6019      	str	r1, [r3, #0]
 8001ca2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	fa93 f1a3 	rbit	r1, r3
 8001cb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001cb8:	6019      	str	r1, [r3, #0]
  return result;
 8001cba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cbe:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	fab3 f383 	clz	r3, r3
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	f003 031f 	and.w	r3, r3, #31
 8001cd4:	2101      	movs	r1, #1
 8001cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cda:	4013      	ands	r3, r2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d197      	bne.n	8001c10 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ce0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0304 	and.w	r3, r3, #4
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	f000 81a1 	beq.w	8002038 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cfc:	4b26      	ldr	r3, [pc, #152]	; (8001d98 <HAL_RCC_OscConfig+0x934>)
 8001cfe:	69db      	ldr	r3, [r3, #28]
 8001d00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d116      	bne.n	8001d36 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d08:	4b23      	ldr	r3, [pc, #140]	; (8001d98 <HAL_RCC_OscConfig+0x934>)
 8001d0a:	69db      	ldr	r3, [r3, #28]
 8001d0c:	4a22      	ldr	r2, [pc, #136]	; (8001d98 <HAL_RCC_OscConfig+0x934>)
 8001d0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d12:	61d3      	str	r3, [r2, #28]
 8001d14:	4b20      	ldr	r3, [pc, #128]	; (8001d98 <HAL_RCC_OscConfig+0x934>)
 8001d16:	69db      	ldr	r3, [r3, #28]
 8001d18:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001d1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d20:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001d24:	601a      	str	r2, [r3, #0]
 8001d26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d2a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001d2e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001d30:	2301      	movs	r3, #1
 8001d32:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d36:	4b1a      	ldr	r3, [pc, #104]	; (8001da0 <HAL_RCC_OscConfig+0x93c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d11a      	bne.n	8001d78 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d42:	4b17      	ldr	r3, [pc, #92]	; (8001da0 <HAL_RCC_OscConfig+0x93c>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a16      	ldr	r2, [pc, #88]	; (8001da0 <HAL_RCC_OscConfig+0x93c>)
 8001d48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d4c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d4e:	f7fe fa95 	bl	800027c <HAL_GetTick>
 8001d52:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d56:	e009      	b.n	8001d6c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d58:	f7fe fa90 	bl	800027c <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b64      	cmp	r3, #100	; 0x64
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e3b1      	b.n	80024d0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d6c:	4b0c      	ldr	r3, [pc, #48]	; (8001da0 <HAL_RCC_OscConfig+0x93c>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d0ef      	beq.n	8001d58 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d7c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d10d      	bne.n	8001da4 <HAL_RCC_OscConfig+0x940>
 8001d88:	4b03      	ldr	r3, [pc, #12]	; (8001d98 <HAL_RCC_OscConfig+0x934>)
 8001d8a:	6a1b      	ldr	r3, [r3, #32]
 8001d8c:	4a02      	ldr	r2, [pc, #8]	; (8001d98 <HAL_RCC_OscConfig+0x934>)
 8001d8e:	f043 0301 	orr.w	r3, r3, #1
 8001d92:	6213      	str	r3, [r2, #32]
 8001d94:	e03c      	b.n	8001e10 <HAL_RCC_OscConfig+0x9ac>
 8001d96:	bf00      	nop
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	10908120 	.word	0x10908120
 8001da0:	40007000 	.word	0x40007000
 8001da4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001da8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d10c      	bne.n	8001dce <HAL_RCC_OscConfig+0x96a>
 8001db4:	4bc1      	ldr	r3, [pc, #772]	; (80020bc <HAL_RCC_OscConfig+0xc58>)
 8001db6:	6a1b      	ldr	r3, [r3, #32]
 8001db8:	4ac0      	ldr	r2, [pc, #768]	; (80020bc <HAL_RCC_OscConfig+0xc58>)
 8001dba:	f023 0301 	bic.w	r3, r3, #1
 8001dbe:	6213      	str	r3, [r2, #32]
 8001dc0:	4bbe      	ldr	r3, [pc, #760]	; (80020bc <HAL_RCC_OscConfig+0xc58>)
 8001dc2:	6a1b      	ldr	r3, [r3, #32]
 8001dc4:	4abd      	ldr	r2, [pc, #756]	; (80020bc <HAL_RCC_OscConfig+0xc58>)
 8001dc6:	f023 0304 	bic.w	r3, r3, #4
 8001dca:	6213      	str	r3, [r2, #32]
 8001dcc:	e020      	b.n	8001e10 <HAL_RCC_OscConfig+0x9ac>
 8001dce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dd2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	2b05      	cmp	r3, #5
 8001ddc:	d10c      	bne.n	8001df8 <HAL_RCC_OscConfig+0x994>
 8001dde:	4bb7      	ldr	r3, [pc, #732]	; (80020bc <HAL_RCC_OscConfig+0xc58>)
 8001de0:	6a1b      	ldr	r3, [r3, #32]
 8001de2:	4ab6      	ldr	r2, [pc, #728]	; (80020bc <HAL_RCC_OscConfig+0xc58>)
 8001de4:	f043 0304 	orr.w	r3, r3, #4
 8001de8:	6213      	str	r3, [r2, #32]
 8001dea:	4bb4      	ldr	r3, [pc, #720]	; (80020bc <HAL_RCC_OscConfig+0xc58>)
 8001dec:	6a1b      	ldr	r3, [r3, #32]
 8001dee:	4ab3      	ldr	r2, [pc, #716]	; (80020bc <HAL_RCC_OscConfig+0xc58>)
 8001df0:	f043 0301 	orr.w	r3, r3, #1
 8001df4:	6213      	str	r3, [r2, #32]
 8001df6:	e00b      	b.n	8001e10 <HAL_RCC_OscConfig+0x9ac>
 8001df8:	4bb0      	ldr	r3, [pc, #704]	; (80020bc <HAL_RCC_OscConfig+0xc58>)
 8001dfa:	6a1b      	ldr	r3, [r3, #32]
 8001dfc:	4aaf      	ldr	r2, [pc, #700]	; (80020bc <HAL_RCC_OscConfig+0xc58>)
 8001dfe:	f023 0301 	bic.w	r3, r3, #1
 8001e02:	6213      	str	r3, [r2, #32]
 8001e04:	4bad      	ldr	r3, [pc, #692]	; (80020bc <HAL_RCC_OscConfig+0xc58>)
 8001e06:	6a1b      	ldr	r3, [r3, #32]
 8001e08:	4aac      	ldr	r2, [pc, #688]	; (80020bc <HAL_RCC_OscConfig+0xc58>)
 8001e0a:	f023 0304 	bic.w	r3, r3, #4
 8001e0e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e14:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	f000 8081 	beq.w	8001f24 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e22:	f7fe fa2b 	bl	800027c <HAL_GetTick>
 8001e26:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e2a:	e00b      	b.n	8001e44 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e2c:	f7fe fa26 	bl	800027c <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d901      	bls.n	8001e44 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e345      	b.n	80024d0 <HAL_RCC_OscConfig+0x106c>
 8001e44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e48:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001e4c:	2202      	movs	r2, #2
 8001e4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e54:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	fa93 f2a3 	rbit	r2, r3
 8001e5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e62:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e6c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001e70:	2202      	movs	r2, #2
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e78:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	fa93 f2a3 	rbit	r2, r3
 8001e82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e86:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001e8a:	601a      	str	r2, [r3, #0]
  return result;
 8001e8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e90:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001e94:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e96:	fab3 f383 	clz	r3, r3
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	095b      	lsrs	r3, r3, #5
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	f043 0302 	orr.w	r3, r3, #2
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d102      	bne.n	8001eb0 <HAL_RCC_OscConfig+0xa4c>
 8001eaa:	4b84      	ldr	r3, [pc, #528]	; (80020bc <HAL_RCC_OscConfig+0xc58>)
 8001eac:	6a1b      	ldr	r3, [r3, #32]
 8001eae:	e013      	b.n	8001ed8 <HAL_RCC_OscConfig+0xa74>
 8001eb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eb4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001eb8:	2202      	movs	r2, #2
 8001eba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ebc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ec0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	fa93 f2a3 	rbit	r2, r3
 8001eca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ece:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	4b79      	ldr	r3, [pc, #484]	; (80020bc <HAL_RCC_OscConfig+0xc58>)
 8001ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001edc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001ee0:	2102      	movs	r1, #2
 8001ee2:	6011      	str	r1, [r2, #0]
 8001ee4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ee8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001eec:	6812      	ldr	r2, [r2, #0]
 8001eee:	fa92 f1a2 	rbit	r1, r2
 8001ef2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ef6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001efa:	6011      	str	r1, [r2, #0]
  return result;
 8001efc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f00:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001f04:	6812      	ldr	r2, [r2, #0]
 8001f06:	fab2 f282 	clz	r2, r2
 8001f0a:	b2d2      	uxtb	r2, r2
 8001f0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f10:	b2d2      	uxtb	r2, r2
 8001f12:	f002 021f 	and.w	r2, r2, #31
 8001f16:	2101      	movs	r1, #1
 8001f18:	fa01 f202 	lsl.w	r2, r1, r2
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d084      	beq.n	8001e2c <HAL_RCC_OscConfig+0x9c8>
 8001f22:	e07f      	b.n	8002024 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f24:	f7fe f9aa 	bl	800027c <HAL_GetTick>
 8001f28:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f2c:	e00b      	b.n	8001f46 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f2e:	f7fe f9a5 	bl	800027c <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e2c4      	b.n	80024d0 <HAL_RCC_OscConfig+0x106c>
 8001f46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f4a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001f4e:	2202      	movs	r2, #2
 8001f50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f56:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	fa93 f2a3 	rbit	r2, r3
 8001f60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f64:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001f68:	601a      	str	r2, [r3, #0]
 8001f6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f6e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001f72:	2202      	movs	r2, #2
 8001f74:	601a      	str	r2, [r3, #0]
 8001f76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f7a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	fa93 f2a3 	rbit	r2, r3
 8001f84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f88:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001f8c:	601a      	str	r2, [r3, #0]
  return result;
 8001f8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f92:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001f96:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f98:	fab3 f383 	clz	r3, r3
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	095b      	lsrs	r3, r3, #5
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	f043 0302 	orr.w	r3, r3, #2
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d102      	bne.n	8001fb2 <HAL_RCC_OscConfig+0xb4e>
 8001fac:	4b43      	ldr	r3, [pc, #268]	; (80020bc <HAL_RCC_OscConfig+0xc58>)
 8001fae:	6a1b      	ldr	r3, [r3, #32]
 8001fb0:	e013      	b.n	8001fda <HAL_RCC_OscConfig+0xb76>
 8001fb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fb6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001fba:	2202      	movs	r2, #2
 8001fbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fc2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	fa93 f2a3 	rbit	r2, r3
 8001fcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fd0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001fd4:	601a      	str	r2, [r3, #0]
 8001fd6:	4b39      	ldr	r3, [pc, #228]	; (80020bc <HAL_RCC_OscConfig+0xc58>)
 8001fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fda:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001fde:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001fe2:	2102      	movs	r1, #2
 8001fe4:	6011      	str	r1, [r2, #0]
 8001fe6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001fea:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001fee:	6812      	ldr	r2, [r2, #0]
 8001ff0:	fa92 f1a2 	rbit	r1, r2
 8001ff4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ff8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001ffc:	6011      	str	r1, [r2, #0]
  return result;
 8001ffe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002002:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002006:	6812      	ldr	r2, [r2, #0]
 8002008:	fab2 f282 	clz	r2, r2
 800200c:	b2d2      	uxtb	r2, r2
 800200e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002012:	b2d2      	uxtb	r2, r2
 8002014:	f002 021f 	and.w	r2, r2, #31
 8002018:	2101      	movs	r1, #1
 800201a:	fa01 f202 	lsl.w	r2, r1, r2
 800201e:	4013      	ands	r3, r2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d184      	bne.n	8001f2e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002024:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002028:	2b01      	cmp	r3, #1
 800202a:	d105      	bne.n	8002038 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800202c:	4b23      	ldr	r3, [pc, #140]	; (80020bc <HAL_RCC_OscConfig+0xc58>)
 800202e:	69db      	ldr	r3, [r3, #28]
 8002030:	4a22      	ldr	r2, [pc, #136]	; (80020bc <HAL_RCC_OscConfig+0xc58>)
 8002032:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002036:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002038:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800203c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	69db      	ldr	r3, [r3, #28]
 8002044:	2b00      	cmp	r3, #0
 8002046:	f000 8242 	beq.w	80024ce <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800204a:	4b1c      	ldr	r3, [pc, #112]	; (80020bc <HAL_RCC_OscConfig+0xc58>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f003 030c 	and.w	r3, r3, #12
 8002052:	2b08      	cmp	r3, #8
 8002054:	f000 8213 	beq.w	800247e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002058:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800205c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	69db      	ldr	r3, [r3, #28]
 8002064:	2b02      	cmp	r3, #2
 8002066:	f040 8162 	bne.w	800232e <HAL_RCC_OscConfig+0xeca>
 800206a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800206e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002072:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002076:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002078:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800207c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	fa93 f2a3 	rbit	r2, r3
 8002086:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800208a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800208e:	601a      	str	r2, [r3, #0]
  return result;
 8002090:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002094:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002098:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800209a:	fab3 f383 	clz	r3, r3
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80020a4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	461a      	mov	r2, r3
 80020ac:	2300      	movs	r3, #0
 80020ae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b0:	f7fe f8e4 	bl	800027c <HAL_GetTick>
 80020b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020b8:	e00c      	b.n	80020d4 <HAL_RCC_OscConfig+0xc70>
 80020ba:	bf00      	nop
 80020bc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020c0:	f7fe f8dc 	bl	800027c <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d901      	bls.n	80020d4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e1fd      	b.n	80024d0 <HAL_RCC_OscConfig+0x106c>
 80020d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020d8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80020dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020e6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	fa93 f2a3 	rbit	r2, r3
 80020f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020f4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80020f8:	601a      	str	r2, [r3, #0]
  return result;
 80020fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020fe:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002102:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002104:	fab3 f383 	clz	r3, r3
 8002108:	b2db      	uxtb	r3, r3
 800210a:	095b      	lsrs	r3, r3, #5
 800210c:	b2db      	uxtb	r3, r3
 800210e:	f043 0301 	orr.w	r3, r3, #1
 8002112:	b2db      	uxtb	r3, r3
 8002114:	2b01      	cmp	r3, #1
 8002116:	d102      	bne.n	800211e <HAL_RCC_OscConfig+0xcba>
 8002118:	4bb0      	ldr	r3, [pc, #704]	; (80023dc <HAL_RCC_OscConfig+0xf78>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	e027      	b.n	800216e <HAL_RCC_OscConfig+0xd0a>
 800211e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002122:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002126:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800212a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002130:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	fa93 f2a3 	rbit	r2, r3
 800213a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800213e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002148:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800214c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002156:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	fa93 f2a3 	rbit	r2, r3
 8002160:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002164:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	4b9c      	ldr	r3, [pc, #624]	; (80023dc <HAL_RCC_OscConfig+0xf78>)
 800216c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002172:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002176:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800217a:	6011      	str	r1, [r2, #0]
 800217c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002180:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002184:	6812      	ldr	r2, [r2, #0]
 8002186:	fa92 f1a2 	rbit	r1, r2
 800218a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800218e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002192:	6011      	str	r1, [r2, #0]
  return result;
 8002194:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002198:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800219c:	6812      	ldr	r2, [r2, #0]
 800219e:	fab2 f282 	clz	r2, r2
 80021a2:	b2d2      	uxtb	r2, r2
 80021a4:	f042 0220 	orr.w	r2, r2, #32
 80021a8:	b2d2      	uxtb	r2, r2
 80021aa:	f002 021f 	and.w	r2, r2, #31
 80021ae:	2101      	movs	r1, #1
 80021b0:	fa01 f202 	lsl.w	r2, r1, r2
 80021b4:	4013      	ands	r3, r2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d182      	bne.n	80020c0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021ba:	4b88      	ldr	r3, [pc, #544]	; (80023dc <HAL_RCC_OscConfig+0xf78>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80021c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80021ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6a1b      	ldr	r3, [r3, #32]
 80021da:	430b      	orrs	r3, r1
 80021dc:	497f      	ldr	r1, [pc, #508]	; (80023dc <HAL_RCC_OscConfig+0xf78>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	604b      	str	r3, [r1, #4]
 80021e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021e6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80021ea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80021ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021f4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	fa93 f2a3 	rbit	r2, r3
 80021fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002202:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002206:	601a      	str	r2, [r3, #0]
  return result;
 8002208:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800220c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002210:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002212:	fab3 f383 	clz	r3, r3
 8002216:	b2db      	uxtb	r3, r3
 8002218:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800221c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	461a      	mov	r2, r3
 8002224:	2301      	movs	r3, #1
 8002226:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002228:	f7fe f828 	bl	800027c <HAL_GetTick>
 800222c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002230:	e009      	b.n	8002246 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002232:	f7fe f823 	bl	800027c <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b02      	cmp	r3, #2
 8002240:	d901      	bls.n	8002246 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e144      	b.n	80024d0 <HAL_RCC_OscConfig+0x106c>
 8002246:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800224a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800224e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002252:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002254:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002258:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	fa93 f2a3 	rbit	r2, r3
 8002262:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002266:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800226a:	601a      	str	r2, [r3, #0]
  return result;
 800226c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002270:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002274:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002276:	fab3 f383 	clz	r3, r3
 800227a:	b2db      	uxtb	r3, r3
 800227c:	095b      	lsrs	r3, r3, #5
 800227e:	b2db      	uxtb	r3, r3
 8002280:	f043 0301 	orr.w	r3, r3, #1
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b01      	cmp	r3, #1
 8002288:	d102      	bne.n	8002290 <HAL_RCC_OscConfig+0xe2c>
 800228a:	4b54      	ldr	r3, [pc, #336]	; (80023dc <HAL_RCC_OscConfig+0xf78>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	e027      	b.n	80022e0 <HAL_RCC_OscConfig+0xe7c>
 8002290:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002294:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002298:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800229c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022a2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	fa93 f2a3 	rbit	r2, r3
 80022ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022b0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80022b4:	601a      	str	r2, [r3, #0]
 80022b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ba:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80022be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022c8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	fa93 f2a3 	rbit	r2, r3
 80022d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022d6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	4b3f      	ldr	r3, [pc, #252]	; (80023dc <HAL_RCC_OscConfig+0xf78>)
 80022de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022e4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80022e8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80022ec:	6011      	str	r1, [r2, #0]
 80022ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022f2:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80022f6:	6812      	ldr	r2, [r2, #0]
 80022f8:	fa92 f1a2 	rbit	r1, r2
 80022fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002300:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002304:	6011      	str	r1, [r2, #0]
  return result;
 8002306:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800230a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800230e:	6812      	ldr	r2, [r2, #0]
 8002310:	fab2 f282 	clz	r2, r2
 8002314:	b2d2      	uxtb	r2, r2
 8002316:	f042 0220 	orr.w	r2, r2, #32
 800231a:	b2d2      	uxtb	r2, r2
 800231c:	f002 021f 	and.w	r2, r2, #31
 8002320:	2101      	movs	r1, #1
 8002322:	fa01 f202 	lsl.w	r2, r1, r2
 8002326:	4013      	ands	r3, r2
 8002328:	2b00      	cmp	r3, #0
 800232a:	d082      	beq.n	8002232 <HAL_RCC_OscConfig+0xdce>
 800232c:	e0cf      	b.n	80024ce <HAL_RCC_OscConfig+0x106a>
 800232e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002332:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002336:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800233a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800233c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002340:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	fa93 f2a3 	rbit	r2, r3
 800234a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800234e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002352:	601a      	str	r2, [r3, #0]
  return result;
 8002354:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002358:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800235c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800235e:	fab3 f383 	clz	r3, r3
 8002362:	b2db      	uxtb	r3, r3
 8002364:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002368:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	461a      	mov	r2, r3
 8002370:	2300      	movs	r3, #0
 8002372:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002374:	f7fd ff82 	bl	800027c <HAL_GetTick>
 8002378:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800237c:	e009      	b.n	8002392 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800237e:	f7fd ff7d 	bl	800027c <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b02      	cmp	r3, #2
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e09e      	b.n	80024d0 <HAL_RCC_OscConfig+0x106c>
 8002392:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002396:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800239a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800239e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023a4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	fa93 f2a3 	rbit	r2, r3
 80023ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80023b6:	601a      	str	r2, [r3, #0]
  return result;
 80023b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023bc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80023c0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023c2:	fab3 f383 	clz	r3, r3
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	095b      	lsrs	r3, r3, #5
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	f043 0301 	orr.w	r3, r3, #1
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d104      	bne.n	80023e0 <HAL_RCC_OscConfig+0xf7c>
 80023d6:	4b01      	ldr	r3, [pc, #4]	; (80023dc <HAL_RCC_OscConfig+0xf78>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	e029      	b.n	8002430 <HAL_RCC_OscConfig+0xfcc>
 80023dc:	40021000 	.word	0x40021000
 80023e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023e4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80023e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023f2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	fa93 f2a3 	rbit	r2, r3
 80023fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002400:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002404:	601a      	str	r2, [r3, #0]
 8002406:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800240a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800240e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002418:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	fa93 f2a3 	rbit	r2, r3
 8002422:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002426:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	4b2b      	ldr	r3, [pc, #172]	; (80024dc <HAL_RCC_OscConfig+0x1078>)
 800242e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002430:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002434:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002438:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800243c:	6011      	str	r1, [r2, #0]
 800243e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002442:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002446:	6812      	ldr	r2, [r2, #0]
 8002448:	fa92 f1a2 	rbit	r1, r2
 800244c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002450:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002454:	6011      	str	r1, [r2, #0]
  return result;
 8002456:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800245a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800245e:	6812      	ldr	r2, [r2, #0]
 8002460:	fab2 f282 	clz	r2, r2
 8002464:	b2d2      	uxtb	r2, r2
 8002466:	f042 0220 	orr.w	r2, r2, #32
 800246a:	b2d2      	uxtb	r2, r2
 800246c:	f002 021f 	and.w	r2, r2, #31
 8002470:	2101      	movs	r1, #1
 8002472:	fa01 f202 	lsl.w	r2, r1, r2
 8002476:	4013      	ands	r3, r2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d180      	bne.n	800237e <HAL_RCC_OscConfig+0xf1a>
 800247c:	e027      	b.n	80024ce <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800247e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002482:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	69db      	ldr	r3, [r3, #28]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d101      	bne.n	8002492 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e01e      	b.n	80024d0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002492:	4b12      	ldr	r3, [pc, #72]	; (80024dc <HAL_RCC_OscConfig+0x1078>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800249a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800249e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80024a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	6a1b      	ldr	r3, [r3, #32]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d10b      	bne.n	80024ca <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80024b2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80024b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80024ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d001      	beq.n	80024ce <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e000      	b.n	80024d0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	40021000 	.word	0x40021000

080024e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b09e      	sub	sp, #120	; 0x78
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80024ea:	2300      	movs	r3, #0
 80024ec:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d101      	bne.n	80024f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e162      	b.n	80027be <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024f8:	4b90      	ldr	r3, [pc, #576]	; (800273c <HAL_RCC_ClockConfig+0x25c>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0307 	and.w	r3, r3, #7
 8002500:	683a      	ldr	r2, [r7, #0]
 8002502:	429a      	cmp	r2, r3
 8002504:	d910      	bls.n	8002528 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002506:	4b8d      	ldr	r3, [pc, #564]	; (800273c <HAL_RCC_ClockConfig+0x25c>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f023 0207 	bic.w	r2, r3, #7
 800250e:	498b      	ldr	r1, [pc, #556]	; (800273c <HAL_RCC_ClockConfig+0x25c>)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	4313      	orrs	r3, r2
 8002514:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002516:	4b89      	ldr	r3, [pc, #548]	; (800273c <HAL_RCC_ClockConfig+0x25c>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0307 	and.w	r3, r3, #7
 800251e:	683a      	ldr	r2, [r7, #0]
 8002520:	429a      	cmp	r2, r3
 8002522:	d001      	beq.n	8002528 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e14a      	b.n	80027be <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d008      	beq.n	8002546 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002534:	4b82      	ldr	r3, [pc, #520]	; (8002740 <HAL_RCC_ClockConfig+0x260>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	497f      	ldr	r1, [pc, #508]	; (8002740 <HAL_RCC_ClockConfig+0x260>)
 8002542:	4313      	orrs	r3, r2
 8002544:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b00      	cmp	r3, #0
 8002550:	f000 80dc 	beq.w	800270c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d13c      	bne.n	80025d6 <HAL_RCC_ClockConfig+0xf6>
 800255c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002560:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002562:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002564:	fa93 f3a3 	rbit	r3, r3
 8002568:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800256a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800256c:	fab3 f383 	clz	r3, r3
 8002570:	b2db      	uxtb	r3, r3
 8002572:	095b      	lsrs	r3, r3, #5
 8002574:	b2db      	uxtb	r3, r3
 8002576:	f043 0301 	orr.w	r3, r3, #1
 800257a:	b2db      	uxtb	r3, r3
 800257c:	2b01      	cmp	r3, #1
 800257e:	d102      	bne.n	8002586 <HAL_RCC_ClockConfig+0xa6>
 8002580:	4b6f      	ldr	r3, [pc, #444]	; (8002740 <HAL_RCC_ClockConfig+0x260>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	e00f      	b.n	80025a6 <HAL_RCC_ClockConfig+0xc6>
 8002586:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800258a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800258e:	fa93 f3a3 	rbit	r3, r3
 8002592:	667b      	str	r3, [r7, #100]	; 0x64
 8002594:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002598:	663b      	str	r3, [r7, #96]	; 0x60
 800259a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800259c:	fa93 f3a3 	rbit	r3, r3
 80025a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80025a2:	4b67      	ldr	r3, [pc, #412]	; (8002740 <HAL_RCC_ClockConfig+0x260>)
 80025a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025aa:	65ba      	str	r2, [r7, #88]	; 0x58
 80025ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80025ae:	fa92 f2a2 	rbit	r2, r2
 80025b2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80025b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80025b6:	fab2 f282 	clz	r2, r2
 80025ba:	b2d2      	uxtb	r2, r2
 80025bc:	f042 0220 	orr.w	r2, r2, #32
 80025c0:	b2d2      	uxtb	r2, r2
 80025c2:	f002 021f 	and.w	r2, r2, #31
 80025c6:	2101      	movs	r1, #1
 80025c8:	fa01 f202 	lsl.w	r2, r1, r2
 80025cc:	4013      	ands	r3, r2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d17b      	bne.n	80026ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e0f3      	b.n	80027be <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d13c      	bne.n	8002658 <HAL_RCC_ClockConfig+0x178>
 80025de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025e2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025e6:	fa93 f3a3 	rbit	r3, r3
 80025ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80025ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ee:	fab3 f383 	clz	r3, r3
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	095b      	lsrs	r3, r3, #5
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	f043 0301 	orr.w	r3, r3, #1
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d102      	bne.n	8002608 <HAL_RCC_ClockConfig+0x128>
 8002602:	4b4f      	ldr	r3, [pc, #316]	; (8002740 <HAL_RCC_ClockConfig+0x260>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	e00f      	b.n	8002628 <HAL_RCC_ClockConfig+0x148>
 8002608:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800260c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002610:	fa93 f3a3 	rbit	r3, r3
 8002614:	647b      	str	r3, [r7, #68]	; 0x44
 8002616:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800261a:	643b      	str	r3, [r7, #64]	; 0x40
 800261c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800261e:	fa93 f3a3 	rbit	r3, r3
 8002622:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002624:	4b46      	ldr	r3, [pc, #280]	; (8002740 <HAL_RCC_ClockConfig+0x260>)
 8002626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002628:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800262c:	63ba      	str	r2, [r7, #56]	; 0x38
 800262e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002630:	fa92 f2a2 	rbit	r2, r2
 8002634:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002636:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002638:	fab2 f282 	clz	r2, r2
 800263c:	b2d2      	uxtb	r2, r2
 800263e:	f042 0220 	orr.w	r2, r2, #32
 8002642:	b2d2      	uxtb	r2, r2
 8002644:	f002 021f 	and.w	r2, r2, #31
 8002648:	2101      	movs	r1, #1
 800264a:	fa01 f202 	lsl.w	r2, r1, r2
 800264e:	4013      	ands	r3, r2
 8002650:	2b00      	cmp	r3, #0
 8002652:	d13a      	bne.n	80026ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e0b2      	b.n	80027be <HAL_RCC_ClockConfig+0x2de>
 8002658:	2302      	movs	r3, #2
 800265a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800265e:	fa93 f3a3 	rbit	r3, r3
 8002662:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002666:	fab3 f383 	clz	r3, r3
 800266a:	b2db      	uxtb	r3, r3
 800266c:	095b      	lsrs	r3, r3, #5
 800266e:	b2db      	uxtb	r3, r3
 8002670:	f043 0301 	orr.w	r3, r3, #1
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b01      	cmp	r3, #1
 8002678:	d102      	bne.n	8002680 <HAL_RCC_ClockConfig+0x1a0>
 800267a:	4b31      	ldr	r3, [pc, #196]	; (8002740 <HAL_RCC_ClockConfig+0x260>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	e00d      	b.n	800269c <HAL_RCC_ClockConfig+0x1bc>
 8002680:	2302      	movs	r3, #2
 8002682:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002686:	fa93 f3a3 	rbit	r3, r3
 800268a:	627b      	str	r3, [r7, #36]	; 0x24
 800268c:	2302      	movs	r3, #2
 800268e:	623b      	str	r3, [r7, #32]
 8002690:	6a3b      	ldr	r3, [r7, #32]
 8002692:	fa93 f3a3 	rbit	r3, r3
 8002696:	61fb      	str	r3, [r7, #28]
 8002698:	4b29      	ldr	r3, [pc, #164]	; (8002740 <HAL_RCC_ClockConfig+0x260>)
 800269a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269c:	2202      	movs	r2, #2
 800269e:	61ba      	str	r2, [r7, #24]
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	fa92 f2a2 	rbit	r2, r2
 80026a6:	617a      	str	r2, [r7, #20]
  return result;
 80026a8:	697a      	ldr	r2, [r7, #20]
 80026aa:	fab2 f282 	clz	r2, r2
 80026ae:	b2d2      	uxtb	r2, r2
 80026b0:	f042 0220 	orr.w	r2, r2, #32
 80026b4:	b2d2      	uxtb	r2, r2
 80026b6:	f002 021f 	and.w	r2, r2, #31
 80026ba:	2101      	movs	r1, #1
 80026bc:	fa01 f202 	lsl.w	r2, r1, r2
 80026c0:	4013      	ands	r3, r2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e079      	b.n	80027be <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026ca:	4b1d      	ldr	r3, [pc, #116]	; (8002740 <HAL_RCC_ClockConfig+0x260>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f023 0203 	bic.w	r2, r3, #3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	491a      	ldr	r1, [pc, #104]	; (8002740 <HAL_RCC_ClockConfig+0x260>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026dc:	f7fd fdce 	bl	800027c <HAL_GetTick>
 80026e0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026e2:	e00a      	b.n	80026fa <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026e4:	f7fd fdca 	bl	800027c <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e061      	b.n	80027be <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026fa:	4b11      	ldr	r3, [pc, #68]	; (8002740 <HAL_RCC_ClockConfig+0x260>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f003 020c 	and.w	r2, r3, #12
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	429a      	cmp	r2, r3
 800270a:	d1eb      	bne.n	80026e4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800270c:	4b0b      	ldr	r3, [pc, #44]	; (800273c <HAL_RCC_ClockConfig+0x25c>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0307 	and.w	r3, r3, #7
 8002714:	683a      	ldr	r2, [r7, #0]
 8002716:	429a      	cmp	r2, r3
 8002718:	d214      	bcs.n	8002744 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800271a:	4b08      	ldr	r3, [pc, #32]	; (800273c <HAL_RCC_ClockConfig+0x25c>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f023 0207 	bic.w	r2, r3, #7
 8002722:	4906      	ldr	r1, [pc, #24]	; (800273c <HAL_RCC_ClockConfig+0x25c>)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	4313      	orrs	r3, r2
 8002728:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800272a:	4b04      	ldr	r3, [pc, #16]	; (800273c <HAL_RCC_ClockConfig+0x25c>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0307 	and.w	r3, r3, #7
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	429a      	cmp	r2, r3
 8002736:	d005      	beq.n	8002744 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e040      	b.n	80027be <HAL_RCC_ClockConfig+0x2de>
 800273c:	40022000 	.word	0x40022000
 8002740:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0304 	and.w	r3, r3, #4
 800274c:	2b00      	cmp	r3, #0
 800274e:	d008      	beq.n	8002762 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002750:	4b1d      	ldr	r3, [pc, #116]	; (80027c8 <HAL_RCC_ClockConfig+0x2e8>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	491a      	ldr	r1, [pc, #104]	; (80027c8 <HAL_RCC_ClockConfig+0x2e8>)
 800275e:	4313      	orrs	r3, r2
 8002760:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0308 	and.w	r3, r3, #8
 800276a:	2b00      	cmp	r3, #0
 800276c:	d009      	beq.n	8002782 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800276e:	4b16      	ldr	r3, [pc, #88]	; (80027c8 <HAL_RCC_ClockConfig+0x2e8>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	4912      	ldr	r1, [pc, #72]	; (80027c8 <HAL_RCC_ClockConfig+0x2e8>)
 800277e:	4313      	orrs	r3, r2
 8002780:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002782:	f000 f829 	bl	80027d8 <HAL_RCC_GetSysClockFreq>
 8002786:	4601      	mov	r1, r0
 8002788:	4b0f      	ldr	r3, [pc, #60]	; (80027c8 <HAL_RCC_ClockConfig+0x2e8>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002790:	22f0      	movs	r2, #240	; 0xf0
 8002792:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002794:	693a      	ldr	r2, [r7, #16]
 8002796:	fa92 f2a2 	rbit	r2, r2
 800279a:	60fa      	str	r2, [r7, #12]
  return result;
 800279c:	68fa      	ldr	r2, [r7, #12]
 800279e:	fab2 f282 	clz	r2, r2
 80027a2:	b2d2      	uxtb	r2, r2
 80027a4:	40d3      	lsrs	r3, r2
 80027a6:	4a09      	ldr	r2, [pc, #36]	; (80027cc <HAL_RCC_ClockConfig+0x2ec>)
 80027a8:	5cd3      	ldrb	r3, [r2, r3]
 80027aa:	fa21 f303 	lsr.w	r3, r1, r3
 80027ae:	4a08      	ldr	r2, [pc, #32]	; (80027d0 <HAL_RCC_ClockConfig+0x2f0>)
 80027b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80027b2:	4b08      	ldr	r3, [pc, #32]	; (80027d4 <HAL_RCC_ClockConfig+0x2f4>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7fd fd1c 	bl	80001f4 <HAL_InitTick>
  
  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3778      	adds	r7, #120	; 0x78
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	40021000 	.word	0x40021000
 80027cc:	080036bc 	.word	0x080036bc
 80027d0:	20000014 	.word	0x20000014
 80027d4:	20000000 	.word	0x20000000

080027d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	b08b      	sub	sp, #44	; 0x2c
 80027dc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027de:	2300      	movs	r3, #0
 80027e0:	61fb      	str	r3, [r7, #28]
 80027e2:	2300      	movs	r3, #0
 80027e4:	61bb      	str	r3, [r7, #24]
 80027e6:	2300      	movs	r3, #0
 80027e8:	627b      	str	r3, [r7, #36]	; 0x24
 80027ea:	2300      	movs	r3, #0
 80027ec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80027ee:	2300      	movs	r3, #0
 80027f0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80027f2:	4b29      	ldr	r3, [pc, #164]	; (8002898 <HAL_RCC_GetSysClockFreq+0xc0>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	f003 030c 	and.w	r3, r3, #12
 80027fe:	2b04      	cmp	r3, #4
 8002800:	d002      	beq.n	8002808 <HAL_RCC_GetSysClockFreq+0x30>
 8002802:	2b08      	cmp	r3, #8
 8002804:	d003      	beq.n	800280e <HAL_RCC_GetSysClockFreq+0x36>
 8002806:	e03c      	b.n	8002882 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002808:	4b24      	ldr	r3, [pc, #144]	; (800289c <HAL_RCC_GetSysClockFreq+0xc4>)
 800280a:	623b      	str	r3, [r7, #32]
      break;
 800280c:	e03c      	b.n	8002888 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002814:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002818:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281a:	68ba      	ldr	r2, [r7, #8]
 800281c:	fa92 f2a2 	rbit	r2, r2
 8002820:	607a      	str	r2, [r7, #4]
  return result;
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	fab2 f282 	clz	r2, r2
 8002828:	b2d2      	uxtb	r2, r2
 800282a:	40d3      	lsrs	r3, r2
 800282c:	4a1c      	ldr	r2, [pc, #112]	; (80028a0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800282e:	5cd3      	ldrb	r3, [r2, r3]
 8002830:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002832:	4b19      	ldr	r3, [pc, #100]	; (8002898 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002836:	f003 030f 	and.w	r3, r3, #15
 800283a:	220f      	movs	r2, #15
 800283c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	fa92 f2a2 	rbit	r2, r2
 8002844:	60fa      	str	r2, [r7, #12]
  return result;
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	fab2 f282 	clz	r2, r2
 800284c:	b2d2      	uxtb	r2, r2
 800284e:	40d3      	lsrs	r3, r2
 8002850:	4a14      	ldr	r2, [pc, #80]	; (80028a4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002852:	5cd3      	ldrb	r3, [r2, r3]
 8002854:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d008      	beq.n	8002872 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002860:	4a0e      	ldr	r2, [pc, #56]	; (800289c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	fbb2 f2f3 	udiv	r2, r2, r3
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	fb02 f303 	mul.w	r3, r2, r3
 800286e:	627b      	str	r3, [r7, #36]	; 0x24
 8002870:	e004      	b.n	800287c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	4a0c      	ldr	r2, [pc, #48]	; (80028a8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002876:	fb02 f303 	mul.w	r3, r2, r3
 800287a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800287c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287e:	623b      	str	r3, [r7, #32]
      break;
 8002880:	e002      	b.n	8002888 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002882:	4b06      	ldr	r3, [pc, #24]	; (800289c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002884:	623b      	str	r3, [r7, #32]
      break;
 8002886:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002888:	6a3b      	ldr	r3, [r7, #32]
}
 800288a:	4618      	mov	r0, r3
 800288c:	372c      	adds	r7, #44	; 0x2c
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	40021000 	.word	0x40021000
 800289c:	007a1200 	.word	0x007a1200
 80028a0:	0800369c 	.word	0x0800369c
 80028a4:	080036ac 	.word	0x080036ac
 80028a8:	003d0900 	.word	0x003d0900

080028ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028b0:	4b03      	ldr	r3, [pc, #12]	; (80028c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80028b2:	681b      	ldr	r3, [r3, #0]
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	20000014 	.word	0x20000014

080028c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80028ca:	f7ff ffef 	bl	80028ac <HAL_RCC_GetHCLKFreq>
 80028ce:	4601      	mov	r1, r0
 80028d0:	4b0b      	ldr	r3, [pc, #44]	; (8002900 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80028d8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80028dc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	fa92 f2a2 	rbit	r2, r2
 80028e4:	603a      	str	r2, [r7, #0]
  return result;
 80028e6:	683a      	ldr	r2, [r7, #0]
 80028e8:	fab2 f282 	clz	r2, r2
 80028ec:	b2d2      	uxtb	r2, r2
 80028ee:	40d3      	lsrs	r3, r2
 80028f0:	4a04      	ldr	r2, [pc, #16]	; (8002904 <HAL_RCC_GetPCLK1Freq+0x40>)
 80028f2:	5cd3      	ldrb	r3, [r2, r3]
 80028f4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80028f8:	4618      	mov	r0, r3
 80028fa:	3708      	adds	r7, #8
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	40021000 	.word	0x40021000
 8002904:	080036cc 	.word	0x080036cc

08002908 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800290e:	f7ff ffcd 	bl	80028ac <HAL_RCC_GetHCLKFreq>
 8002912:	4601      	mov	r1, r0
 8002914:	4b0b      	ldr	r3, [pc, #44]	; (8002944 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800291c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002920:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	fa92 f2a2 	rbit	r2, r2
 8002928:	603a      	str	r2, [r7, #0]
  return result;
 800292a:	683a      	ldr	r2, [r7, #0]
 800292c:	fab2 f282 	clz	r2, r2
 8002930:	b2d2      	uxtb	r2, r2
 8002932:	40d3      	lsrs	r3, r2
 8002934:	4a04      	ldr	r2, [pc, #16]	; (8002948 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002936:	5cd3      	ldrb	r3, [r2, r3]
 8002938:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800293c:	4618      	mov	r0, r3
 800293e:	3708      	adds	r7, #8
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	40021000 	.word	0x40021000
 8002948:	080036cc 	.word	0x080036cc

0800294c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e040      	b.n	80029e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002962:	2b00      	cmp	r3, #0
 8002964:	d106      	bne.n	8002974 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 fd62 	bl	8003438 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2224      	movs	r2, #36	; 0x24
 8002978:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f022 0201 	bic.w	r2, r2, #1
 8002988:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 f82c 	bl	80029e8 <UART_SetConfig>
 8002990:	4603      	mov	r3, r0
 8002992:	2b01      	cmp	r3, #1
 8002994:	d101      	bne.n	800299a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e022      	b.n	80029e0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d002      	beq.n	80029a8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 f956 	bl	8002c54 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	685a      	ldr	r2, [r3, #4]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	689a      	ldr	r2, [r3, #8]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f042 0201 	orr.w	r2, r2, #1
 80029d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f000 f9dd 	bl	8002d98 <UART_CheckIdleState>
 80029de:	4603      	mov	r3, r0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3708      	adds	r7, #8
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b088      	sub	sp, #32
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80029f0:	2300      	movs	r3, #0
 80029f2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	431a      	orrs	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	431a      	orrs	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	69db      	ldr	r3, [r3, #28]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	4b8a      	ldr	r3, [pc, #552]	; (8002c3c <UART_SetConfig+0x254>)
 8002a14:	4013      	ands	r3, r2
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	6812      	ldr	r2, [r2, #0]
 8002a1a:	6979      	ldr	r1, [r7, #20]
 8002a1c:	430b      	orrs	r3, r1
 8002a1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	68da      	ldr	r2, [r3, #12]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	430a      	orrs	r2, r1
 8002a34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a1b      	ldr	r3, [r3, #32]
 8002a40:	697a      	ldr	r2, [r7, #20]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	697a      	ldr	r2, [r7, #20]
 8002a56:	430a      	orrs	r2, r1
 8002a58:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a78      	ldr	r2, [pc, #480]	; (8002c40 <UART_SetConfig+0x258>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d120      	bne.n	8002aa6 <UART_SetConfig+0xbe>
 8002a64:	4b77      	ldr	r3, [pc, #476]	; (8002c44 <UART_SetConfig+0x25c>)
 8002a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a68:	f003 0303 	and.w	r3, r3, #3
 8002a6c:	2b03      	cmp	r3, #3
 8002a6e:	d817      	bhi.n	8002aa0 <UART_SetConfig+0xb8>
 8002a70:	a201      	add	r2, pc, #4	; (adr r2, 8002a78 <UART_SetConfig+0x90>)
 8002a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a76:	bf00      	nop
 8002a78:	08002a89 	.word	0x08002a89
 8002a7c:	08002a95 	.word	0x08002a95
 8002a80:	08002a9b 	.word	0x08002a9b
 8002a84:	08002a8f 	.word	0x08002a8f
 8002a88:	2300      	movs	r3, #0
 8002a8a:	77fb      	strb	r3, [r7, #31]
 8002a8c:	e01d      	b.n	8002aca <UART_SetConfig+0xe2>
 8002a8e:	2302      	movs	r3, #2
 8002a90:	77fb      	strb	r3, [r7, #31]
 8002a92:	e01a      	b.n	8002aca <UART_SetConfig+0xe2>
 8002a94:	2304      	movs	r3, #4
 8002a96:	77fb      	strb	r3, [r7, #31]
 8002a98:	e017      	b.n	8002aca <UART_SetConfig+0xe2>
 8002a9a:	2308      	movs	r3, #8
 8002a9c:	77fb      	strb	r3, [r7, #31]
 8002a9e:	e014      	b.n	8002aca <UART_SetConfig+0xe2>
 8002aa0:	2310      	movs	r3, #16
 8002aa2:	77fb      	strb	r3, [r7, #31]
 8002aa4:	e011      	b.n	8002aca <UART_SetConfig+0xe2>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a67      	ldr	r2, [pc, #412]	; (8002c48 <UART_SetConfig+0x260>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d102      	bne.n	8002ab6 <UART_SetConfig+0xce>
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	77fb      	strb	r3, [r7, #31]
 8002ab4:	e009      	b.n	8002aca <UART_SetConfig+0xe2>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a64      	ldr	r2, [pc, #400]	; (8002c4c <UART_SetConfig+0x264>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d102      	bne.n	8002ac6 <UART_SetConfig+0xde>
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	77fb      	strb	r3, [r7, #31]
 8002ac4:	e001      	b.n	8002aca <UART_SetConfig+0xe2>
 8002ac6:	2310      	movs	r3, #16
 8002ac8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	69db      	ldr	r3, [r3, #28]
 8002ace:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ad2:	d15b      	bne.n	8002b8c <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8002ad4:	7ffb      	ldrb	r3, [r7, #31]
 8002ad6:	2b08      	cmp	r3, #8
 8002ad8:	d827      	bhi.n	8002b2a <UART_SetConfig+0x142>
 8002ada:	a201      	add	r2, pc, #4	; (adr r2, 8002ae0 <UART_SetConfig+0xf8>)
 8002adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ae0:	08002b05 	.word	0x08002b05
 8002ae4:	08002b0d 	.word	0x08002b0d
 8002ae8:	08002b15 	.word	0x08002b15
 8002aec:	08002b2b 	.word	0x08002b2b
 8002af0:	08002b1b 	.word	0x08002b1b
 8002af4:	08002b2b 	.word	0x08002b2b
 8002af8:	08002b2b 	.word	0x08002b2b
 8002afc:	08002b2b 	.word	0x08002b2b
 8002b00:	08002b23 	.word	0x08002b23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b04:	f7ff fede 	bl	80028c4 <HAL_RCC_GetPCLK1Freq>
 8002b08:	61b8      	str	r0, [r7, #24]
        break;
 8002b0a:	e013      	b.n	8002b34 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b0c:	f7ff fefc 	bl	8002908 <HAL_RCC_GetPCLK2Freq>
 8002b10:	61b8      	str	r0, [r7, #24]
        break;
 8002b12:	e00f      	b.n	8002b34 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b14:	4b4e      	ldr	r3, [pc, #312]	; (8002c50 <UART_SetConfig+0x268>)
 8002b16:	61bb      	str	r3, [r7, #24]
        break;
 8002b18:	e00c      	b.n	8002b34 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b1a:	f7ff fe5d 	bl	80027d8 <HAL_RCC_GetSysClockFreq>
 8002b1e:	61b8      	str	r0, [r7, #24]
        break;
 8002b20:	e008      	b.n	8002b34 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b26:	61bb      	str	r3, [r7, #24]
        break;
 8002b28:	e004      	b.n	8002b34 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	77bb      	strb	r3, [r7, #30]
        break;
 8002b32:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d074      	beq.n	8002c24 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	005a      	lsls	r2, r3, #1
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	085b      	lsrs	r3, r3, #1
 8002b44:	441a      	add	r2, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	2b0f      	cmp	r3, #15
 8002b56:	d916      	bls.n	8002b86 <UART_SetConfig+0x19e>
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b5e:	d212      	bcs.n	8002b86 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	f023 030f 	bic.w	r3, r3, #15
 8002b68:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	085b      	lsrs	r3, r3, #1
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	f003 0307 	and.w	r3, r3, #7
 8002b74:	b29a      	uxth	r2, r3
 8002b76:	89fb      	ldrh	r3, [r7, #14]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	89fa      	ldrh	r2, [r7, #14]
 8002b82:	60da      	str	r2, [r3, #12]
 8002b84:	e04e      	b.n	8002c24 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	77bb      	strb	r3, [r7, #30]
 8002b8a:	e04b      	b.n	8002c24 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002b8c:	7ffb      	ldrb	r3, [r7, #31]
 8002b8e:	2b08      	cmp	r3, #8
 8002b90:	d827      	bhi.n	8002be2 <UART_SetConfig+0x1fa>
 8002b92:	a201      	add	r2, pc, #4	; (adr r2, 8002b98 <UART_SetConfig+0x1b0>)
 8002b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b98:	08002bbd 	.word	0x08002bbd
 8002b9c:	08002bc5 	.word	0x08002bc5
 8002ba0:	08002bcd 	.word	0x08002bcd
 8002ba4:	08002be3 	.word	0x08002be3
 8002ba8:	08002bd3 	.word	0x08002bd3
 8002bac:	08002be3 	.word	0x08002be3
 8002bb0:	08002be3 	.word	0x08002be3
 8002bb4:	08002be3 	.word	0x08002be3
 8002bb8:	08002bdb 	.word	0x08002bdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002bbc:	f7ff fe82 	bl	80028c4 <HAL_RCC_GetPCLK1Freq>
 8002bc0:	61b8      	str	r0, [r7, #24]
        break;
 8002bc2:	e013      	b.n	8002bec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002bc4:	f7ff fea0 	bl	8002908 <HAL_RCC_GetPCLK2Freq>
 8002bc8:	61b8      	str	r0, [r7, #24]
        break;
 8002bca:	e00f      	b.n	8002bec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002bcc:	4b20      	ldr	r3, [pc, #128]	; (8002c50 <UART_SetConfig+0x268>)
 8002bce:	61bb      	str	r3, [r7, #24]
        break;
 8002bd0:	e00c      	b.n	8002bec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bd2:	f7ff fe01 	bl	80027d8 <HAL_RCC_GetSysClockFreq>
 8002bd6:	61b8      	str	r0, [r7, #24]
        break;
 8002bd8:	e008      	b.n	8002bec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bde:	61bb      	str	r3, [r7, #24]
        break;
 8002be0:	e004      	b.n	8002bec <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002be2:	2300      	movs	r3, #0
 8002be4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	77bb      	strb	r3, [r7, #30]
        break;
 8002bea:	bf00      	nop
    }

    if (pclk != 0U)
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d018      	beq.n	8002c24 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	085a      	lsrs	r2, r3, #1
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	441a      	add	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	2b0f      	cmp	r3, #15
 8002c0c:	d908      	bls.n	8002c20 <UART_SetConfig+0x238>
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c14:	d204      	bcs.n	8002c20 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	60da      	str	r2, [r3, #12]
 8002c1e:	e001      	b.n	8002c24 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002c30:	7fbb      	ldrb	r3, [r7, #30]
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3720      	adds	r7, #32
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	efff69f3 	.word	0xefff69f3
 8002c40:	40013800 	.word	0x40013800
 8002c44:	40021000 	.word	0x40021000
 8002c48:	40004400 	.word	0x40004400
 8002c4c:	40004800 	.word	0x40004800
 8002c50:	007a1200 	.word	0x007a1200

08002c54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00a      	beq.n	8002c7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00a      	beq.n	8002ca0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca4:	f003 0304 	and.w	r3, r3, #4
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d00a      	beq.n	8002cc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc6:	f003 0308 	and.w	r3, r3, #8
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00a      	beq.n	8002ce4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce8:	f003 0310 	and.w	r3, r3, #16
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00a      	beq.n	8002d06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	430a      	orrs	r2, r1
 8002d04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0a:	f003 0320 	and.w	r3, r3, #32
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00a      	beq.n	8002d28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	430a      	orrs	r2, r1
 8002d26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d01a      	beq.n	8002d6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	430a      	orrs	r2, r1
 8002d48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d52:	d10a      	bne.n	8002d6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	430a      	orrs	r2, r1
 8002d68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00a      	beq.n	8002d8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	605a      	str	r2, [r3, #4]
  }
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af02      	add	r7, sp, #8
 8002d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002da8:	f7fd fa68 	bl	800027c <HAL_GetTick>
 8002dac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0308 	and.w	r3, r3, #8
 8002db8:	2b08      	cmp	r3, #8
 8002dba:	d10e      	bne.n	8002dda <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002dbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002dc0:	9300      	str	r3, [sp, #0]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 f82d 	bl	8002e2a <UART_WaitOnFlagUntilTimeout>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e023      	b.n	8002e22 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0304 	and.w	r3, r3, #4
 8002de4:	2b04      	cmp	r3, #4
 8002de6:	d10e      	bne.n	8002e06 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002de8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002dec:	9300      	str	r3, [sp, #0]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 f817 	bl	8002e2a <UART_WaitOnFlagUntilTimeout>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e00d      	b.n	8002e22 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2220      	movs	r2, #32
 8002e0a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2220      	movs	r2, #32
 8002e10:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3710      	adds	r7, #16
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b09c      	sub	sp, #112	; 0x70
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	60f8      	str	r0, [r7, #12]
 8002e32:	60b9      	str	r1, [r7, #8]
 8002e34:	603b      	str	r3, [r7, #0]
 8002e36:	4613      	mov	r3, r2
 8002e38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e3a:	e0a5      	b.n	8002f88 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e42:	f000 80a1 	beq.w	8002f88 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e46:	f7fd fa19 	bl	800027c <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d302      	bcc.n	8002e5c <UART_WaitOnFlagUntilTimeout+0x32>
 8002e56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d13e      	bne.n	8002eda <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e64:	e853 3f00 	ldrex	r3, [r3]
 8002e68:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002e6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e6c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002e70:	667b      	str	r3, [r7, #100]	; 0x64
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	461a      	mov	r2, r3
 8002e78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e7c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e7e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002e80:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002e82:	e841 2300 	strex	r3, r2, [r1]
 8002e86:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002e88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1e6      	bne.n	8002e5c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	3308      	adds	r3, #8
 8002e94:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e98:	e853 3f00 	ldrex	r3, [r3]
 8002e9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ea0:	f023 0301 	bic.w	r3, r3, #1
 8002ea4:	663b      	str	r3, [r7, #96]	; 0x60
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	3308      	adds	r3, #8
 8002eac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002eae:	64ba      	str	r2, [r7, #72]	; 0x48
 8002eb0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eb2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002eb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002eb6:	e841 2300 	strex	r3, r2, [r1]
 8002eba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002ebc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d1e5      	bne.n	8002e8e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2220      	movs	r2, #32
 8002ec6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2220      	movs	r2, #32
 8002ecc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e067      	b.n	8002faa <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0304 	and.w	r3, r3, #4
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d04f      	beq.n	8002f88 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	69db      	ldr	r3, [r3, #28]
 8002eee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ef2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ef6:	d147      	bne.n	8002f88 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f00:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f0a:	e853 3f00 	ldrex	r3, [r3]
 8002f0e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f12:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002f16:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f20:	637b      	str	r3, [r7, #52]	; 0x34
 8002f22:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f24:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f28:	e841 2300 	strex	r3, r2, [r1]
 8002f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d1e6      	bne.n	8002f02 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	3308      	adds	r3, #8
 8002f3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	e853 3f00 	ldrex	r3, [r3]
 8002f42:	613b      	str	r3, [r7, #16]
   return(result);
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	f023 0301 	bic.w	r3, r3, #1
 8002f4a:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	3308      	adds	r3, #8
 8002f52:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002f54:	623a      	str	r2, [r7, #32]
 8002f56:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f58:	69f9      	ldr	r1, [r7, #28]
 8002f5a:	6a3a      	ldr	r2, [r7, #32]
 8002f5c:	e841 2300 	strex	r3, r2, [r1]
 8002f60:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d1e5      	bne.n	8002f34 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2220      	movs	r2, #32
 8002f6c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2220      	movs	r2, #32
 8002f72:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2220      	movs	r2, #32
 8002f78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e010      	b.n	8002faa <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	69da      	ldr	r2, [r3, #28]
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	4013      	ands	r3, r2
 8002f92:	68ba      	ldr	r2, [r7, #8]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	bf0c      	ite	eq
 8002f98:	2301      	moveq	r3, #1
 8002f9a:	2300      	movne	r3, #0
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	79fb      	ldrb	r3, [r7, #7]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	f43f af4a 	beq.w	8002e3c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3770      	adds	r7, #112	; 0x70
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
	...

08002fb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002fb8:	f7fd f906 	bl	80001c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002fbc:	f000 f88e 	bl	80030dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002fc0:	f000 f932 	bl	8003228 <MX_GPIO_Init>
  MX_CAN_Init();
 8002fc4:	f000 f8ca 	bl	800315c <MX_CAN_Init>
  MX_USART2_UART_Init();
 8002fc8:	f000 f8fe 	bl	80031c8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  sFilterConfig.FilterBank = 0;
 8002fcc:	4b3b      	ldr	r3, [pc, #236]	; (80030bc <main+0x108>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002fd2:	4b3a      	ldr	r3, [pc, #232]	; (80030bc <main+0x108>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002fd8:	4b38      	ldr	r3, [pc, #224]	; (80030bc <main+0x108>)
 8002fda:	2201      	movs	r2, #1
 8002fdc:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 8002fde:	4b37      	ldr	r3, [pc, #220]	; (80030bc <main+0x108>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8002fe4:	4b35      	ldr	r3, [pc, #212]	; (80030bc <main+0x108>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8002fea:	4b34      	ldr	r3, [pc, #208]	; (80030bc <main+0x108>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8002ff0:	4b32      	ldr	r3, [pc, #200]	; (80030bc <main+0x108>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8002ff6:	4b31      	ldr	r3, [pc, #196]	; (80030bc <main+0x108>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterActivation=ENABLE;
 8002ffc:	4b2f      	ldr	r3, [pc, #188]	; (80030bc <main+0x108>)
 8002ffe:	2201      	movs	r2, #1
 8003000:	621a      	str	r2, [r3, #32]
  sFilterConfig.SlaveStartFilterBank=14;
 8003002:	4b2e      	ldr	r3, [pc, #184]	; (80030bc <main+0x108>)
 8003004:	220e      	movs	r2, #14
 8003006:	625a      	str	r2, [r3, #36]	; 0x24

  if(HAL_CAN_ConfigFilter(&hcan,&sFilterConfig) != HAL_OK)
 8003008:	492c      	ldr	r1, [pc, #176]	; (80030bc <main+0x108>)
 800300a:	482d      	ldr	r0, [pc, #180]	; (80030c0 <main+0x10c>)
 800300c:	f7fd fa3d 	bl	800048a <HAL_CAN_ConfigFilter>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d001      	beq.n	800301a <main+0x66>
  {
    Error_Handler();
 8003016:	f000 f97d 	bl	8003314 <Error_Handler>
  }
  if(HAL_CAN_Start(&hcan)!=HAL_OK)
 800301a:	4829      	ldr	r0, [pc, #164]	; (80030c0 <main+0x10c>)
 800301c:	f7fd faff 	bl	800061e <HAL_CAN_Start>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <main+0x76>
  {
    Error_Handler();
 8003026:	f000 f975 	bl	8003314 <Error_Handler>
  }

  if(HAL_CAN_ActivateNotification(&hcan,CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 800302a:	2103      	movs	r1, #3
 800302c:	4824      	ldr	r0, [pc, #144]	; (80030c0 <main+0x10c>)
 800302e:	f7fd fd27 	bl	8000a80 <HAL_CAN_ActivateNotification>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <main+0x88>
  {
	Error_Handler();
 8003038:	f000 f96c 	bl	8003314 <Error_Handler>
  }
  TxHeader.StdId=(motor_num << 5) + (control_mode);
 800303c:	4b21      	ldr	r3, [pc, #132]	; (80030c4 <main+0x110>)
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	015b      	lsls	r3, r3, #5
 8003042:	4a21      	ldr	r2, [pc, #132]	; (80030c8 <main+0x114>)
 8003044:	7812      	ldrb	r2, [r2, #0]
 8003046:	4413      	add	r3, r2
 8003048:	461a      	mov	r2, r3
 800304a:	4b20      	ldr	r3, [pc, #128]	; (80030cc <main+0x118>)
 800304c:	601a      	str	r2, [r3, #0]
  TxHeader.RTR = 0;//CAN_RTR_DATA;
 800304e:	4b1f      	ldr	r3, [pc, #124]	; (80030cc <main+0x118>)
 8003050:	2200      	movs	r2, #0
 8003052:	60da      	str	r2, [r3, #12]
  TxHeader.IDE = CAN_ID_STD;
 8003054:	4b1d      	ldr	r3, [pc, #116]	; (80030cc <main+0x118>)
 8003056:	2200      	movs	r2, #0
 8003058:	609a      	str	r2, [r3, #8]
  TxHeader.DLC = 0x08;
 800305a:	4b1c      	ldr	r3, [pc, #112]	; (80030cc <main+0x118>)
 800305c:	2208      	movs	r2, #8
 800305e:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime = DISABLE;
 8003060:	4b1a      	ldr	r3, [pc, #104]	; (80030cc <main+0x118>)
 8003062:	2200      	movs	r2, #0
 8003064:	751a      	strb	r2, [r3, #20]

  TxData[0] = set_point;
 8003066:	4b1a      	ldr	r3, [pc, #104]	; (80030d0 <main+0x11c>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	b2da      	uxtb	r2, r3
 800306c:	4b19      	ldr	r3, [pc, #100]	; (80030d4 <main+0x120>)
 800306e:	701a      	strb	r2, [r3, #0]
  TxData[1] = set_point >> 8;
 8003070:	4b17      	ldr	r3, [pc, #92]	; (80030d0 <main+0x11c>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	121b      	asrs	r3, r3, #8
 8003076:	b2da      	uxtb	r2, r3
 8003078:	4b16      	ldr	r3, [pc, #88]	; (80030d4 <main+0x120>)
 800307a:	705a      	strb	r2, [r3, #1]
  TxData[2] = set_point >> 16;
 800307c:	4b14      	ldr	r3, [pc, #80]	; (80030d0 <main+0x11c>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	141b      	asrs	r3, r3, #16
 8003082:	b2da      	uxtb	r2, r3
 8003084:	4b13      	ldr	r3, [pc, #76]	; (80030d4 <main+0x120>)
 8003086:	709a      	strb	r2, [r3, #2]
  TxData[3] = set_point >> 24;
 8003088:	4b11      	ldr	r3, [pc, #68]	; (80030d0 <main+0x11c>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	161b      	asrs	r3, r3, #24
 800308e:	b2da      	uxtb	r2, r3
 8003090:	4b10      	ldr	r3, [pc, #64]	; (80030d4 <main+0x120>)
 8003092:	70da      	strb	r2, [r3, #3]
  TxData[4] = 0;
 8003094:	4b0f      	ldr	r3, [pc, #60]	; (80030d4 <main+0x120>)
 8003096:	2200      	movs	r2, #0
 8003098:	711a      	strb	r2, [r3, #4]
  TxData[5] = 0;
 800309a:	4b0e      	ldr	r3, [pc, #56]	; (80030d4 <main+0x120>)
 800309c:	2200      	movs	r2, #0
 800309e:	715a      	strb	r2, [r3, #5]
  TxData[6] = 0;
 80030a0:	4b0c      	ldr	r3, [pc, #48]	; (80030d4 <main+0x120>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	719a      	strb	r2, [r3, #6]
  TxData[7] = 0;
 80030a6:	4b0b      	ldr	r3, [pc, #44]	; (80030d4 <main+0x120>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	71da      	strb	r2, [r3, #7]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	HAL_CAN_AddTxMessage(&hcan,&TxHeader,TxData,&TxMailbox);
 80030ac:	4b0a      	ldr	r3, [pc, #40]	; (80030d8 <main+0x124>)
 80030ae:	4a09      	ldr	r2, [pc, #36]	; (80030d4 <main+0x120>)
 80030b0:	4906      	ldr	r1, [pc, #24]	; (80030cc <main+0x118>)
 80030b2:	4803      	ldr	r0, [pc, #12]	; (80030c0 <main+0x10c>)
 80030b4:	f7fd faf7 	bl	80006a6 <HAL_CAN_AddTxMessage>
 80030b8:	e7f8      	b.n	80030ac <main+0xf8>
 80030ba:	bf00      	nop
 80030bc:	200000e4 	.word	0x200000e4
 80030c0:	20000038 	.word	0x20000038
 80030c4:	2000000c 	.word	0x2000000c
 80030c8:	2000000d 	.word	0x2000000d
 80030cc:	2000010c 	.word	0x2000010c
 80030d0:	20000008 	.word	0x20000008
 80030d4:	20000140 	.word	0x20000140
 80030d8:	20000150 	.word	0x20000150

080030dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b090      	sub	sp, #64	; 0x40
 80030e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80030e2:	f107 0318 	add.w	r3, r7, #24
 80030e6:	2228      	movs	r2, #40	; 0x28
 80030e8:	2100      	movs	r1, #0
 80030ea:	4618      	mov	r0, r3
 80030ec:	f000 fac2 	bl	8003674 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80030f0:	1d3b      	adds	r3, r7, #4
 80030f2:	2200      	movs	r2, #0
 80030f4:	601a      	str	r2, [r3, #0]
 80030f6:	605a      	str	r2, [r3, #4]
 80030f8:	609a      	str	r2, [r3, #8]
 80030fa:	60da      	str	r2, [r3, #12]
 80030fc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80030fe:	2302      	movs	r3, #2
 8003100:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003102:	2301      	movs	r3, #1
 8003104:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003106:	2310      	movs	r3, #16
 8003108:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800310a:	2302      	movs	r3, #2
 800310c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800310e:	2300      	movs	r3, #0
 8003110:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003112:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003116:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003118:	f107 0318 	add.w	r3, r7, #24
 800311c:	4618      	mov	r0, r3
 800311e:	f7fe f9a1 	bl	8001464 <HAL_RCC_OscConfig>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d001      	beq.n	800312c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8003128:	f000 f8f4 	bl	8003314 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800312c:	230f      	movs	r3, #15
 800312e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003130:	2302      	movs	r3, #2
 8003132:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003134:	2300      	movs	r3, #0
 8003136:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003138:	2300      	movs	r3, #0
 800313a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800313c:	2300      	movs	r3, #0
 800313e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003140:	1d3b      	adds	r3, r7, #4
 8003142:	2101      	movs	r1, #1
 8003144:	4618      	mov	r0, r3
 8003146:	f7ff f9cb 	bl	80024e0 <HAL_RCC_ClockConfig>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d001      	beq.n	8003154 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8003150:	f000 f8e0 	bl	8003314 <Error_Handler>
  }
}
 8003154:	bf00      	nop
 8003156:	3740      	adds	r7, #64	; 0x40
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8003160:	4b17      	ldr	r3, [pc, #92]	; (80031c0 <MX_CAN_Init+0x64>)
 8003162:	4a18      	ldr	r2, [pc, #96]	; (80031c4 <MX_CAN_Init+0x68>)
 8003164:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 6;
 8003166:	4b16      	ldr	r3, [pc, #88]	; (80031c0 <MX_CAN_Init+0x64>)
 8003168:	2206      	movs	r2, #6
 800316a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800316c:	4b14      	ldr	r3, [pc, #80]	; (80031c0 <MX_CAN_Init+0x64>)
 800316e:	2200      	movs	r2, #0
 8003170:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003172:	4b13      	ldr	r3, [pc, #76]	; (80031c0 <MX_CAN_Init+0x64>)
 8003174:	2200      	movs	r2, #0
 8003176:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_10TQ;
 8003178:	4b11      	ldr	r3, [pc, #68]	; (80031c0 <MX_CAN_Init+0x64>)
 800317a:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 800317e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8003180:	4b0f      	ldr	r3, [pc, #60]	; (80031c0 <MX_CAN_Init+0x64>)
 8003182:	2200      	movs	r2, #0
 8003184:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8003186:	4b0e      	ldr	r3, [pc, #56]	; (80031c0 <MX_CAN_Init+0x64>)
 8003188:	2200      	movs	r2, #0
 800318a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800318c:	4b0c      	ldr	r3, [pc, #48]	; (80031c0 <MX_CAN_Init+0x64>)
 800318e:	2200      	movs	r2, #0
 8003190:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8003192:	4b0b      	ldr	r3, [pc, #44]	; (80031c0 <MX_CAN_Init+0x64>)
 8003194:	2200      	movs	r2, #0
 8003196:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8003198:	4b09      	ldr	r3, [pc, #36]	; (80031c0 <MX_CAN_Init+0x64>)
 800319a:	2200      	movs	r2, #0
 800319c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800319e:	4b08      	ldr	r3, [pc, #32]	; (80031c0 <MX_CAN_Init+0x64>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80031a4:	4b06      	ldr	r3, [pc, #24]	; (80031c0 <MX_CAN_Init+0x64>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80031aa:	4805      	ldr	r0, [pc, #20]	; (80031c0 <MX_CAN_Init+0x64>)
 80031ac:	f7fd f872 	bl	8000294 <HAL_CAN_Init>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d001      	beq.n	80031ba <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 80031b6:	f000 f8ad 	bl	8003314 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80031ba:	bf00      	nop
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	20000038 	.word	0x20000038
 80031c4:	40006400 	.word	0x40006400

080031c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80031cc:	4b14      	ldr	r3, [pc, #80]	; (8003220 <MX_USART2_UART_Init+0x58>)
 80031ce:	4a15      	ldr	r2, [pc, #84]	; (8003224 <MX_USART2_UART_Init+0x5c>)
 80031d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80031d2:	4b13      	ldr	r3, [pc, #76]	; (8003220 <MX_USART2_UART_Init+0x58>)
 80031d4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80031d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80031da:	4b11      	ldr	r3, [pc, #68]	; (8003220 <MX_USART2_UART_Init+0x58>)
 80031dc:	2200      	movs	r2, #0
 80031de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80031e0:	4b0f      	ldr	r3, [pc, #60]	; (8003220 <MX_USART2_UART_Init+0x58>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80031e6:	4b0e      	ldr	r3, [pc, #56]	; (8003220 <MX_USART2_UART_Init+0x58>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80031ec:	4b0c      	ldr	r3, [pc, #48]	; (8003220 <MX_USART2_UART_Init+0x58>)
 80031ee:	220c      	movs	r2, #12
 80031f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031f2:	4b0b      	ldr	r3, [pc, #44]	; (8003220 <MX_USART2_UART_Init+0x58>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80031f8:	4b09      	ldr	r3, [pc, #36]	; (8003220 <MX_USART2_UART_Init+0x58>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80031fe:	4b08      	ldr	r3, [pc, #32]	; (8003220 <MX_USART2_UART_Init+0x58>)
 8003200:	2200      	movs	r2, #0
 8003202:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003204:	4b06      	ldr	r3, [pc, #24]	; (8003220 <MX_USART2_UART_Init+0x58>)
 8003206:	2200      	movs	r2, #0
 8003208:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800320a:	4805      	ldr	r0, [pc, #20]	; (8003220 <MX_USART2_UART_Init+0x58>)
 800320c:	f7ff fb9e 	bl	800294c <HAL_UART_Init>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003216:	f000 f87d 	bl	8003314 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800321a:	bf00      	nop
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	20000060 	.word	0x20000060
 8003224:	40004400 	.word	0x40004400

08003228 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b088      	sub	sp, #32
 800322c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800322e:	f107 030c 	add.w	r3, r7, #12
 8003232:	2200      	movs	r2, #0
 8003234:	601a      	str	r2, [r3, #0]
 8003236:	605a      	str	r2, [r3, #4]
 8003238:	609a      	str	r2, [r3, #8]
 800323a:	60da      	str	r2, [r3, #12]
 800323c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800323e:	4b1d      	ldr	r3, [pc, #116]	; (80032b4 <MX_GPIO_Init+0x8c>)
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	4a1c      	ldr	r2, [pc, #112]	; (80032b4 <MX_GPIO_Init+0x8c>)
 8003244:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003248:	6153      	str	r3, [r2, #20]
 800324a:	4b1a      	ldr	r3, [pc, #104]	; (80032b4 <MX_GPIO_Init+0x8c>)
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003252:	60bb      	str	r3, [r7, #8]
 8003254:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003256:	4b17      	ldr	r3, [pc, #92]	; (80032b4 <MX_GPIO_Init+0x8c>)
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	4a16      	ldr	r2, [pc, #88]	; (80032b4 <MX_GPIO_Init+0x8c>)
 800325c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003260:	6153      	str	r3, [r2, #20]
 8003262:	4b14      	ldr	r3, [pc, #80]	; (80032b4 <MX_GPIO_Init+0x8c>)
 8003264:	695b      	ldr	r3, [r3, #20]
 8003266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800326a:	607b      	str	r3, [r7, #4]
 800326c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800326e:	4b11      	ldr	r3, [pc, #68]	; (80032b4 <MX_GPIO_Init+0x8c>)
 8003270:	695b      	ldr	r3, [r3, #20]
 8003272:	4a10      	ldr	r2, [pc, #64]	; (80032b4 <MX_GPIO_Init+0x8c>)
 8003274:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003278:	6153      	str	r3, [r2, #20]
 800327a:	4b0e      	ldr	r3, [pc, #56]	; (80032b4 <MX_GPIO_Init+0x8c>)
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003282:	603b      	str	r3, [r7, #0]
 8003284:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8003286:	2200      	movs	r2, #0
 8003288:	2108      	movs	r1, #8
 800328a:	480b      	ldr	r0, [pc, #44]	; (80032b8 <MX_GPIO_Init+0x90>)
 800328c:	f7fe f8d2 	bl	8001434 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8003290:	2308      	movs	r3, #8
 8003292:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003294:	2301      	movs	r3, #1
 8003296:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003298:	2300      	movs	r3, #0
 800329a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800329c:	2300      	movs	r3, #0
 800329e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80032a0:	f107 030c 	add.w	r3, r7, #12
 80032a4:	4619      	mov	r1, r3
 80032a6:	4804      	ldr	r0, [pc, #16]	; (80032b8 <MX_GPIO_Init+0x90>)
 80032a8:	f7fd ff52 	bl	8001150 <HAL_GPIO_Init>

}
 80032ac:	bf00      	nop
 80032ae:	3720      	adds	r7, #32
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	40021000 	.word	0x40021000
 80032b8:	48000400 	.word	0x48000400

080032bc <HAL_CAN_RxFifo0MsgPendingCallback>:
{
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,1);
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan_)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  HAL_CAN_GetRxMessage(&hcan,CAN_RX_FIFO0,&RxHeader,RxData);
 80032c4:	4b0e      	ldr	r3, [pc, #56]	; (8003300 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 80032c6:	4a0f      	ldr	r2, [pc, #60]	; (8003304 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 80032c8:	2100      	movs	r1, #0
 80032ca:	480f      	ldr	r0, [pc, #60]	; (8003308 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 80032cc:	f7fd fac6 	bl	800085c <HAL_CAN_GetRxMessage>
  }
*/
  //HAL_UART_Transmit(&huart2,RxData,4,0xFFFF);


  flag *= -1;
 80032d0:	4b0e      	ldr	r3, [pc, #56]	; (800330c <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	425b      	negs	r3, r3
 80032d6:	4a0d      	ldr	r2, [pc, #52]	; (800330c <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 80032d8:	6013      	str	r3, [r2, #0]
  if(flag >0){
 80032da:	4b0c      	ldr	r3, [pc, #48]	; (800330c <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	dd05      	ble.n	80032ee <HAL_CAN_RxFifo0MsgPendingCallback+0x32>
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,1);
 80032e2:	2201      	movs	r2, #1
 80032e4:	2108      	movs	r1, #8
 80032e6:	480a      	ldr	r0, [pc, #40]	; (8003310 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 80032e8:	f7fe f8a4 	bl	8001434 <HAL_GPIO_WritePin>
  }else{
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,0);
  }

}
 80032ec:	e004      	b.n	80032f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,0);
 80032ee:	2200      	movs	r2, #0
 80032f0:	2108      	movs	r1, #8
 80032f2:	4807      	ldr	r0, [pc, #28]	; (8003310 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 80032f4:	f7fe f89e 	bl	8001434 <HAL_GPIO_WritePin>
}
 80032f8:	bf00      	nop
 80032fa:	3708      	adds	r7, #8
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	20000148 	.word	0x20000148
 8003304:	20000124 	.word	0x20000124
 8003308:	20000038 	.word	0x20000038
 800330c:	20000010 	.word	0x20000010
 8003310:	48000400 	.word	0x48000400

08003314 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003314:	b480      	push	{r7}
 8003316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003318:	bf00      	nop
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
	...

08003324 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800332a:	4b0f      	ldr	r3, [pc, #60]	; (8003368 <HAL_MspInit+0x44>)
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	4a0e      	ldr	r2, [pc, #56]	; (8003368 <HAL_MspInit+0x44>)
 8003330:	f043 0301 	orr.w	r3, r3, #1
 8003334:	6193      	str	r3, [r2, #24]
 8003336:	4b0c      	ldr	r3, [pc, #48]	; (8003368 <HAL_MspInit+0x44>)
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	607b      	str	r3, [r7, #4]
 8003340:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003342:	4b09      	ldr	r3, [pc, #36]	; (8003368 <HAL_MspInit+0x44>)
 8003344:	69db      	ldr	r3, [r3, #28]
 8003346:	4a08      	ldr	r2, [pc, #32]	; (8003368 <HAL_MspInit+0x44>)
 8003348:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800334c:	61d3      	str	r3, [r2, #28]
 800334e:	4b06      	ldr	r3, [pc, #24]	; (8003368 <HAL_MspInit+0x44>)
 8003350:	69db      	ldr	r3, [r3, #28]
 8003352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003356:	603b      	str	r3, [r7, #0]
 8003358:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800335a:	bf00      	nop
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	40021000 	.word	0x40021000

0800336c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b08a      	sub	sp, #40	; 0x28
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003374:	f107 0314 	add.w	r3, r7, #20
 8003378:	2200      	movs	r2, #0
 800337a:	601a      	str	r2, [r3, #0]
 800337c:	605a      	str	r2, [r3, #4]
 800337e:	609a      	str	r2, [r3, #8]
 8003380:	60da      	str	r2, [r3, #12]
 8003382:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a29      	ldr	r2, [pc, #164]	; (8003430 <HAL_CAN_MspInit+0xc4>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d14b      	bne.n	8003426 <HAL_CAN_MspInit+0xba>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800338e:	4b29      	ldr	r3, [pc, #164]	; (8003434 <HAL_CAN_MspInit+0xc8>)
 8003390:	69db      	ldr	r3, [r3, #28]
 8003392:	4a28      	ldr	r2, [pc, #160]	; (8003434 <HAL_CAN_MspInit+0xc8>)
 8003394:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003398:	61d3      	str	r3, [r2, #28]
 800339a:	4b26      	ldr	r3, [pc, #152]	; (8003434 <HAL_CAN_MspInit+0xc8>)
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033a2:	613b      	str	r3, [r7, #16]
 80033a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033a6:	4b23      	ldr	r3, [pc, #140]	; (8003434 <HAL_CAN_MspInit+0xc8>)
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	4a22      	ldr	r2, [pc, #136]	; (8003434 <HAL_CAN_MspInit+0xc8>)
 80033ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033b0:	6153      	str	r3, [r2, #20]
 80033b2:	4b20      	ldr	r3, [pc, #128]	; (8003434 <HAL_CAN_MspInit+0xc8>)
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ba:	60fb      	str	r3, [r7, #12]
 80033bc:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80033be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80033c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033c4:	2302      	movs	r3, #2
 80033c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c8:	2300      	movs	r3, #0
 80033ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80033cc:	2303      	movs	r3, #3
 80033ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80033d0:	2309      	movs	r3, #9
 80033d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033d4:	f107 0314 	add.w	r3, r7, #20
 80033d8:	4619      	mov	r1, r3
 80033da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033de:	f7fd feb7 	bl	8001150 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80033e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033e8:	2302      	movs	r3, #2
 80033ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033ec:	2301      	movs	r3, #1
 80033ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80033f0:	2303      	movs	r3, #3
 80033f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80033f4:	2309      	movs	r3, #9
 80033f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033f8:	f107 0314 	add.w	r3, r7, #20
 80033fc:	4619      	mov	r1, r3
 80033fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003402:	f7fd fea5 	bl	8001150 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_TX_IRQn, 0, 0);
 8003406:	2200      	movs	r2, #0
 8003408:	2100      	movs	r1, #0
 800340a:	2013      	movs	r0, #19
 800340c:	f7fd fe69 	bl	80010e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_TX_IRQn);
 8003410:	2013      	movs	r0, #19
 8003412:	f7fd fe82 	bl	800111a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 8003416:	2200      	movs	r2, #0
 8003418:	2100      	movs	r1, #0
 800341a:	2014      	movs	r0, #20
 800341c:	f7fd fe61 	bl	80010e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 8003420:	2014      	movs	r0, #20
 8003422:	f7fd fe7a 	bl	800111a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8003426:	bf00      	nop
 8003428:	3728      	adds	r7, #40	; 0x28
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	40006400 	.word	0x40006400
 8003434:	40021000 	.word	0x40021000

08003438 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b08a      	sub	sp, #40	; 0x28
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003440:	f107 0314 	add.w	r3, r7, #20
 8003444:	2200      	movs	r2, #0
 8003446:	601a      	str	r2, [r3, #0]
 8003448:	605a      	str	r2, [r3, #4]
 800344a:	609a      	str	r2, [r3, #8]
 800344c:	60da      	str	r2, [r3, #12]
 800344e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a18      	ldr	r2, [pc, #96]	; (80034b8 <HAL_UART_MspInit+0x80>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d129      	bne.n	80034ae <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800345a:	4b18      	ldr	r3, [pc, #96]	; (80034bc <HAL_UART_MspInit+0x84>)
 800345c:	69db      	ldr	r3, [r3, #28]
 800345e:	4a17      	ldr	r2, [pc, #92]	; (80034bc <HAL_UART_MspInit+0x84>)
 8003460:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003464:	61d3      	str	r3, [r2, #28]
 8003466:	4b15      	ldr	r3, [pc, #84]	; (80034bc <HAL_UART_MspInit+0x84>)
 8003468:	69db      	ldr	r3, [r3, #28]
 800346a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800346e:	613b      	str	r3, [r7, #16]
 8003470:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003472:	4b12      	ldr	r3, [pc, #72]	; (80034bc <HAL_UART_MspInit+0x84>)
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	4a11      	ldr	r2, [pc, #68]	; (80034bc <HAL_UART_MspInit+0x84>)
 8003478:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800347c:	6153      	str	r3, [r2, #20]
 800347e:	4b0f      	ldr	r3, [pc, #60]	; (80034bc <HAL_UART_MspInit+0x84>)
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003486:	60fb      	str	r3, [r7, #12]
 8003488:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800348a:	f248 0304 	movw	r3, #32772	; 0x8004
 800348e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003490:	2302      	movs	r3, #2
 8003492:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003494:	2300      	movs	r3, #0
 8003496:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003498:	2303      	movs	r3, #3
 800349a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800349c:	2307      	movs	r3, #7
 800349e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034a0:	f107 0314 	add.w	r3, r7, #20
 80034a4:	4619      	mov	r1, r3
 80034a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034aa:	f7fd fe51 	bl	8001150 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80034ae:	bf00      	nop
 80034b0:	3728      	adds	r7, #40	; 0x28
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	40004400 	.word	0x40004400
 80034bc:	40021000 	.word	0x40021000

080034c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034c0:	b480      	push	{r7}
 80034c2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80034c4:	bf00      	nop
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr

080034ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034ce:	b480      	push	{r7}
 80034d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034d2:	e7fe      	b.n	80034d2 <HardFault_Handler+0x4>

080034d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034d4:	b480      	push	{r7}
 80034d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034d8:	e7fe      	b.n	80034d8 <MemManage_Handler+0x4>

080034da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034da:	b480      	push	{r7}
 80034dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034de:	e7fe      	b.n	80034de <BusFault_Handler+0x4>

080034e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034e4:	e7fe      	b.n	80034e4 <UsageFault_Handler+0x4>

080034e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034e6:	b480      	push	{r7}
 80034e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80034ea:	bf00      	nop
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034f4:	b480      	push	{r7}
 80034f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034f8:	bf00      	nop
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr

08003502 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003502:	b480      	push	{r7}
 8003504:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003506:	bf00      	nop
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003514:	f7fc fe9e 	bl	8000254 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003518:	bf00      	nop
 800351a:	bd80      	pop	{r7, pc}

0800351c <CAN_TX_IRQHandler>:

/**
  * @brief This function handles CAN TX interrupt.
  */
void CAN_TX_IRQHandler(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_TX_IRQn 0 */

  /* USER CODE END CAN_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8003520:	4802      	ldr	r0, [pc, #8]	; (800352c <CAN_TX_IRQHandler+0x10>)
 8003522:	f7fd fad3 	bl	8000acc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_TX_IRQn 1 */

  /* USER CODE END CAN_TX_IRQn 1 */
}
 8003526:	bf00      	nop
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	20000038 	.word	0x20000038

08003530 <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8003534:	4802      	ldr	r0, [pc, #8]	; (8003540 <CAN_RX0_IRQHandler+0x10>)
 8003536:	f7fd fac9 	bl	8000acc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 800353a:	bf00      	nop
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	20000038 	.word	0x20000038

08003544 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003548:	4b1f      	ldr	r3, [pc, #124]	; (80035c8 <SystemInit+0x84>)
 800354a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800354e:	4a1e      	ldr	r2, [pc, #120]	; (80035c8 <SystemInit+0x84>)
 8003550:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003554:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003558:	4b1c      	ldr	r3, [pc, #112]	; (80035cc <SystemInit+0x88>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a1b      	ldr	r2, [pc, #108]	; (80035cc <SystemInit+0x88>)
 800355e:	f043 0301 	orr.w	r3, r3, #1
 8003562:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8003564:	4b19      	ldr	r3, [pc, #100]	; (80035cc <SystemInit+0x88>)
 8003566:	685a      	ldr	r2, [r3, #4]
 8003568:	4918      	ldr	r1, [pc, #96]	; (80035cc <SystemInit+0x88>)
 800356a:	4b19      	ldr	r3, [pc, #100]	; (80035d0 <SystemInit+0x8c>)
 800356c:	4013      	ands	r3, r2
 800356e:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003570:	4b16      	ldr	r3, [pc, #88]	; (80035cc <SystemInit+0x88>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a15      	ldr	r2, [pc, #84]	; (80035cc <SystemInit+0x88>)
 8003576:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800357a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800357e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003580:	4b12      	ldr	r3, [pc, #72]	; (80035cc <SystemInit+0x88>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a11      	ldr	r2, [pc, #68]	; (80035cc <SystemInit+0x88>)
 8003586:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800358a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800358c:	4b0f      	ldr	r3, [pc, #60]	; (80035cc <SystemInit+0x88>)
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	4a0e      	ldr	r2, [pc, #56]	; (80035cc <SystemInit+0x88>)
 8003592:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8003596:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8003598:	4b0c      	ldr	r3, [pc, #48]	; (80035cc <SystemInit+0x88>)
 800359a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800359c:	4a0b      	ldr	r2, [pc, #44]	; (80035cc <SystemInit+0x88>)
 800359e:	f023 030f 	bic.w	r3, r3, #15
 80035a2:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 80035a4:	4b09      	ldr	r3, [pc, #36]	; (80035cc <SystemInit+0x88>)
 80035a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035a8:	4908      	ldr	r1, [pc, #32]	; (80035cc <SystemInit+0x88>)
 80035aa:	4b0a      	ldr	r3, [pc, #40]	; (80035d4 <SystemInit+0x90>)
 80035ac:	4013      	ands	r3, r2
 80035ae:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80035b0:	4b06      	ldr	r3, [pc, #24]	; (80035cc <SystemInit+0x88>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80035b6:	4b04      	ldr	r3, [pc, #16]	; (80035c8 <SystemInit+0x84>)
 80035b8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80035bc:	609a      	str	r2, [r3, #8]
#endif
}
 80035be:	bf00      	nop
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr
 80035c8:	e000ed00 	.word	0xe000ed00
 80035cc:	40021000 	.word	0x40021000
 80035d0:	f87fc00c 	.word	0xf87fc00c
 80035d4:	ff00fccc 	.word	0xff00fccc

080035d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80035d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003610 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80035dc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80035de:	e003      	b.n	80035e8 <LoopCopyDataInit>

080035e0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80035e0:	4b0c      	ldr	r3, [pc, #48]	; (8003614 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80035e2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80035e4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80035e6:	3104      	adds	r1, #4

080035e8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80035e8:	480b      	ldr	r0, [pc, #44]	; (8003618 <LoopForever+0xa>)
	ldr	r3, =_edata
 80035ea:	4b0c      	ldr	r3, [pc, #48]	; (800361c <LoopForever+0xe>)
	adds	r2, r0, r1
 80035ec:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80035ee:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80035f0:	d3f6      	bcc.n	80035e0 <CopyDataInit>
	ldr	r2, =_sbss
 80035f2:	4a0b      	ldr	r2, [pc, #44]	; (8003620 <LoopForever+0x12>)
	b	LoopFillZerobss
 80035f4:	e002      	b.n	80035fc <LoopFillZerobss>

080035f6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80035f6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80035f8:	f842 3b04 	str.w	r3, [r2], #4

080035fc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80035fc:	4b09      	ldr	r3, [pc, #36]	; (8003624 <LoopForever+0x16>)
	cmp	r2, r3
 80035fe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003600:	d3f9      	bcc.n	80035f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003602:	f7ff ff9f 	bl	8003544 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003606:	f000 f811 	bl	800362c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800360a:	f7ff fcd3 	bl	8002fb4 <main>

0800360e <LoopForever>:

LoopForever:
    b LoopForever
 800360e:	e7fe      	b.n	800360e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003610:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8003614:	080036dc 	.word	0x080036dc
	ldr	r0, =_sdata
 8003618:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800361c:	20000018 	.word	0x20000018
	ldr	r2, =_sbss
 8003620:	20000018 	.word	0x20000018
	ldr	r3, = _ebss
 8003624:	20000154 	.word	0x20000154

08003628 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003628:	e7fe      	b.n	8003628 <ADC1_2_IRQHandler>
	...

0800362c <__libc_init_array>:
 800362c:	b570      	push	{r4, r5, r6, lr}
 800362e:	4d0d      	ldr	r5, [pc, #52]	; (8003664 <__libc_init_array+0x38>)
 8003630:	4c0d      	ldr	r4, [pc, #52]	; (8003668 <__libc_init_array+0x3c>)
 8003632:	1b64      	subs	r4, r4, r5
 8003634:	10a4      	asrs	r4, r4, #2
 8003636:	2600      	movs	r6, #0
 8003638:	42a6      	cmp	r6, r4
 800363a:	d109      	bne.n	8003650 <__libc_init_array+0x24>
 800363c:	4d0b      	ldr	r5, [pc, #44]	; (800366c <__libc_init_array+0x40>)
 800363e:	4c0c      	ldr	r4, [pc, #48]	; (8003670 <__libc_init_array+0x44>)
 8003640:	f000 f820 	bl	8003684 <_init>
 8003644:	1b64      	subs	r4, r4, r5
 8003646:	10a4      	asrs	r4, r4, #2
 8003648:	2600      	movs	r6, #0
 800364a:	42a6      	cmp	r6, r4
 800364c:	d105      	bne.n	800365a <__libc_init_array+0x2e>
 800364e:	bd70      	pop	{r4, r5, r6, pc}
 8003650:	f855 3b04 	ldr.w	r3, [r5], #4
 8003654:	4798      	blx	r3
 8003656:	3601      	adds	r6, #1
 8003658:	e7ee      	b.n	8003638 <__libc_init_array+0xc>
 800365a:	f855 3b04 	ldr.w	r3, [r5], #4
 800365e:	4798      	blx	r3
 8003660:	3601      	adds	r6, #1
 8003662:	e7f2      	b.n	800364a <__libc_init_array+0x1e>
 8003664:	080036d4 	.word	0x080036d4
 8003668:	080036d4 	.word	0x080036d4
 800366c:	080036d4 	.word	0x080036d4
 8003670:	080036d8 	.word	0x080036d8

08003674 <memset>:
 8003674:	4402      	add	r2, r0
 8003676:	4603      	mov	r3, r0
 8003678:	4293      	cmp	r3, r2
 800367a:	d100      	bne.n	800367e <memset+0xa>
 800367c:	4770      	bx	lr
 800367e:	f803 1b01 	strb.w	r1, [r3], #1
 8003682:	e7f9      	b.n	8003678 <memset+0x4>

08003684 <_init>:
 8003684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003686:	bf00      	nop
 8003688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800368a:	bc08      	pop	{r3}
 800368c:	469e      	mov	lr, r3
 800368e:	4770      	bx	lr

08003690 <_fini>:
 8003690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003692:	bf00      	nop
 8003694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003696:	bc08      	pop	{r3}
 8003698:	469e      	mov	lr, r3
 800369a:	4770      	bx	lr
